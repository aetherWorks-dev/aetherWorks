mesend "openStack" to this cardsend "openBackground" to this cardsend "openCard" to this cardset lockMessages to falseexit bailOnOpenend ifend ifdoMenu "Quit HyperCard"end bailOnOpenfunction wrongStackget the long name of medelete word 1 of itdelete char 1 of itdelete last char of itreturn (it is not line 1 of the stacks)end wrongStackfunction OKToOpenStack-- Check: version of HyperCard & memoryif not VersionOK() then return falseif not QTVersionOK() then return falseif StackIsLocked() then return falsereturn MemoryOK()end OKToOpenStackfunction StackIsLockedif (the cantModify of this stack) thenset cantModify of this stack to falseend ifif (the cantModify of this stack) thenput "The QuickTime Tools stack must be unlocked to use it. " &Â"Please unlock the stack from the Finder, or use another copy " &Â"of the stack." into AnswerString  --Æanswer AnswerStringreturn trueend ifreturn falseend StackIsLockedfunction VersionOK -- check HyperCard versionif the version < 2.4 thenput "The QuickTime Tools stack requires version 2.4 of HyperCard "&Â"or greater. To use this stack, you will need to upgrade your "&Â"HyperCard." into AnswerString --Æanswer AnswerStringreturn falseend ifreturn trueend VersionOKfunction QTVersionOKif the version of QuickTime < 2.5 thenput "To use QuickTime Tools, QuickTime 2.5 or later must be installed."Â& return & return & "For best results, " Â& "install QuickTime 3.0 or later." & return & return Â& "Visit http://www.apple.com/quicktime to download the " Â& "latest version of QuickTime." & return & return into AnswerString --Æanswer AnswerStringreturn falseend ifreturn trueend QTVersionOKfunction MemoryOK-- We only need extra memory if QT installedglobal gHasQuickTimecheckForQuickTimeif gHasQuickTime thenif the heapSpace < 476000 then -- 408000 then -- 307200 then -- ¥¥¥put 40 + (476000 - (the heapSpace)) div 1024 into neededMemput PathToLeaf(long name of HyperCard) into HCNameput "There is not enough memory to run Ò" &  short name of this stackÂ& "Ó. The memory partition size of " & HCNameÂ& " should be increased by at least" && neededMem & "K." into AnswerString --Æanswer AnswerStringreturn falseend ifend ifreturn trueend MemoryOKon checkForQuickTimeglobal gHasQuickTimeif gHasQuickTime is empty thenput QuickTimeInstalled() into gHasQuickTimeif not gHasQuickTime thenput "To view the demonstrations and use the toolkit, you need to"Â&& "install the QuickTime extension and restart your computer."Âinto AnswerString  --Æanswer AnswerStringend ifend ifend checkForQuickTimeon compactThisStackif 10 * (the freeSize of this stack) > the size of this stack thenif (line 1 of the stacks) is not in (the stacksInUse) thendoMenu "Compact Stack"end ifend ifend compactThisStackon closeStackWindowif the longWindowTitles then put line 1 of the stacks into StackWindowelse put the short name of this stack into StackWindowclose window StackWindowend closeStackWindow------------------------------------------------------------------------- System message handlers:-- Menu Mark <B open & close card-----------------------------------------------------------------------on openCardif wrongStack() then pass openCardsetUpCardpass openCardend openCardon closeCardif wrongStack() then pass closeCardif the version < 2.1 then exit closeCardhideTheWindowspass closeCardend closeCardon setUpCard--Æ localize name of Demo buttonset enabled of bg btn "Demo" to (fld "Demo Card" is not empty) --Æend setUpCardon hideTheWindows-- This handler will close all of the QT windows that were opened-- for demonstrations... called by "closeCard"put GetDemo() into DemoMovieNameif demoMovieName is empty then exit hideTheWindowsrepeat with K = the number of windows down to 1if the name of window K is demoMovieName thenif the owner of window K is "Movie" thenclose window Kend ifend ifend repeatend hideTheWindows------------------------------------------------------------------------- Menu Mark <B Handlers to manage demos:-----------------------------------------------------------------------on goToTheDemoif fld "Demo Card" ­ empty thenput fld "Demo Card" into cardNamevisual dissolve fastgo cd cardNameend ifend goToTheDemoon SetDemo demoMovieNameput demoMovieName into cd fld "TheMoviePath" of cd "Topics"end SetDemofunction GetDemoreturn (cd fld "TheMoviePath" of cd "Topics")end GetDemoon showHideDemoput GetDemo() into demoMovieNameif there is no window demoMovieName thenglobal gHasQuickTimeif gHasQuickTime is true thenif the optionKey is "down" then SetDemo emptysend "showDemoMovie" to this cd -- ignore resultelsebeepput "You need to install the QuickTime extension before " &Â"you can try the demos in this stack." into AnswerString  --Æanswer AnswerStringend ifelseclose window demoMovieNameend ifend showHideDemoon showDemoMovie-- should be handled by cardreturn falseend showDemoMovieon callMovieXCMD movieFile, windowStyle, movieLoc, vis, layer-- this is a wrapper routine that will handle errors-- returns true if call to XCMD successful;-- intended for use by demos onlyMovie movieFile, windowStyle, movieLoc, "invisible", layerif the result is not empty thenreturn not GotMovieError(the result)elseput word 3 of the owner of movie 1 into wdIDput DemoScale(1) into ScaleToFitif ScaleToFit ­ 1 thenset scale of movie 1 to ScaleToFitsend "resizeToMovie" to window id wdIDend ifif (vis ­ "invisible") then show window id wdID-- check memoryput GetDemo() into demoMovieNameif not MemoryOKWithMovie() thenclose window demoMovieNameend ifreturn (there is a window demoMovieName)end ifend callMovieXCMDfunction DemoScale DemoMovie-- Assumes that movie DemoMovie exists; pass name or numberput 136 into DemoX  -- change these constants, if nec.;put 160 into DemoY  -- values corresp. to size of old demo movieput the defaultRect of movie DemoMovie into DefRectput item 3 of DefRect - item 1 of DefRect into DefXput item 4 of DefRect - item 2 of DefRect into DefYif DefX ² 0 or DefY ² 0 thenreturn 1else-- note: if movie is small, don't stretchreturn min(1,max(DemoX/DefX,DemoY/DefY))end ifend DemoScalefunction MovieArea DemoMovie-- Assumes that movie DemoMovie exists; pass name or numberput the defaultRect of movie DemoMovie into DefRectreturn (item 3 of DefRect - item 1 of DefRect) Â* (item 4 of DefRect - item 2 of DefRect)end MovieAreafunction MemoryOKWithMovieput true into okToPlayput the heapSpace into currHeapput 260 * 1024 into minHeapif currHeap < minHeap thenput PathToLeaf(long name of HyperCard) into HCNameput 40 + (minHeap - (the heapSpace)) div 1024 into neededMemput "Memory is tight." && HCName && "may not have enough memory to"Â&& "play this movie. You should close some windows or increase"Â&& HCName & "'s memory partition size by at least" && neededMem & "K."Âinto AnswerString  --Æanswer AnswerString with "Play Anyway" or "Cancel"  --Æif (it is not "Play Anyway") then put false into okToPlay  --Æend ifreturn okToPlayend MemoryOKWithMoviefunction DemoMovieDisplayed--  Note: we rely on window names (not robust!)--  Returns: true if there is a demo movie windowput GetDemo() into demoMovieNameif there is a window demoMovieName thenif owner of window demoMovieName is "Movie" thenreturn trueend ifend ifput "For this demo to work, a QuickTime movie needs to be " &Â"displayed. Would you like to show the demo movie now?" into AnswerString --Æanswer AnswerString with "Cancel" or "OK" --Æif it is "Cancel" then return false --Æsend "showDemoMovie" to this cd  -- defined for each demo card!return the resultend DemoMovieDisplayedfunction DemoMovieDisplayedWithQTVers ReqQT-- call this instead of DemoMovieDisplayed if a demo-- requires a particular version of QuickTime;-- pass ReqQT as a _string_checkForQTVers ReqQTif the result is not empty thenreturn falseelsereturn DemoMovieDisplayed()end ifend DemoMovieDisplayedWithQTVerson checkForQTVers ReqQTif (QuickTimeVersion() >= ReqQT) thenreturn emptyelseanswer "This demo requires QuickTimeª" && ReqQT && "or greater." --Æreturn "OLD QT"end ifend checkForQTVersfunction GotMovieError errorStringif errorString is empty then return falseif errorString is not "Cancel" thenput "An error occurred while trying to open the QuickTime movie." Âinto AnswerString --Æanswer AnswerStringelseSetDemo empty  -- movie not found and user canceledend ifreturn true -- "Cancel" is still an error!end GotMovieError------------------------------------------------------------------------- Menu Mark <B Movie message handlers-----------------------------------------------------------------------on openMovie MovieName, MovieIDif wrongStack() then pass openMovieput GetDemo() into DemoMovieFileNameif MovieName is not DemoMovieFileName thenSetDemo MovieNameend ifif there is a cd btn "Show Movie"then set name of cd btn "Show Movie" to "Hide Movie" --Æend openMovieon closeMovie MovieNameif wrongStack() then pass closeMovieif MovieName is GetDemo() thenif there is a cd btn "Hide Movie" thenset name of cd btn "Hide Movie" to "Show Movie" --Æend ifend ifend closeMovie------------------------------------------------------------------------- Menu Mark <B Handlers for Toolkit cards-----------------------------------------------------------------------function ToolkitMoviereturn line 1 of fld "Toolkit Movie Params"end ToolkitMoviefunction ToolkitWindowStylereturn line 2 of fld "Toolkit Movie Params"end ToolkitWindowStylefunction ToolkitMovieLocreturn line 3 of fld "Toolkit Movie Params"end ToolkitMovieLocfunction ToolkitMovieVis -- unusedreturn line 4 of fld "Toolkit Movie Params"end ToolkitMovieVisfunction ToolkitMovieLayerreturn line 5 of fld "Toolkit Movie Params"end ToolkitMovieLayeron setToolkitMovie theMovie -- stores file used by toolkitput theMovie into line 1 of fld "Toolkit Movie Params"end setToolkitMovieon setToolkitWindowStyle theWStyleput theWStyle into line 2 of fld "Toolkit Movie Params"end setToolkitWindowStyleon setToolkitMovieLoc theLocput theLoc into line 3 of fld "Toolkit Movie Params"end setToolkitMovieLocon setToolkitMovieVis theVis  -- unusedput theVis into line 4 of fld "Toolkit Movie Params"end setToolkitMovieVison setToolkitMovieLayer theLayerput theLayer into line 5 of fld "Toolkit Movie Params"end setToolkitMovieLayerfunction ToolkitMovieInforeturn fld "Toolkit MovieInfo"end ToolkitMovieInfoon setToolkitMovieInfo theInfoput theInfo into fld "Toolkit MovieInfo"end setToolkitMovieInfoon toolkitOpenCardglobal gToolkitVisitedset cursor to 4if gToolkitVisited is empty thenInitializeToolkitif the result is false then exit toolkitOpenCard -- no QT, no movieend ifupdateToolkitend toolkitOpenCardon InitializeToolkit-- returns true if OK to proceed-- we also return false if no movie is selected?global gToolkitVisited, gHasQuickTimeput true into gToolkitVisitedif gHasQuickTime ­ true thendisableToolkit truereturn falseend ifdisableToolkit false  -- make sure it's enabledif ToolkitMovie() ­ empty then return true-- no movie for toolkit... notify userif the lockScreen then unlock screen with visual dissolveif the short name of this cd is "QuickTime Toolkit" then --Æput "Click ÒChoose a Movie FileÓ to select a movie to use " &Â"with the toolkit." into AnswerString  --Æelseput "You need to select a movie to use with the toolkit. " &Â"Click ÒToolkitÓ to go to the first card of " &Â"of the toolkit." into AnswerString  --Æend ifanswer AnswerStringreturn falseend InitializeToolkiton updateToolkitglobal gHasQuickTimeif gHasQuickTime is false then exit updateToolkitput ToolkitMovie() into theMovieif theMovie is not empty thenif the lockScreen then unlock screen with visual dissolve-- check out everythingput MovieFileAndInfo(theMovie) into theMoviePathif theMoviePath is empty thenglobal gXCMDErrorif gXCMDError is not empty thenanswer gXCMDError  --Æend ifemptyToolkit  -- movie couldn't be found & user canceledelseput line 1 to 12 of theMoviePath into theMovieInfodelete line 1 to 12 of theMoviePathput PathToLeaf(theMoviePath) into foundMovieif foundMovie ­ theMovie thenput foundMovie into theMovieresetToolkitParams theMovieend ifsetToolkitMovieInfo theMovieInfoend ifend ifsend "updateToolkitCard" to this cd   -- for cd controlsend updateToolkiton emptyToolkitput empty into fld "Toolkit Movie Params"put empty into fld "Toolkit MovieInfo"put empty into fld "Toolkit Movie Properties"end emptyToolkiton resetToolkitParams theMoviesetToolkitMovie theMoviesetToolkitWindowStyle "windoid"setToolkitMovieLoc "card"setToolkitMovieVis "invisible"setToolkitMovieLayer "floating"end resetToolkitParamson warnNoToolkitbeepanswer "The Toolkit is not available."  --Æend warnNoToolkiton disableToolkit howset visible of btn "Cover" of cd id 32905 to howset visible of btn "Cover2" of cd id 32905 to howset visible of btn "Cover" of cd id 16425 to howset visible of btn "Cover" of cd id 24141 to howend disableToolkiton closeToolkitWindowsput ToolkitMovie() into demoMovieNamerepeat with K = the number of windows down to 1if the name of window K = demoMovieName thenif the owner of window K is "Movie" thenclose window Kend ifend ifend repeatend closeToolkitWindows------------------------------------------------------------------------- Menu Mark <B Menu Handlers-----------------------------------------------------------------------on createQTTMenusif there is no menu "QT Tools" then --Æcreate menu "QT Tools" --Æend ifput the itemDelimiter into SaveDelimset the itemDelimiter to ","put createQTTMenuItems() into theMenuItemsput createQTTMenuMsgs(theMenuItems) into theMenuMsgsput theMenuItems into menu "QT Tools" with menuMsg theMenuMsgs --Æset the itemDelimiter to SaveDelimend createQTTMenuson uncreateQTTMenusif there is a menu "QT Tools" then delete menu "QT Tools" --Æend uncreateQTTMenusfunction createQTTMenuItemsput "Topics,-,About This Stack,Movie XCMD Licensing,"&Â"QuickTime Info,-,Movies and Movie Windows,Tracks,Scenes,"&Â"Sprites,Nodes,HotSpots,Movie Controller,"&Â"QuickTime VR Controller,-,Some Sample Movie Syntax," &Â"-,Movie Syntax Organization,Index by Object,Index by Term,-,"&Â"QuickTime Toolkit" into theMenuItems --Æreturn theMenuItemsend createQTTMenuItemsfunction createQTTMenuMsgs theMenuItemsput empty into TheMenuMsgsrepeat with ndx = 1 to the number of items in TheMenuItemsif item ndx of TheMenuItems is in "Commands,Properties" thenput "¥" after item ndx of TheMenuItemsend ifif item ndx of TheMenuItems is "Index by Object" thenput "goIndex" && quote & "by Object" &quote &"," after TheMenuMsgselseif item ndx of TheMenuItems is "Index by Term" thenput "goIndex" && quote & "by Term" &quote &"," after TheMenuMsgselseput "go to cd" && quote & item ndx of TheMenuItems & Âquote & "," after TheMenuMsgsend ifend ifend repeatdelete last char of TheMenuMsgs -- remove trailing commareturn TheMenuMsgsend createQTTMenuMsgs------------------------------------------------------------------------- Menu Mark <B Navigation-----------------------------------------------------------------------on goLinkput the clickText into TheCardNameif there is a card TheCardName thenselect the clickChunkwait 10visual dissolve fastgo cd TheCardNameend ifend goLinkon goClickLine-- select clicked line and go to the card defining the termset cursor to 4put the clickLine into theLineput the value of theLine into theTermif theTerm is not empty thenput word 2 of theLine into M -- line numberselect char 1 to (the length of theTerm) of line M to (M+1)Âof the targetif last char of TheTerm is " " then delete last char of TheTermwait 10visual dissolve fastgo cd theTermend ifend goClickLineon unlockScreenReallyrepeat while the lockScreenunlock screenend repeatend unlockScreenReallyfunction handleExceptions theProprepeat while last char of theProp = " "delete last char of thePropend repeatput Â"audioLevel,soundVolume" &return&Â"botRight,bottomRight" &return&Â"controllerVisible,visible" &return&Â"id,id¥" &return&Â"loc,loc[ation]" &return&Â"location,loc[ation]" &return&Â"movieCursorID,cursorID" &return&Â"movieDefaultRect,defaultRect" &return&Â"movieIdle,idle" &return&Â"movieLoc,loc[ation]" &return&Â"movieRect,rect[angle]" &return&Â"movieScale,scale" &return&Â"number,number¥" &return&Â"rect,rect[angle]" &return&Â"rectangle,rect[angle]" &return&Â"windowLoc,loc[ation]" &return&Â"windowName,name" &return&Â"windowRect,rect[angle]" &return into exceptionsput item 2 of line textToLineNum(return & theProp &",",return & exceptions) of exceptionsÂinto newPropif newProp <> empty then return newPropelse return thePropend handleExceptions------------------------------------------------------------------------- Menu Mark <B Stack functions-----------------------------------------------------------------------function PathToLeaf filePathput the itemDelimiter into SavedItemDelimiterset itemDelimiter to ":"put last item of filePath into fileLeafset itemDelimiter to SavedItemDelimiterreturn fileLeafend PathToLeaffunction checkHCversion reqdif the version < reqd thenbeepanswer "Sorry, this stack requires HyperCard" && reqd &" or later."Âwith "Quit" or "Home"if it is "Quit" then doMenu "Quit HyperCard"else go homeexit to HyperCardend ifreturn trueend checkHCversionfunction MovieFileAndInfo TheFile-- ask user for a movie file; return MovieInfo and file pathget MoviePath(TheFile)if it is not empty thenput it into TheMoviePathput MovieInfo(TheMoviePath) into TheMovieInfoif TheMovieInfo is not empty thenput TheMoviePath into line 13 of TheMovieInforeturn TheMovieInfoend ifend ifreturn emptyend MovieFileAndInfofunction HMSTToTicks TheHMSTput the itemDelimiter into NonStdItemDelimput 0 into TimeInMovieTicksset itemDelimiter to commarepeat with ItemNum = 1 to the number of items in TheHMSTmultiply TimeInMovieTicks by 60add item ItemNum of TheHMST to TimeInMovieTicksend repeatset itemDelimiter to NonStdItemDelimreturn TimeInMovieTicksend HMSTToTicksfunction ticksToHMST TheTicksput empty into TheHMSTrepeat with K = 1 to 3put TheTicks MOD 60 before theHMSTput TheTicks DIV 60 into TheTicksif TheTicks > 0 then put "," before theHMSTelse exit repeatend repeatif TheTicks > 0 then put TheTicks before theHMSTreturn theHMSTend ticksToHMSTfunction QuickTimeInstalledreturn movieInfo(".") ­ ""end QuickTimeInstalledfunction QuickTimeVersionput QuickTimeLongVersion() into QTVersif QTVers = 0 then put "000" into QTVerselse put the value of char 1 to 4 of QTVers into QTVersput "." before char (-1+the length of QTVers) of QTVersreturn QTVersend QuickTimeVersionfunction QuickTimeLongVersionput movieInfo(".") into QTLongVersif QTLongVers is empty then return 0return QTLongVersend QuickTimeLongVersionfunction inThisFolder fNameput line 1 of the stacks into pathput the itemDelimiter into saveDelimset itemDelimiter to ":"put fName into last item of pathset itemDelimiter to saveDelimreturn (there is a file path)end inThisFolderfunction textToLineNum theText,sourceput source & return into sourcereturn the number of lines of char 1 to Âoffset(theText,source) of sourceend textToLineNumfunction LineToLineNum theText,theContainerput return & theContainer & return into theContainerreturn the number of lines of char 1 to Âoffset(return & theText & return,theContainer) of theContainerend LineToLineNumfunction itemToItemNum theItem,theListput "," &theItem &"," into theItemput "," &theList &"," into theListreturn the number of items in char 1 to offset(theItem,theList) of theListend itemToItemNum--¥¥¥-------------------------------------------------------------------- Menu Mark <B Admin Handlers-----------------------------------------------------------------------on shipQTTlock screenlock messagesgo cdunmark all cdslockAllFieldsemptyStackData-- set the zoomed of cd window to truerepeat while the lockScreenunlock screenend repeatset loc of cd window to -32768,-32768doMenu "Compact Stack"go homeend shipQTTon lockAllFieldsset lockMessages to trueset lockRecent to truepush this cdrepeat with K = 1 to the number of cdsset cursor to busygo cd Krepeat with L = 1 to the number of cd fldsset cursor to busyset lockText of cd fld L to trueend repeatend repeatrepeat with K = 1 to the number of bgsset cursor to busygo bg Krepeat with L = 1 to the number of bg fldsset cursor to busyset lockText of bg fld L to trueend repeatend repeatpop cardset lockRecent to falseset lockMessages to falseend lockAllFieldson emptyStackDataput "Simple Movie" into DemoMovie --ÆSetDemo DemoMovieput "Window Index" into fld "Current Index" of cd "Window Index"put "Parameters Index" into fld "Current Index" of cd "Parameters Index"end emptyStackData                                                                                                                                                                                                                                                                                                                                         MASTÿÿÿÿ                     /=   8 ¥¸ 0 /èÙ /÷I 4â ÊW ¥= Ð iÍ íé * !q 6© ó  º× -E ÐN av -v [ «@ é· ! t Ç tJ ÊÝ ! !Åâ n¬ [ s¡ ~ 0W  ° %Åß     &tQ /ÏÉ  &  '   ( ,Ý7 øâ ;ù Ðä 0u  D mW &4Õ ²) ¸Ù /û ²¾ "ð)      vc     !;J ' %Øã f 'OÂ     '¬Ò '¸À     (& (3 (@§ (M´ Z (^0 (kQ +M
 +d +yÁ Jû R +º ¨M 4±  7 ¾J ßF þ Ä %ú tp ´ ôþ m 
  ÷¶         ¨¦ &[ì /ã ­Ì 
     
Þù -Ò -Ál . .gf 4B .Á ã çB   t U  ´Ø ô                                                                                                 ( & Ñ (
 f ïü     !® Î ¥ ( ©ª l ~u !þ· 7&  ù "#C Àò ;' á %[ã X| & $£( !P©         Á !' {ò ÖÝ     ð òQ Û         T3 ·ú     &ÍÞ Ð Oÿ ã  : N2 «ª òy  Ö ê &ºi C èe ¯ é  ¬ ©W gÉ EF ºe »     8 #÷ 	|À ah > cþ D< 8 úË  M  V Z ÿc qi ;Ñ Ø J · ÒÏ %ãþ Æ ê %Ú         )1å )= +æÎ +ôS (û¶ ': +          ,® ,! ,N ,$ ,¤. 	Åy 
H
 /¼ ,ÊÔ 'Ôª ) 'z )>Î +´+ )jµ 	 	Âô                                         -xÚ -ä	 .@ä .íù .ºö .ÏÝ ,óR 
K  
r /[Ã          k                                                                                                                                                                                                                                                                                                                                                                                   LIST  ;u             ¼ T   Ø-Ã©   ¼      _±   fp   g   hþ   yB   ~   Ø                                       PAGE  _±      ;u­W~  j`                                                                                 tùà`   ¤  A  
 `T@²  !-3bÉ 0(æÑÀ  @P@¡P Â,  \àoþÿïóüùÿ>ïï4ýÓè/Åë¼{ÿ½¿oü{ÿ^á·»úóyµýþ½¿ÿß{Éoýßöïp>\_}MÏÿïñîþÿÝù´¬{  AÙ #Ðs1",FèX2 	°h$%¢Q   Ä àZCP@¬1P! ¨C
  W þ²÷¹çþîÿ®Ù?ßéÿ½çæÑÿÿ¿_¿»ÿÿ{ÿÿõÿ·ÿ7ÿËýÿÿ÷ÿÞý}ßÿïO¾ïÿ?Ù~<_ÿ¯ÿ¿ÿÿ¿ýÿÿÿº½   /8Y  Áó¥¥h©à¡E"*Ï ¼ýtm\2²¦Í1k¬ÛÔPùúHF&;c:tLXV¦o³;^¼ÍP­  Kf ( ¢	 Â#G  ÀA"*	` X;² AQ¢sÙz y
YB¤a8AYà,!)V
@>  `7 (QEÐÁ	¡£¢ ÂE2"å`Ü!;² ÅX`aÝyPPypB(I8HQ@²§-¥_iV	 m ;  aJ 
þç2ì HáÄÀÀE"B8½ó&Ø~¢%ÀA!iÝ{Py øÌN6a9X.0Mçf±+V¸ 0\  bF nxÓ×`©÷óJùc¤ï(cçU»:*Ý ¯e{Ü³ó+ëýÿ¦ø>yïç~þ¿ok}\U~xAÃ¶î³«ºü2%½Ïþs­I  cþ .ëQµqñç»ÿwÀ¼ÿÖï ÊÑ"ê>ü­æÁ¿þåºòÛ§ça­ëµÿnù*~üÿöõ]ç¼×y?^E"ïÿå»^ÿYÿE\  U &¨Ø°ØóGzÈ$0ã`è¨Õ2Ï±oåb[ÏººÃ¦ÁwyþÉ6]ý:«üNV[s>XQyNR"¥73øÖÍV<y  d .îÚÝð¬ÿCÿ¯lpçÇðªÒçí¿2.ï©8ûìnÝc·²·ç{ï§Ûwå^ùÛ{øNÇ}kþZÕ{ÍRM'í¾÷¹^2§¶Î~UÜ  [û ?þÿÿ¿ß÷ßÿÿ½ïóÿÇïÿ|ýïíï¿¿ß?ÿüÿß=·~ÿß÷y¿ÿÿßÛû~^·ÿû¿ß]{ÎÿEþÿþÿþûÿ÷çÿÿ§¼Ý  5 .1A Á²¤ °ÅZÉ 1Q&"4©`%ü² /¢A!iïM»ÖGY |jf6!?Q\
ën¹Ï«V4Ø Ü  vàbH
  `  è
 @Ó0 T      H 0ÈQpF@ &@@(© $ E-2 $  © ~ýÛÿ®´ÙþyO2øõïßÊý¾ó.Köÿ_{¿A»ßk÷°Îß¶Üç·ß·ö6ý}ÿôÎõ~[nïÛ§ýùï¿|_º¿ÈÍNîþ  ( bÌ¢§Ø*1`òÞ=ê©®ñPÿÙ Z%×°©RâÜE§¿×@5íTÞV$IanHnë%r­Om_H>  '¬     P !      É         X     `    ( @  "    :  )¡ j¤X®!  `  & PÝ Z  È@µ pÌS GD   &@@¨	@b(, ©   *      @  @       Á           H      @     " @      
   , 
    A @     
 Á         h   @ 1  &@  	    -° b@ @` 

@Õ      H   2QHP D   ®@@	H`DF IH   Ðà  Á 	¢   $*° À` Ò!  0 A & DÖ X PCD*CP) H           PAGE  fp      ;u*x®  @ .1­¨Ê»Ì&©ñïn¤£ñ	$¾ãS+~EñÖ*×°ý¦ðgÝî×>Ôu]Í7¾_FæM©?´ª.ÑgìåýõÛ8÷çö-_Ê  !t ÿÛß®ÿûÿÿÿ7þÿÿßÿïý¶¯ÿïÛÿÿ¿ûÿý¿ßï¿¶ß¿ÿþÿÿÿÿßÿþÿÿÿÿÿßþÿï÷þ[ßÿÿûÝþÿÿÿÿÿÞ»ýÿßµo¿ÿ  "Ç [ZÙY¾Èí;(hå£´¦ûháÞîjaag*ÓÞdÛÆ;ßzåK`*2=Üâ«¸[Mq(æ%Z  #J     À @   
! @ $` ' À B  `    
H Ã  e-@X  à@    @	             @            "            @ $     	       ^M @        P" @¡     @     2 (                  (  @) B             À   P p @@    2        D  @ À @  ßþà@¡ÁÔ ­ÐÀd&,âq+#ëÂEìH×*ZHäCaDU.@L Ku¸,@D  §u $  `  ä @@ C ÀÁ @+³ A0d2H @ *  X@   $°   ÏC B¿¸,ïEN¤ Ç«$G @)ªF2¨åâ×)·CQ)lÜÛ;i{JzV7OeÊQhi@L´ýÀ|Ò<¼î	c  Áú   ÃR¶ ¦2Ä$"P `  
DT#ôÀ"3HA
3 R@`R ÐC ¤v²4É )  Ä @à" ¢ PE À¨`` b$ @5¤ Ñ @`X@@@BÈ TDÈ (  2 HÜ ì@"Ä @    -$'<Q  
	HHPI7@ÙÂ &	"@@@H 4A¤!T2 ¨h    HÌ­ Àâ¤AÎ B 
 &G<P(D¸î7@YÊ1(@ "H@È HA¥	QV¥ ¨(a  ÖF (ÀQrÆäíÅ³Tb(Å30ð)f)Ë³"Q°ìÔ#3Ó[z'¤C î HVpÄjvô>¸¢aP  ÕÉ   A ¤äÄDÁ$E01@ÒH³ Q°ìÔ2ÓG6g@ H ,4t6¸
!8  Ø» 
à   ¤ P  D 0 `!bB       @@ (B@H @À  E  ×e    A¤ ¥Ä $a00"@Â *O@Q¡eÐ2HE0NÀaÈX   ´t°t   :ä   080 G á Ä &$ (T b@ 
¢BÑTA¨&[J  J i  @Z È   Æ 8_¼ A¤ Ä `(@Q 
K`Q8$À³HAJ @!AP@ 8t°$´  8  âË . Á ¤  #(¨P   
H @mÈA7HY@I!. @\$(¨F    ¢Î 
 ¢À      #(P  	 @B @I!
@  %  T  £¥  ¢À   D  #( R#  
@@ÀBA@H!@    T   ðÚ   ÇÀåAÄ ¦TÀ !¤, @ 
ÀP |ÈB2
I
 DL1JQDHAä| P           PAGE  g      ;uPî1  ­'   À ä@À 0Q` CH @Q0ÌÒ2I
DÄD 	 H  Ä,T x  Åÿ 	ø0äG³MPäìD#C F*q`@@Ò ·ÀY1lÀ:U
vÈRôC$
ÅH\´T4HP  i    ¬V A@     @@ ( "    R    À @ 0     @  ¸ò I,¡Üá¦Z  $8,p ¡
ÈU¡=ÚYÙÊRd$XQ	R Lå<7ôòM  Ç 0X  @Ô¤  Ä  `0@  
	`Q fÀ2Ha
@Hà@P    D°    ÔW =  @D¤ ä ($bèB ³@A5eÀ:óLÁÊ2n¤a".WÀÙ &@¥úF°¤È ¨  ¬ò  @ÆA %ÆE"& * !81` Ì£@Q@åÜ3HY1D0AIL (¡tÐ H9  ®  
`$    P¡  À  @ b    É @F@ 
  @@H ÄP@À  h  à< 
 ¥À Æ .Â2` Þ )·D@`¥ÈHÉ
HN¡@ X@xL H§D·È)  °| +¨Á:®ÏG &@Ak&È :IpÉ £@Qíü¿HY"6lF§@ 	 IJ(±u<¼Â58  á8 É: ä©ä! Pjp CÒUÖ0
£hTq%ÊÑY"¶(JWÀ@ ?hP,åd»ýØ¥4\  < . ÈÄ°¤    !  ( b( `EGC&úBT! À  ¹Ì%0    Êª /B`Ð2ì ­
S§ÄÄ-À,0bàbbÈÖ 3äÕ1ÅÂºIÁ6DTµÃ NÀu P\ õØVøßÌh)  î dêÒòàùÁÛ®¼Èæ ËVP;©./eCÇe6 ·ÉR}J6(IBePJ'>NNÈ×½}ßOP  ï 
d¦ÊÀáCÚ¥Á  ¡D,vA  ¹#ÀIvÂ6U\H@p.ÈL¥ t
  æc "@· ÃD´T¢Ä"h1<h" JSBp 5ÈÕNQ?r Á4.@ðh$U§ _ì°µ ·  åZ *b Á¥Ç0£Ä (=vhâ
Ò (Àsbp0u2LQ?VF Á6& xj(¯AÐ]ä°Ø$¦  èÑ ø^ß¸ÅEz×UöW
)6¨m=÷{£ò¤ÔÇ«çëý{}¾Ç¶-]Oò?T÷µÏu:Eg^X\ ÅëßôÐ½º¸,H¶x  çi 
Á¤ Å¢Ô   )"x "Z	óFp 4ÈLQ.P Á,. x , ,PWd°<2§0  éØ 
PºÅE:¤ÏT&T'!&É9r
ò Ú©ÇJü }ÜGÓ\Ýð¿R¶¶Í5>D~Z
 åáStð¶(µX  Ñ #Ç/ÏG ÏÃ£©'dè-ÊÞ»°áð8}ÓÀ÷ 
©³+VîÿU;ÕÙYï´X|Et?NTH`ÞDÄR¡b[Î²·_Í^c  ¹Ý  §Ô D¤) ,3¢ È@ +#@A êII
D @AA L(@  DÒ%   Ðe À¤À8 Ì B£$!("©40cèb! `@p4ÙVHK
F^@`\XÊ*0À­T¼ÍUH  	8 @  ¤     "( P     @@ !@4B 
 @ @   P             PAGE  hþ      ;uMÐÂl  Íê  Á 
 Í !)0ÀAG  «£ÂEp¤Ø#ÓHÁ"{Ä.D` M L D1dÐÅ4ÈA  Û÷ $¤pÕ 
d äf/* Í0@
ÂbH@$ÙXA
qDE EY0L 3dÐÅÈ   Þ °(óË¤PÄ ï«Fà+/¤M,å@*NB³Q\Á¶A
yb_ÂÞb>PKD!0xÜÅa  Ýh   Ð $   "I( X   
#@H ËAp@@ @0  D%    >W    R  î  ¨ À #+"-  d` )à$A "Á 
Ýh Å  @J ¢¦ÀqÊ \  ¤( 
Á ¬D!$nÒ 3Ò!°	ÀÄ $ÐQ#@@ D¦$ t5  êJ HÍ@áÁ:0 æ§I!¨%80xBcÂ @Á\Ðb¶Hi0DgÏ!X y  ÄFÔ³Tü@I%P  ¥ª }ý·ÿÿÿÿýÿÿ¿ßÿþýÿ¯ýûýëÏïý¿ÿïÿû×ûï¿¿ÿÿÿïÿÿÿ¿ÿßÿÿßûýÿÿ÷ÿî}ÿiÿþÿÿÿïÿÿÿÿÓõýçÿ~úþ  ¦  ÇÖ¬ §ÁP ²¨E È`
	`I­Èhéx&EdbÊL ³"Y|Ò$¼(,  ó HÎ Í"ä¤    /$#<ÌP  -HHq7@Ù±H .H@ÈH 2A 1tB éh   C¾ 
    %
  "  P   	 `    " Ó  @    ÀV1   X  ¶ JÌ¹ïõcóäeÆDÒ«äd/'*:}«÷©ÆÆOÿ`ÐCýú7iYyÚTNA"ÞBféMY¥}v¾©¤½  Ëy ?Þ¿¼öKÏ;í­ í
¯ÌÕ Íª4ïú
qÿéÛÊ/+¿è}÷æÓÂ¿×hÛÎû×n·ÃhN\ØmzìÆWµ³}¸Íu,¬-=Y  ÌÖ .Ü ¯´G2¬ ìÅ(Ë¨
p"ÓÂ·È]à¤ÀÓIQ*ð.¶Ë DX	rLtðô%  È ¼Á¥ §Ô$ À < pBÂP	TQ tÐ&²HA0G@ ^ T
 æ°$4È 4  É2  ,
«A%¤ `£  3À,``"+ÊpU@0ý²H"¢Gh0rHÕL
 =.°Ì   Í &Ð"îñY2ñ¬÷ G©9-©á !+R¢ae7X&ÓSOÿ\DórXøAÉÈ@PøD@â»RÅº¦¼,º  »ð oîÏ÷ßñíÿÌñÿoÖË×åí¯óÝµ~¾åªïÞå²0·ëÏ±ÿþ7ß{ßÞûÎ^WOï.X_MÞpÌ	¿æÿþþ÷ÿÝ½®3  é     6     !     
@ `B"Ó B !D ! HD      8â ."Á¸Ä/@ÑÀ	)¦"50@b âðAÖ+Ád2Ñ }b@B$ D Ä¯ÞÅÀ¤HÕ  ½Û 7X@ß¹ÖA8(³Åw)Òû3$à)Ò7£t_U1d~2\ËUVdr&BQAÉHìDÅöúµ°T¨fY  ©& 8 ÀA	¤$
ÏÄ  !$Ê` ÈÕU­ÚCHY²HZÀ! pP  ·	d²EvD  À3 ,Ü¦ºá²¥îæE,d«?Óª0éð	fÚdª³KU9oì?ZÍú	N6£E >PX
O¸Î±F;TÐ¾`<  Ú8  Î 
ÄäÄ  ©  #¤Jh:Pª&   K@H@C·JÉq NH!@HH L  \Ê(            PAGE  yB      ;u¾ÖRÎ  =D H¥    b j&`p
 ¸-À	 mã7@ixZ@¢La@Pp ¡Dp	@  ë `|²ÂáÁú´¦¢Fà-#¡,ÄeCÅ 
ÈS|Èk2A· YN3.JMÈL¬µ$\|í
  ìÏ HdòÀáAº¦"ÁD  ¡, p@
#ÀPtÂ¶A HD0JD	t¥É   Ò h¼§Á
\¶0·2«$ÆÀ 3£:Sja!ËÄU1¯Þ";Èí
~ï EcÔP.j¬ ¥¥t°Ìp(  Ó¬ @`¤ <  ò  ¢P `*r
D 1¤ 3H  @r"@P@@È ¥  DÈ (  ä §ÉÌDÚ©D¤ +8*p#Ö  S@@y¤ÐQ
5FFA HP@a  B¼|  # .  ( ¤ @     
  0@ ) @( F  TA  @
     < 	   Fc   ¤Ç@   ( 
 0B )P@À,    ZA  `     <    ãM <è	¬0ä(ä Ù g)8ÚðF $^ÏBÄÕMÈC7XI2LJH-@hP] («D  ªù 4¼Ãm3U®ËLE `!Í$
Ñ äÙüÆzhWBR0N&A `Q(%¢PôÌ5\  × jÌïÞÅ»0åÏFC«àâÛÉo/Î¸ôúwõ¦´¹þ`Ö@m¿·áY^pYFÇà~JUyHXJ<@¥OÙü­µ  k¶ H¨Î Ý "ä
   /&#<T
 Ð -HHq7@Ù±@
 .HAHH 2A 5t%èh   ·' *	ß³ãå¢ä"D¯DÃ-G)9îu©©0_ Ù±?ÊMZÙ]Jz_ëc.JTÁJ0L0=då®=ü¶¬  HJ 
  gQ=@  « *  t
ÐÀIàÀ!m7ÀY0B\dXU Z 4ÕT87\  ³© <ÿ¼¨Á¬ äÅ()#¨bq£Â#`Y8¬À
³HUê`Z&@ 
A}J@L$¸0t°¥´B   
Á ÑÀ
°¤@)  JÂ @@à ÓH Vn¤@hT *H d :T¹	ÈX  %  Å  H¬  P	* 0  "   @DA "@A D "X P @  %D2È h    
Ê Á 0H@Q)&<%ë:Ò¨6@PQiìÃw@ù6,@$!8J CL@$°J1t4@L  ¡  @°OI<M4ÄÐÍ ÃÄ( D a@ 	§`ÜL,UKP\
&Ä`
iPH¨ 4ð  &â 'ªÃãìÀºÍ¤ö.=è%!+¯/Ë;¨èëv=kÞCÝQ@&óWJú(\, =EnR@þ;ÞÓ7M  ¨· @)ÄÎ ÉEÄ@ - /80fRC)£BñwÄÊÃrÑLCùJD pxP wT±}Ì  «C @
àÇ9$    XI¡( À a¡c& 5¿ 
Ò3NZ "  BBH AÀ °	  D) *0 ì¡8êÂ ´¡àH÷Ò'F$2 i ¬/ÔAg³ÈDm´c28HFC<SLVÎ;=Íø	É¤¨  ²(  Yà Ap&C ¨"À fB  ATHEN@ @H@H "½X@Ä@4           PAGE  ~      ;uóqÐ(  ¯ã üª×éúÑ:¦äøÇGÆÇäHU.6ù-89ãy­7íP/£FQxüßÇ·ÙHSÊ~}N÷iinMAkZRN0.)Út¼¼ Ì59  .ß    "àÚ ¤  
  ÌT  @D` Ra D¡  T @äåT8 È    Jã          P  !          @B@  C@°	!  @H   @ Qd ÈDP  íþ dü¢ÂáÅz´ å¢¤,+¡,eCä
³ÀB(|Ä²A5 ^Âr.OHL¤½"\tí  Ñ HäÐCÐ¡A*(d Á	 !(<!@PÂ  À@0V BPDE*!HO	b\|É	  ± &)EaÄ¬çÄ£e !±¨ f FX )³@A"äÔ":xU
5X@a.	HZ\ d8Rô´,A  ?Õ #)ÄÒÄÌÆH@` )(À	"`nêH]chv::Á
È@¦)!K'IJ LhRq~%(  oì H Þ"í@#ä¤    '$'<ÈQ HHQi7`Ù±H  H@HX 2A 1t%¨h   0Q * 	Á Ó¤   dE
¼T	@là y7rÙq(PF"HÐÈHI vB-©¨T  3  £Ò²ÅºTä´wÂÄ»Àë¶0. írjV%6*¤Saø9ßÇÕPÙJRxXþóè\XÀiNA8¡L·^Ö )  Îi  ¸Ä&¤ Ä¥Ä %  &D H.ÂQ!fÀ²IC6PÀ DP LDD°Õ   ÃÞ /ªÇo:tì§ç¯]ä/08éR+#Ò$0FQyåÜ3OÙH^^´Ah~^PXÍ µ×¦3t»EÎ q  I `Îl G ¡   o`° Dá¤`@@)ÃA[0D&  HXH@ @ Ld  4àð ØcÌp(eHÐ	B¤Â ð0 Ê`1j* Z^åA`4,h>0T >
 S,8  ø ÃÊêqA¢$@¦!¦0À Ö #½ËIY@¥Á".PAÀ@hPçL1»r" H  LÂ nçiÌ0ä9©$ ù+2(f`ä@¯ôW5kÑä®júr*Hs¶M(: Y[L@Ê¤F±^1?@;:A°  6¨s²Ée?ï&T"i±vj òi(Î»Ç" ñ}ßS>Ö\Y+?tn¤Ï=>ÈXmÚ
Ì*ìÅ+þöÂ½6çX  NÒ Æ   $ @   )      @      @ " QD ",      ¤ R@ À    OÀ & °¤B¸¥Q,  Ç «(pGÔE03¢°²Y<L*	(2`IDâZ(YØ ª  «` @  R  ä`bÂ   h  @ Q@@H¸4@ À    Q 
     $         @    " I:D¤D !    D â È    HH  R 
       $          @Ò    "àI9¤@ !     D â     HH  S§ :@   $   2 B    @   ("   I9¤       D â R    HJ  T´ 
    &       è @    " ñ	!IØ9.µ  ,  DDâ¨ª$  À HH           PAGE  Ø      ;uj`©R  V0 
      $          @    "   I9E
¤       D â 
  À HH  WQ é#²B"hÎ bä 0AA(@ á=0 ¸¨
QÎrD!d(.IKZU¤@	,@ µ  
  È@B$  ¤   ¢
@ BÀ ÀU4 @".     < ¤ R ,       ÈÂR$ ¥ ¤ ! ¢P CÀ  ÄÀ2Q0 A".    , ¤ Ò ,À      6  ¨@ $    P   @ "@ r  
6Õ     .  B@B  R@ À   ÷¶ &: ÀB$ §BD ²(éA ²0  ,äZXW0F@(.
X@B M¤!
VÂ¤$   a" Á    p @ 
  À$À Ñ @ /  	 L ,A`b      ô= | ÎÌÁ b$ D) ¡ P KD 	#&´ÄI]21 A". Jl dPb,0 H  óå   ¤À@$ ¦4  à  
 Ä]@ .      äS   @ Î ô¨Éû¦(0í9w£QA»]þèq×â·0¢ËØ±mÈ3¶LY.zVgdb®H^=¨2Lî¡~¢=¶Q+X 
µ /h¤àÃ5   PTÇªq öVDB!¨à:H{¨@´Z"6ÊKH¬D¸²YäÄP,  X
 & ç á  ä*  A	0# iº 0"t  Ñ ¬A&PÈ@a)À
$+HQcÅ A    Y & ç  ñ Yä*  Q	 + )º  "t   á APÊ a)ÀJ $+HcÅ A    ZÁ c @Ä@¬À&
    !dc       P   H hÀ@¡ T2   @   ]º & £ N $Ç	a @`  ðB0 ñd"Ò*6J(pUPDÀ! #@¡    ù bÊ¨Pd¤Àæ	! "dV"
¡äÉrURf@ >@ p@À¤E0Z !H  	+ 
´ááÛú¤0qï)wÃÑ»ßþìqÖÁ Ù±È?¶LÙN{DWOb.JV>è0LíD¡ÌzöÅñ<X  õÎ bÈ@R$  ¤   @ CH ÌÂ>U0 &A".     . ¤ 0ò ,À$    öS bÀ@B$  ¤!   @ SÒH  È>U0&A".     , ¤ 0r ,À     ü®à°Ne0ÐîÅ:$ °Æ§+pãØ { SÜ·"5ql´>½Á¦LDVÒG"JaXQèf!FßÂ¼«CZ  ý 'ø¾ÆëÇè0ïî'õËÏäRäá
öz4¾Ó·C6üTIzÜ\_ÊwEÖ_nmþAGJl¨%(uny¶Ê¥8  þ GØ±ëË'ûN('Ï&£Ävs!Ï°lÆ'öäÚt¿·"13þ>|2ü9YkÕTwmcZJNËxCL*U)Î;vÏùæ=e\  ÿ$ É@ @ã@Á&0`!R Ò$ A1$ 2
 FVD`:HDHA(¥DJ %  . ¸!	êÍQ@ ÃZA&4ÄtpÀ`rÚ£'C4ô Rº FVL`HFH^¨eHF  0E           PAGE        ;u=·Iþ Ôàp	È@      Á4À  à Â    ¬ ÒéH 6C @A@äF   ,P  77 BJA!$	 È@0@  b Ð @  " ÞP
 B2¤D  ( L p%@   °  h@ R P¸á  ¥X    @ bB    1¬ÒÁ  B&µC`0 HPH ØÁÀ  E   :lK8ÁÆ±|aÙÚD°ÑC"Ni0äò ;Ð­ >`!¿b2Þ_¢JôR;	ªsMBhÌùU¥ë& ¡6dX Ú 	B A8@ ÖDDv Ñ" 0H 3  0å°:Ò&wµC 
 È0	dj²¼t,3è(^  uÒ 
 B A&À Ö @pÑ" 0@ #Ô	"@pe@:Ò's´  
 Ê, dh°.t 3¨^  vl 
 B A&
À Ö @pÑ" 0BcH"@0e:Ò&s´ 
 Ê dh°.t@;¨$	^ 	 B I#¸
À Ö@DvÑ" 0I #"*@4í:ÒÛ&LµC 
 Ê0 dj²?|;Ø$^  w j[0þé&¸hh!ÍÖDM°*Ù+.xëÒ kÔ  1²aÑ¾ö&_{·"?]ÀÈ3i
äz»ÿ} ­»Ï$<_ ä 
B òÉ&¸(À ÖDL6
Ñ#xëP sÖ" 0å±¾ò&Ow·C  È0 dj²<|3(^  xf 
C óÉ&¨ä Ö@°
Ñ#xëP
sÖ"  °á±?òX'^{·@  Ü:É dj´-| 3Ü,^  zÁ æá'³Ìl èÚDüÑ
Jh´êà(9;"¶¢!»b !3Û[»ÈjÌ^2ÕA<#P5NÌà¼±¿ ¡yÚ>,l\ ö PB¢A D     D6` 0À    0¤ÚX	  6K$ H äÆ1 0$ B Ý 
P1N ¢Á:Ì   Ö D6ÁA 0T£àN	$ 3å
2ÚxI LwO$HH äæ³u=¤È8Z ù ÐNúÁ²l   ÁL6@ G ÈA  4¥
ÚXIèJvC$(HH äÆ3}Ú<$
J ¼ P Ð@`   Å6P ¨ À  0¬ÒI B6C   H äF   @  pã  
¥À§Å H8°£Â«°Ð G$©á)cÈ(¤@©`AsÒÐNN"J2  D. H ÂT¦ª
]E  H     ¡ÀGÄ   ñð ¤éà	ÄÀ© AÒÐ
 B2 $A H@â¤¢

¥\  Ãàgº½þáã:å»$ÿFÛÜåÁð{Ç;ööBÿÒÿ¶zÊu}´~Ñ]Hë´Zw¦Ka»Wi3Èo¿^ßõE6×(Tù  1É  0ð@0° ñ © À%0"L H  ÀI%h$&À	È 
 @`PkÌÈ´0 Å(P                                                                                                                                                                                                                                                                                                                                                           BKGD  â      =@        n¦    J  
Ü   ¼ n    /           	   Title  on closeFieldset name of this cd to mepass closeFieldend closeField   V  9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  T  9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R  9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  * .   Ã &         	   Category     . 1 æ)î          	   TheMoviePath     : 4 f Õ î          	   Toolkit Movie Properties     H 99 N \°         Demo  on mouseUpgoToTheDemoend mouseUp   ` : 9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  * >   	  ´         	   Demo Card    6 ?­   r Ê             Toolkit Movie Params     2 @­ t I Ê             Toolkit MovieInfo    B      d°           Paste  on mouseUpput the clipboard into theTextrepeat while line 1 of theText is emptydelete line 1 of theTextend repeatrepeat while last line of theText is emptydelete last line of theTextend repeatif word 1 of theText <> "Title:" thenbeepanswer "This doesn't look right:" &return&return&Âline 1 to 3 of the clipboard with "Cancel"elseput line 1 of theText into theTitledelete word 1 of theTitleput theTitle into fld "title"put textToLineNum("Examples:",theText) into exNumput line 3 to exNum-1 of theText into theSyntaxdelete word 1 of theSyntaxput theSyntax into fld "syntax"put textToLineNum("Description:",theText) into desNumput line exNum to desNum-1 of theText into theExamplesdelete word 1 of theExamplesput theExamples into fld "examples"put line desNum to (number of lines in theText) of theTextÂinto theDescdelete word 1 of theDescput theDesc into fld "Description"send closeField to fld "title"end ifend mouseUpfunction textToLineNum theText,source -- HyperCard teamput source & return into sourcereturn the number of lines of char 1 to Âoffset(theText,source) of sourceend textToLineNum  , D            	   Pertains To   Ü F : +ð         
   theText  on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom openput the clickText into theItemput handleExceptions(theItem) into theItemif there is a cd theItem thengo cd theItemelseif there is a bg theItem thengo bg theItem -- one of the Indexeselseif "http:" is in theItem thenopen url theItemend ifend ifend if-- else-- goLinkend ifend mouseUp  \ G 9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^ H 9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp   G & IndexIndex by ObjectsIndex by Terms ? - Simple Moviewindoidcardinvisiblefloating  @ 6 0,0,206,2432561.06,13.937396000.000.000.00 4" set audioLevel of window TheMovieName to "256"set mute of window TheMovieName to falseset badge of window TheMovieName to trueset controllerVisible of window TheMovieName to trueset closeOnFinish of window TheMovieName to falseset loop of window TheMovieName to falseset seeAllFrames of window TheMovieName to falseset startTime of window TheMovieName to "0"set endTime of window TheMovieName to "6,13.9"set dontErase of window TheMovieName to falseset fastIdle of window TheMovieName to falseset rate of window TheMovieName to "1.0"Documentation on closeCardend closeCardon AC_startbeep 2end AC_start              `BMAP  =               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ    BKGD  n¦      qÌ         {  â              White2. on openCardend openCardon closeCardend closeCardon AC_startbeep 2end AC_start                 ÀBMAP  qÌ               V     V  : &%Û              lã!Uã1ª$
â;ª$Tâ+U4
ª¨â:
ªDUU@â)UD
ªª¨â9*ªTUUU@â(UUT
ªªª¨â8ªªdUUUU@â6UUd*ªªªª¨â7ªªdUUUUUâ6UU) âPâ
â@%@â¨â â@+â+@â(ââ,â,@â ââ
â â@ â	Pâ	âá	á	á	 á	Pá	â#UâCªªá 	%UTá@	&* á	&T@á
'
 á
'Pá
*á
(@â âá

á 
)@@á@
 â
â
 ááâ@â(ááâ â@á@@á  áââáááá @á@áá â
ááââáá â@â	â	â	á@á	áââ 	â@	â 	@á
â
â@ââ
â
â
â 
â@
á@áâ 
â@âââ@ááââ â@á áá@ââáááááââá áá@â áá@ááááâáá áâ áá@@áááá  â@@áááâáâáááá á  áá@á â@@á@ááááááâ â9*ª âtUUUUUTTUUUU@áá t
ªªªªªª4*ª@á@á áá@áááááááá â â@ááá áá@á áá@áááááá áá@â	â	áá á á@á@á(ááPâ@ááá@áâ
â
 á á@áág*ªªªªªâ!ªÁªªª ªªgUUUUUTâQUUUUâ8ªªâ	ââ( |ªªªªªá@$@lUUUUUá	ââââ âP@â â(TâFªªª¨âcUUUU@âuªªªªªâUUUU@â	 %
¨â#@ããããPâ@ ãããã(ãPãããâ	ã(ã@ããããã¤ãÁUUUUUUUTâáPªªªª¨âá#UTâo{o{o{o{o{o{o{o{o{o{o{   BKGD  {      |B         ·  n¦             Topics on closeCardend closeCardon AC_startbeep 2end AC_start             @BMAP  |B               V     V                           < BKGD  ·      $ÝH        N  {  e  7    â & 	   /ç          	   Title    T 9N0  .à       Prev  on mouseUpvisual wipe leftgo prevend mouseUp  R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  V 9Nº0  .á       Next  on mouseUpvisual wipe rightgo nextend mouseUp   R  9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  * .   Ã &         	   Category     H 99 N \°         Demo  on mouseUpgoToTheDemoend mouseUp   ` : 9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  * F   Y  ­         	   Demo Card    > S	 -ä         
   Footer  on mouseUpend mouseUp   . `              Current Index    \ a 9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^ b9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp  " d  6   IÕ       Ò    New Button  on mouseUpput the clickloc into savedClickLocif savedClickLoc is within "32,54,83,73"then send "mouseup" to bg fld "Window Index"if savedClickLoc is within "85,54,136,73"then send "mouseup" to bg fld "Movie Index"if savedClickLoc is within "138,54,189,73"then send "mouseup" to bg fld "Track Index"if savedClickLoc is within "191,54,242,73"then send "mouseup" to bg fld "Scene Index"if savedClickLoc is within "244,54,295,73"then send "mouseup" to bg fld "Sprite Index"if savedClickLoc is within "297,54,348,73"then send "mouseup" to bg fld "Node Index"if savedClickLoc is within "350,54,404,73"then send "mouseup" to bg fld "Hotspot Index"if savedClickLoc is within "406,54,469,73"then send "mouseup" to bg fld "Controller Index"end mouseUp 4 e 9 N \            Print...  on mouseUpput "Movie docs" into templateName  --Æput the reportTemplates of this stack into TheTemplatesif (return & templateName & return is not in (return & TheTemplates)) thenerr templateName --Æexit mouseUpend ifMarkDocCardsput the number of marked cds into NumDemosanswer "This will print the syntax, examples, and descriptions" Â&& "of the HyperTalk terms of this stack." & return & return Â& "Print the entire QuickTime reference of" Â&& NumDemos && "cards?" & return Âwith "OK" or "Cancel" --Æif (it is "Cancel") then  --Æexit mouseUpelsehide groupsopen report printing with template templateNameif the result <> EMPTY thenanswer "Could not complete printing." --Æelseprint marked cardsclose printingend ifshow groupsend ifunmark all cdsend mouseUpon markDocCardsunmark all cdsmark cds where (fld "Syntax" is not EMPTY)end markDocCardson err whichTemplateanswer "The documentation cannot be printed because report template Ò" & ÂwhichTemplate & "Ó is missing from this stack." --Æend err  Z O) 9* Q[        
  Node Index  on mouseUpsetTab short name of meend mouseUp  ^ Q) 9_ Q        
  HotSpot Index  on mouseUpsetTab short name of meend mouseUp   ` U) 9 QÔ        
  Controller Index  on mouseUpsetTab short name of meend mouseUp  \ ]) 9 À Q ñ        
  Scene Index  on mouseUpsetTab short name of meend mouseUp   \ L) 9 V Q         
  Movie Index  on mouseUpsetTab short name of meend mouseUp   \ N) 9 õ Q&        
  Sprite Index  on mouseUpsetTab short name of meend mouseUp  \ M) 9  Q ¼        
  Track Index  on mouseUpsetTab short name of meend mouseUp   & R I ã            Frame    0 Y a + t           
  Commands Label     2 Z a  tn          
  Properties Label    R W5 v 1
 ø            Commands  on mouseUpif the commandKey is down then verifyelseput the selectedText of me into cdNameselect line 0 of megoSelection short name of me, cdNameend ifend mouseUpon closeFieldsort lines of meanswer "Do you want to verify the cards?" with "Cancel" or "Verify"if it is "Verify" then verifyend closeFieldon verify-- are all the commands in the movie represented in the stack?-- expect at least two movies hereif word 1 of the short name of this cd = "Movie" thenrepeat with moov = 1 to the number of moviesset cursor to busyput the name of movie moov into movNameput the commands of movie moov into cmdListrepeat with iNum = number of items in cmdList down to 1put item iNum of cmdList into thisCmdif lineToLineNum(thisCmd,me) <> 0then delete item iNum of cmdListend repeatif cmdList <> empty thennote "Commands not indexed for" && movName &return&return & switch(cmdList)else answer "All commands are indexed for movie" && movName &"."end repeatend ifif word 1 of the short name of this cd = "track" thenrepeat with moov = 1 to the number of moviesset cursor to busyput the name of movie moov into movNamerepeat with trkNum = 1 to the number of tracks in movie movNameput the commands of track trkNum of movie moov after cmdListput "," after cmdListend repeat -- number of tracksend repeat -- number of moviesdelete last char of cmdListrepeat with iNum = number of items in cmdList down to 1put item iNum of cmdList into thisCmdif lineToLineNum(thisCmd,me) <> 0then delete item iNum of cmdListend repeatif cmdList <> empty thennote "Commands not indexed for" && movName &return&return & switch(cmdList)else answer "All commands are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "sprite" then-- find sprite movierepeat with moov = 1 to the number of moviesset cursor to busyif there is a sprite track 1 of movie moov thenput the name of movie moov into movNamerepeat with sprNum = 1 to the number of sprites in this scene of movie movNameput the commands of sprite sprNum of this scene ofÂmovie moov after cmdListput "," after cmdListend repeat -- number of tracksend if -- there is a sprite track 1end repeat -- number of moviesdelete last char of cmdListsort items of cmdListrepeat with i = number of items in cmdList down to 2if item i of propList = item i-1 of cmdListthen delete item i of cmdListend repeatrepeat with iNum = number of items in cmdList down to 1put item iNum of cmdList into thisCmdif lineToLineNum(thisCmd,me) <> 0then delete item iNum of cmdListend repeatif cmdList <> empty thennote "Sprite commands not indexed for" && movName &return&return & switch(cmdList)else answer "All sprite commands are indexed for movie" && movName &"."end ifput me into theListrepeat with i = number of lines in theList down to 1set cursor to busyput handleExceptions(line i of theList) into cdNameif there is a cd cdName then delete line i of theListend repeatif theList <> empty then note "Cards missing for:" &return& theListelse answer "All commands cards accounted for."end verify  ò X5 v
Ì            Properties  on mouseUpif the commandKey is down then verifyelseput handleSpecialCases(the selectedText of me) into cdNameselect line 0 of megoSelection short name of me, cdNameend ifend mouseUpon closeFieldsort lines of meanswer "Do you want to verify the cards?" with "Cancel" or "Verify"if it is "Verify" then verifyend closeFieldfunction handleSpecialCases cdNameif "," & cdName & "," is in ",id,number," thenput "¥" after cdNameend ifput handleExceptions(cdName) into cdNamereturn cdNameend handleSpecialCaseson verify-- are all the cards here?put me into theListrepeat with i = number of lines in theList down to 1set cursor to busyput handleExceptions(handleSpecialCases(line i of theList)) into cdNameif there is a cd cdName then delete line i of theListend repeatif theList <> empty then note "There is|are no card(s) for" &return&return& theListelse answer "All cards accounted for."-- are all the properties in the movie represented in the stack?-- expect at least two movies hereif word 1 of the short name of this cd = "Movie" thenrepeat with moov = 1 to the number of moviesset cursor to busyput the name of movie moov into movNameput the properties of movie moov into propListrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Properties not indexed for" && movName &return&return & switch(PropList)else answer "All properties are indexed for movie" && movName &"."end repeatend ifif word 1 of the short name of this cd = "track" thenrepeat with moov = 1 to the number of moviesset cursor to busyput the name of movie moov into movNamerepeat with trkNum = 1 to the number of tracks in movie movNameput the properties of track trkNum of movie moov after propListput "," after propListend repeat -- number of tracksend repeat -- number of moviesdelete last char of propListsort items of propListrepeat with i = number of items in propList down to 2if item i of propList = item i-1 of propListthen delete item i of propListend repeatrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Properties not indexed for" && movName &return&return & switch(propList)else answer "All properties are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "scene" thenrepeat with moov = 1 to the number of moviesset cursor to busyif there is a sprite track 1 of movie moov thenput the name of movie moov into movNameput the properties of this scene of first sprite trackÂof movie moov into propListend if -- must have sprite trackend repeat -- number of moviesif propList is empty thenanswer "No sprite tracks in any movies."exit verifyend ifrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Properties not indexed for" && movName &return&return & switch(propList)else answer "All properties are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "sprite" thenrepeat with moov = 1 to the number of moviesset cursor to busyif there is a sprite track 1 of movie moov thenput the name of movie moov into movNameput the properties of first sprite trackÂof movie moov into propListend if -- must have sprite trackend repeat -- number of moviesif propList is empty thenanswer "No sprite tracks in any movies."exit verifyend ifsort items of propListrepeat with i = number of items in propList down to 2if item i of propList = item i-1 of propListthen delete item i of propListend repeatrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Sprite properties not indexed for" && movName &return&return & switch(propList)else answer "All sprite properties are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "node" thenrepeat with moov = 1 to the number of moviesset cursor to busyif the isVRmovie of movie moov thenput the name of movie moov into movNamerepeat with nodeNum = 1 to number of nodes in movie moovput the properties of node nodeNum of movie moov after propListput "," after propListend repeat -- number of tracksend ifend repeat -- number of moviesif propList is empty thenanswer "No VR movies were open." with "Cancel"exit to HyperCardend ifdelete last char of propListsort items of propListrepeat with i = number of items in propList down to 2if item i of propList = item i-1 of propListthen delete item i of propListend repeatrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Properties not indexed for" && movName &return&return & switch(propList)else answer "All properties are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "hotspot" thenrepeat with moov = 1 to the number of moviesset cursor to busyif the isVRmovie of movie moov thenput the name of movie moov into movNamerepeat with nodeNum = 1 to number of nodes in movie moovrepeat with hots = 1 to the number of hotspots in node nodeNum of movie moovput the properties of hotSpot hots of Ânode nodeNum of movie moov after propListput "," after propListend repeat -- number of hotsend repeat -- number of nodesend ifend repeat -- number of moviesif propList is empty thenanswer "No VR movies were open." with "Cancel"exit to HyperCardend ifdelete last char of propListsort items of propListrepeat with i = number of items in propList down to 2if item i of propList = item i-1 of propListthen delete item i of propListend repeatrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Properties not indexed for" && movName &return&return & switch(propList)else answer "All properties are indexed for movie" && movName &"."end ifif word 1 of the short name of this cd = "controller" thenrepeat with moov = 1 to the number of moviesset cursor to busyput the name of movie moov into movNameput the properties of controller of movie moov after propListput "," after propListend repeat -- number of moviesdelete last char of propListsort items of propListrepeat with i = number of items in propList down to 2if item i of propList = item i-1 of propListthen delete item i of propListend repeatrepeat with iNum = number of items in propList down to 1put item iNum of propList into thisPropif lineToLineNum(thisProp,me) <> 0then delete item iNum of propListend repeatif propList <> empty thennote "Controller properties not indexed for" && movName &return&return & switch(propList)else answer "All controller properties are indexed for movie" && movName &"."end ifend verify  \ V) 9 ! Q R        
  Window Index  on mouseUpsetTab short name of meend mouseUp  L  Movie M  Track N  Sprite  O  Node  Q  HotSpot   Index by Object S # Click a term for more information.  U  Controller  V  Window  Y 	 Commands  Z  Properties  ]  Scene `  Window Index  a  IndexIndex by Terms Index by Object on openBackgroundlock screenpass openBackgroundend openBackgroundon openCardlock screensetTab (short name of this cd)pass openCardend openCardon closeCardlock screenend closeCardon AC_startbeep 2end AC_starton setTab fldName-- from a script by Tony Berumen (tony@imagitec.com)lock screenget number of bg partsput Â"Frame,Commands Label,Properties Label,Commands,Properties"Â& "," & fldName into fldListsetPartNumbers fldList,itgo cd fldNameput fldName into fld "Current Index"end setTabon setPartNumbers fldList, numrepeat with i = 1 to the number of items in fldListset partNumber of fld (item i of fldList) to numend repeatend setPartNumberson goSelection bgName,cdNameif last char of cdName is " "then delete last char of cdNameput handleExceptions(cdName) into cdNamego cd cdName of bg bgNameend goSelection             ÀBMAP  $Ý               V     V      I                h¿°§%$%  $%%@@%@@ @"%%D% @B%%% !!$% 	H%@¯o{o{o{o{o{o{o{o{o{o{o{o{o{   BKGD  N      vH          ·  [  ¸ 
   Ú & 	   /ç          	   Title    T 9N0  .à       Prev  on mouseUpvisual wipe leftgo prevend mouseUp  R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  V 9Nº0  .á       Next  on mouseUpvisual wipe rightgo nextend mouseUp   R  9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  * .   Ã &         	   Category     H 99 N \°         Demo  on mouseUpgoToTheDemoend mouseUp   ` : 9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  * F   Y  ­         	   Demo Card    > S	 -ä         
   Footer  on mouseUpend mouseUp    U   * ¦            Index Selector  on mouseUpput the selectedText of me into thisBggo cd 1 of bg thisBgend mouseUp   . V  Ç &@             Current Index    \ W9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^ X 9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp  , Z  6 " IÛ       Ò    New Button  on mouseUpput the clickloc into savedClickLocif savedClickLoc is within "34,54,119,73"then send "mouseup" to bg fld "Parameters Index"if savedClickLoc is within "123,54,208,73"then send "mouseup" to bg fld "Commands Index"if savedClickLoc is within "212,54,297,73"then send "mouseup" to bg fld "Properties Index"if savedClickLoc is within "301,54,386,73"then send "mouseup" to bg fld "Messages Index"if savedClickLoc is within "390,54,475,73"then send "mouseup" to bg fld "Externals Index"end mouseUp  4 [ 9 N \            Print...  on mouseUpput "Movie docs" into templateName  --Æput the reportTemplates of this stack into TheTemplatesif (return & templateName & return is not in (return & TheTemplates)) thenerr templateName --Æexit mouseUpend ifMarkDocCardsput the number of marked cds into NumDemosanswer "This will print the syntax, examples, and descriptions" Â&& "of the HyperTalk terms of this stack." & return & return Â& "Print the entire reference of" Â&& NumDemos && "cards?" & return & return Âwith "OK" or "Cancel" --Æif (it is "Cancel") then  --Æexit mouseUpelsehide groupsopen report printing with template templateNameif the result <> EMPTY thenanswer "Could not complete printing." --Æelseprint marked cardsclose printingend ifshow groupsend ifunmark all cdsend mouseUpon markDocCardsunmark all cdsmark cds where (fld "Syntax" is not EMPTY)end markDocCardson err whichTemplateanswer "The documentation cannot be printed because report template Ò" & ÂwhichTemplate & "Ó is missing from this stack." --Æend err   ` Q) 9 UÚ        
  Externals Index  on mouseUpsetTab short name of meend mouseUp   ` N) 9 Õ U(        
  Properties Index  on mouseUpsetTab short name of meend mouseUp  ` L) 9 # U v        
  Parameters Index  on mouseUpsetTab short name of meend mouseUp  ^ O) 9. U        
  Messages Index  on mouseUpsetTab short name of meend mouseUp  & R I ã            Frame    ^ M) 9 | U Ï        
  Commands Index  on mouseUpsetTab short name of meend mouseUp  > T U # sÍ         
   Header  on mouseUpend mouseUp   L  Parameters  M 	 Commands  N  Properties  O 	 Messages  Q 
 Externals   Index by Term S # Click a term for more information.  U   Index by ObjectsIndex by Terms V  Parameters Index  W  IndexIndex by Objects Index by Term on openBackgroundlock screenpass openBackgroundend openBackgroundon openCardlock screensetTab (short name of this cd)pass openCardend openCardon closeCardlock screenend closeCardon AC_startbeep 2end AC_starton setTab fldName-- from a script by Tony Berumen (tony@imagitec.com)lock screenget number of bg partsset partNumber of fld "Frame" to itset partNumber of fld fldName to itset partNumber of fld "Header" to itgo cd fldNameput fldName into fld "Current Index"end setTabon goSelection bgName,cdNameif last char of cdName is " "then delete last char of cdNameput exceptions(cdName) into cdNamego cd cdName of bg bgNameend goSelectionfunction exceptions cdNameput "movieIdle,idle" &return&Â"movieLoc,loc" &return&Â"movieMatrix,matrix" &return&Â"movieRect,rect" &return&Â"windowLoc,loc" &return&Â"windowName,name" &return&Â"windowRect,rect" &return into exceptionsput item 2 of line textToLineNum(return & cdName &",",return & exceptions) of exceptionsÂinto newNameif newName <> empty then return newNameelse return cdNameend exceptions                  BMAP  v               V     V      M                X¿°§))9 8 @)))9À)))@ ))B ¯âpá
¢ÿÿÿÿÿ   BKGD        ü@      f  ¼Q  N        :0  ¾ 2ö         
   Description  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd handleExceptions((the clickText))end ifend mouseUp  ~    /û          	   Title  -- on closeField-- set the name of this cd to item 1 of line 1 of me-- end closeField   (  @  ]          
   Syntax     * ! m  ó         
   Examples     V 9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  (   1  @ ?         
  Syntax:    *   ]  m L         
  Examples:    T 	 9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R 
 9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  .   ®  ¾ \         
  Description:     `  9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  H 9 N \°           Demo  on mouseUpgoToTheDemoend mouseUp   ,    ¨ó         
   Pertains To    .      X         
  Pertains to:     *     u          
I  Category     .  æ)î          	   TheMoviePath     :  f Õ î          	   Toolkit Movie Properties       ­J ¼õ         	   Demo Card  on closeFieldset the enabled of bg btn "Demo" to me is not emptypass closeFieldend closeField   6 ¥   r Ê             Toolkit Movie Params     2 ¥ t I Ê             Toolkit MovieInfo       Ò 6°           Paste  on mouseUpput the clipboard into theTextrepeat while line 1 of theText is emptydelete line 1 of theTextend repeatrepeat while last line of theText is emptydelete last line of theTextend repeatrepeat while last char of theText is returndelete last char of theTextend repeatif word 1 of theText <> "Card:" thenbeepanswer "This doesn't look right:" &return&return&Âline 1 to 3 of the clipboard with "Cancel"elseset cursor to busyput line 1 of theText into cdIDdelete word 1 of cdIDif the short id of this cd <> cdID then excuseMe "Card ID"delete line 1 to 2 of theTextset cursor to busyput line 1 of theText into theTitledelete word 1 of theTitleif theTitle <> line 1 of  fld "title" then excuseMe "Title"set cursor to busyput textToLineNum("Examples:",theText) into exNumput line 3 to exNum-1 of theText into theSyntaxget word 1 of theSyntaxif it <> "Syntax:" then excuseMe "Syntax"delete word 1 of theSyntaxput theSyntax into fld "syntax"set cursor to busyput textToLineNum("Pertains To:",theText) into perNumput line exNum to perNum-1 of theText into theExamplesget word 1 of theExamplesif it <> "Examples:" then excuseMe "Examples"delete word 1 of theExamplesput theExamples into fld "examples"set cursor to busyput textToLineNum("Description:",theText) into desNumput line perNum to desNum -1 of theText into perTainsget word 1 to 2 of perTainsif it <> "Pertains To:" then excuseMe "Pertains To"delete word 1 to 2 of perTainsput perTains into fld "Pertains To"set cursor to busyput line desNum to (number of lines in theText) of theTextÂinto theDescget word 1 of theDescif it <> "Description:" then execuseMe "Description"delete word 1 of theDescput quotesToCurlies(theDesc) into fld "Description"-- send closeField to fld "title"end ifend mouseUpfunction textToLineNum theText,source -- HyperCard teamput source & return into sourcereturn the number of lines of char 1 to Âoffset(theText,source) of sourceend textToLineNumon excuseMe whatbeepanswer "Error:" && what && "didn't match." with "Continue" or "Cancel"if it is "Cancel" then exit to HyperCardend excuseMe  \  9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^  9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp    & IndexIndex by ObjectsIndex by Terms   Properties Properties on openCardset the enabled of bg btn "Prev" to Âthe number of this cd <> the number of cd 1 of this bgset the enabled of bg btn "Next" toÂthe number of this cd <> the number of last cd of this bgpass openCardend openCardon AC_startbeep 2end AC_start                   `BMAP  ü               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ  @BKGD  ¼Q      ÜÀ@             ¼    *0  ¾ 1ö         
   Description  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd handleExceptions((the clickText))end ifend mouseUp  t    /â          	   Title  -- on closeField-- set the name of this cd to line 1 of me-- end closeField   (  @  \ó         
   Syntax     *  k  ó         
   Examples     V  9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  (   1  @ ?         
  Syntax:    *   \  l L         
  Examples:    T 	 9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R 
 9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  .   ®  ¾ \         
  Description:     `  9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  H  9 N \°           Demo  on mouseUpgoToTheDemoend mouseUp   *     u          
I  Category     .  æ)î          	   TheMoviePath     :  f Õ î          	   Toolkit Movie Properties     *  ­J ¼õ         	   Demo Card    6 ¥   r Ê             Toolkit Movie Params     2 ¥ t I Ê             Toolkit MovieInfo      
   4°       	   Go Other  on mouseUpput short name of this cd into cdNamelock screenlock messagesgo cd 1go cd cdNameend mouseUp  .      X         
  Pertains To:     ,    ¨ó         
   Pertains To    \  9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^  9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp      Ð 4°           Paste  on mouseUpput the clipboard into theTextrepeat while line 1 of theText is emptydelete line 1 of theTextend repeatrepeat while last line of theText is emptydelete last line of theTextend repeatrepeat while last char of theText is returndelete last char of theTextend repeatif word 1 of theText <> "Card:" thenbeepanswer "This doesn't look right:" &return&return&Âline 1 to 3 of the clipboard with "Cancel"elseset cursor to busyput line 1 of theText into cdIDdelete word 1 of cdIDif the short id of this cd <> cdID then excuseMe "Card ID"delete line 1 to 2 of theTextset cursor to busyput line 1 of theText into theTitledelete word 1 of theTitleif theTitle <> line 1 of  fld "title" then excuseMe "Title"set cursor to busyput textToLineNum("Examples:",theText) into exNumput line 3 to exNum-1 of theText into theSyntaxget word 1 of theSyntaxif it <> "Syntax:" then excuseMe "Syntax"delete word 1 of theSyntaxput theSyntax into fld "syntax"set cursor to busyput textToLineNum("Pertains To:",theText) into perNumput line exNum to perNum-1 of theText into theExamplesget word 1 of theExamplesif it <> "Examples:" then excuseMe "Examples"delete word 1 of theExamplesput theExamples into fld "examples"set cursor to busyput textToLineNum("Description:",theText) into desNumput line perNum to desNum -1 of theText into perTainsget word 1 to 2 of perTainsif it <> "Pertains To:" then excuseMe "Pertains To"delete word 1 to 2 of perTainsput perTains into fld "Pertains To"set cursor to busyput line desNum to (number of lines in theText) of theTextÂinto theDescget word 1 of theDescif it <> "Description:" then execuseMe "Description"delete word 1 of theDescput quotesToCurlies(theDesc) into fld "Description"-- send closeField to fld "title"end ifend mouseUpfunction textToLineNum theText,source -- HyperCard teamput source & return into sourcereturn the number of lines of char 1 to Âoffset(theText,source) of sourceend textToLineNumon excuseMe whatbeepanswer "Error:" && what && "didn't match." with "Continue" or "Cancel"if it is "Cancel" then exit to HyperCardend excuseMe   & IndexIndex by ObjectsIndex by TermsCommands on openCardset the enabled of bg btn "Prev" to Âthe number of this cd <> the number of cd 1 of this bgset the enabled of bg btn "Next" toÂthe number of this cd <> the number of last cd of this bgpass openCardend openCardon AC_startbeep 2end AC_start                             `BMAP  ÜÀ               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ  `BKGD      ô@       y  ¼Q    Ô    *0   2ö         
   Description  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd handleExceptions((the clickText))end ifend mouseUp  j    /â          	   Title  on closeFieldset the name of this cd to line 1 of meend closeField  (  @  Oó         
   Syntax     *  f  ó         
   Examples     V 9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  (   1  @ ?         
  Syntax:    *   V  f L         
  Examples:    T 	 9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R 
 9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  .      \         
  Description:     `  9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  H 9 N \°           Demo  on mouseUpgoToTheDemoend mouseUp   *     u          
I  Category     .  æ)î          	   TheMoviePath     :  f Õ î          	   Toolkit Movie Properties     *  ­J ¼õ         	   Demo Card    6 ¥   r Ê             Toolkit Movie Params     2 ¥ t I Ê             Toolkit MovieInfo      
   4°       	   Go Other  on mouseUpput short name of this cd into cdNamelock screenlock messagesgo cd 1go cd cdNameend mouseUp  \  9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^  9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp    & IndexIndex by ObjectsIndex by TermsParameters on openCardset the enabled of bg btn "Prev" to Âthe number of this cd <> the number of cd 1 of this bgset the enabled of bg btn "Next" toÂthe number of this cd <> the number of last cd of this bgpass openCardend openCardon AC_startbeep 2end AC_start                                   `BMAP ô               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ  `BKGD y     
@             Ú    80  ± 2ö         
   Description  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd handleExceptions((the clickText))end ifend mouseUp  j    /â          	   Title  on closeFieldset the name of this cd to line 1 of meend closeField  (  @  ]ó         
   Syntax     *  w  ó         
   Examples     V  9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  (   1  @ ?         
  Syntax:    *   d  t L         
  Examples:    T 	9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R 
 9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  .     ¯ \         
  Description:     `  9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  H 9 N \°           Demo  on mouseUpgoToTheDemoend mouseUp   *     u          
I  Category     .  æ)î          	   TheMoviePath     :  f Õ î          	   Toolkit Movie Properties     *  J õ         	   Demo Card    6 ¥   r Ê             Toolkit Movie Params     2 ¥ t I Ê             Toolkit MovieInfo    \  9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   ^  9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp      Í 1°           Paste  on mouseUpput the clipboard into theTextrepeat while line 1 of theText is emptydelete line 1 of theTextend repeatrepeat while last line of theText is emptydelete last line of theTextend repeatrepeat while last char of theText is returndelete last char of theTextend repeatif word 1 of theText <> "Card:" thenbeepanswer "This doesn't look right:" &return&return&Âline 1 to 3 of the clipboard with "Cancel"elseset cursor to busyput line 1 of theText into cdIDdelete word 1 of cdIDif the short id of this cd <> cdID then excuseMe "Card ID"delete line 1 to 2 of theTextset cursor to busyput line 1 of theText into theTitledelete word 1 of theTitleif theTitle <> line 1 of  fld "title" then excuseMe "Title"set cursor to busyput textToLineNum("Examples:",theText) into exNumput line 3 to exNum-1 of theText into theSyntaxget word 1 of theSyntaxif it <> "Syntax:" then excuseMe "Syntax"delete word 1 of theSyntaxput theSyntax into fld "syntax"set cursor to busyput textToLineNum("Description:",theText) into desNumput line exNum to desNum-1 of theText into theExamplesget word 1 of theExamplesif it <> "Examples:" then excuseMe "Examples"delete word 1 of theExamplesput theExamples into fld "examples"-- set cursor to busy-- put textToLineNum("Description:",theText) into desNum-- put line perNum to desNum -1 of theText into perTains-- get word 1 to 2 of perTains-- if it <> "Pertains To:" then excuseMe "Pertains To"-- delete word 1 to 2 of perTains-- put perTains into fld "Pertains To"set cursor to busyput line desNum to (number of lines in theText) of theTextÂinto theDescget word 1 of theDescif it <> "Description:" then execuseMe "Description"delete word 1 of theDescput quotesToCurlies(theDesc) into fld "Description"-- send closeField to fld "title"end ifend mouseUpfunction textToLineNum theText,source -- HyperCard teamput source & return into sourcereturn the number of lines of char 1 to Âoffset(theText,source) of sourceend textToLineNumon excuseMe whatbeepanswer "Error:" && what && "didn't match." with "Continue" or "Cancel"if it is "Cancel" then exit to HyperCardend excuseMe    & IndexIndex by ObjectsIndex by Terms  	 Messages Messages on openCardset the enabled of bg btn "Prev" to Âthe number of this cd <> the number of cd 1 of this bgset the enabled of bg btn "Next" toÂthe number of this cd <> the number of last cd of this bgpass openCardend openCardon AC_startbeep 2end AC_start                 `BMAP 
               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ  ÀBKGD       r@        â y    @    *0   2ö         
   Description  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd handleExceptions((the clickText))end ifend mouseUp  j    /â          	   Title  on closeFieldset the name of this cd to line 1 of meend closeField  (  @  Oó         
   Syntax     *  f  ó         
   Examples     V 9N0  .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp   R  9¼NØ0  .ã       Back  on mouseUpvisual zoom ingo backend mouseUp  (   1  @ ?         
  Syntax:    *   V  f L         
  Examples:    T 	 9Nº0  .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  R 
 9ÚNö0  .â       Home  on mouseUpvisual zoom ingo homeend mouseUp  .      \         
  Description:     \  9 ¼N°           by Term  on mouseUpgoIndex the short name of meend mouseUp   `  9Nd°           Topics  on mouseUpvisual zoom outgo cd "Topics" --Æend mouseUp  H 9 N \°           Demo  on mouseUpgoToTheDemoend mouseUp   *     u          
I  Category     .  æ)î          	   TheMoviePath     :  f Õ î          	   Toolkit Movie Properties     *  J õ         	   Demo Card    6 ¥   r Ê             Toolkit Movie Params     2 ¥ t I Ê             Toolkit MovieInfo    ^  9 dN ´°           by Object  on mouseUpgoIndex the short name of meend mouseUp    & IndexIndex by ObjectsIndex by TermsExternals on openCardset the enabled of bg btn "Prev" to Âthe number of this cd <> the number of cd 1 of this bgset the enabled of bg btn "Next" toÂthe number of this cd <> the number of last cd of this bgpass openCardend openCardon AC_startbeep 2end AC_start                        `BMAP r               V     V      /                ¿°ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ   ÀCARD  j      r              _±  n¦               on openCardwait 1 secondvisual dissolve slow to blackvisual dissolve slowgo nextend openCardon idleopenCardpass idleend idle    	BMAP  r               V          - kN              	<âûâ_âU %ààÀQa À82þbÿàÿ#àà"?ø"?þFB0 àx8$"ðB@ #À`F#Àv@  "à3  v`  pÁ@ ð $ø2ÿ Á U`   ##ðF@"À0"$ " @À#F @(#AF@+ @',3  8  'AJ  #, 3@ @#ð" #@%@%#"ð+ÀB`@3  "'# 6"@%%  U  B	ü" @% #?ð" @"À#"À@%+ 0"À=ÿ'G@ Bp "#G @ @U@ á# D   "# á4 @2ÀáC A2 `áC b@ ð á0rÀ8# @/ÀS ?À á2 8ád ` " Àá4D À" B@ >ÿð 2ðC ?¯âûâ_âUâQ#ð`|#`5ü ü3p ~2ð~7ÿb@@'@#0`)	@0$BàÀ "ü2 `9 #@"ðB@8 àSÿøD 2 )#áB #G ,0#*( @#
!(@# "$ @H  À@8 !áAX @-IH   "øá+ Bá"h  -IáAY  @- W  	 "øU@  @G  #, W@  '$@B #$@!"d  #$7  Q 2 #9 Á  @@$@`$@	B``@20` C " @6 @Á  @3ü B øb   @" R %@4 $À$F B@   E A0D0  4ÿâ%ÿââ°/À#À8RÀÿøbÿø øø	Áÿÿ  2 > 2  2  $`Á?À `?À0<ÀÁÀ`  À` $@8zø ü Áðü ðøþÁ   $Á   Á   $- 2 ááá*-@#@á: Àá+ á+@á+0á+á+á #$@@áá@- Á   áááÁ   A-Á    >  2  %-ÁÀ@À@$J #s   @2 C?> 2 4 `>` 2` > p2 p.ð#ðRÿÿ @áááPT @ááP¨ ( ááPT @ááP
ª( ááPU@@ááP
ª
áá@U áá@
ª áá@U@áá@ªáá@U áá1ª
áá1 áá1
áá1@áá1
 *áá1PTáá1*ª¨áá1UUPáá1ªª áá@UU@áá0 áá0APá¢á0" áá0UPáá0* áá0Páá0
" áá0Páá0¢ áá0Q@áá!¢ áá0EPáá0(áá0Páá!
(áá!Pá¥á!TTáá@
ª*áá@T@áá@
¨
 á¢á @áá 
áá @áá áá @á¢á  á¢á @@á¢á  áá á¢? @á?U@á?á? @á? á? @á£? @á? á¢? @á? @á?( á?  á¢?@ @á¿£6<ÆÁ`@ 0b" @ ðv~ï #ÞðxU  x
VÛ   "8Á0É9$ÊFÁ'18e8eðãxÏÂæ ï p9x{Þóß¸ÁÎð@ 0TÄ   Á pyb68 ÆÁð 8Èb@à  øc8Îps&Û Âç Îðx{ÀÍà ÁxÞð¸<&  	<-o{o{  @CARD  tù      }@             _±  {    ^   ` .   ]           	   TheMoviePath      V 5< ì          	  Menu  on mouseupput line (word 2 of the clickline) of me into cardNameif "Index" is in cardName then-- visual dissolve fastgoIndex (word 2 to 3 of cardName)end ifif there is a card cardName thenvisual zoom opengo cd cardNameend ifend mouseup  "  ? ( N ö         	        Ò   O@Ñ       Ò    QuickTime Toolkit  on mouseUpif there is a card (short name of me) thenvisual dissolve to blackvisual dissolve -- from black to cardgo cd (short name of me)end ifend mouseUp  "  ? NÒ         	       ÿô ü    Ð # í About This StackMovie XCMD LicensingQuickTime InfoMovies and Movie WindowsTracksScenesSpritesNodesHotspotsMovie ControllerQuickTime VR ControllerMovie Syntax OrganizationSome Sample Movie SyntaxIndex by ObjectIndex by Termÿò " Click to select a Topic or Index:ÿð # Click to select QuickTime Toolkit: ÿõ  Simple Movie Topics on openCardend openCardon closeCardend closeCard                   
@BMAP  }               V             A               	ô·CÀÁ ?øðÁðþ àÂøÀÀ << þxbà Áþ ü ø 6Â p   @  B @cÀ þ" Â xÿÀ pV@  3  r@  `"$@f   @V ÁÁüÁ `08Á À@ àt  %ð"Á| ø  VÂÁ  À  b8 @4 p Á!áà  Cøx!ÁC V  S "EA B] "`'&d   5 eD   Á 0  E @@&" #@%HF `$?ør@ "ø bÁ @  @ @K  U @à* @#R  4-8'CÁ$*A.$?øtø  D I  U" àa0c  @ Á  @  $" D)ÀÁ@  ð 4@ D&@	Â!  @  0@ @4@V ^`2 ÁÀ  "!h1ÃD    1À  4	 eA Â[ü "Âä    ÂRø @c ð Áø Að@ã>!Á   0R`"@h @  >@pÁ@  HÀRp ``0ÀHUpá+âáâ©·á8 á á8 `«âKÿïþáâ~"øáâ*#âpxâ)âàâàââÀâ00âÀâââ`â`ââââ@â0 â@ââââ
â@
â 
â 
â@
â
âá
âá
âá	âá@	â<ïáâFø ~# 	â "à"@	â@à"0	âT âE` 	â`E  	â)E @âv   	âÁâ0"@â@@ââ@ â H! â8@@â@8 â G â@G âL  â@âH â8  âH@ ã0 â"@â" ââ " â@@â@ "â?@ âW  â â2 ââ 2  â@â â7@ â> â@ââ@â â,à@ââáâ  â@áâ:x áâL áâL  â@áâ[ áâáâ ÿdÿÿÿÿþrÿÿÿÿÿà3ÿâáâK áâ,áâ<áâüâ9@ áâ<   â5  áâ< @áâ<áâìáâ@ãâ@áãâá	ââ áââá ââ@âá@â áâ âáâ@âãâáâââ@â â@ â@â ââ âÀâ @â`âââÀâ00@â$À â@%âxxâ V â7ïøâáâáã@âá âáâáâ@áâ á
âá
âá
âá
âá
âá
âÀá	â á	âá	âá	âá	âá	âÀáâ 8âDâ*â')â`9 â9` @âH  â(âp0â&Àâ)Àâ<ðâ*à
â[À à@
â<?ïàF?ÿÿüªá8 á §â#þrø ÿþ?&Èâ2`7  )â2 áâ2 á âþ?&Tâ#á#¨â Á!ð|þ2?Á~?Áø þâ3@ÁB `bP&âY @ e  @â@V  8  âJ 78âY h e DâF %â"@Fà  " xâ#áâáâ#HEð 8 ðâ" $$*ðâR R xDâ5  88â2 8  âR 2 À7 @á8 B  âC?ðüþâá¥{o{o{o{o{o{o{  ÀCARD  \        @             _±  â     V    V 9N   .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp     About This Stack  .  About This Stack  FåN       c  E d Þ ë E S Ô Ü 	X 	s   " 6 The QuickTime Tools stack adds QuickTime functionality to HyperCard and makes using QuickTime within HyperCard as easy as possible.True to its legacy, HyperCard 2.4 is one of the first applications to provide robust support for the display and manipulation of QuickTime 3.0 Movies.By extending HyperTalk's vocabulary, HyperCard 2.4 gives you precise control over the latest multimedia capabilities provided by QuickTime 3.0. You can use HyperCard to open and manipulate the many types of files QuickTime 3.0 can open, including GIF, WAV, MPEG, JPEG, and PICT files. HyperCard 2.4 provides a completely rewritten Movie XCMD that supports new HyperTalk properties, commands, and messages.Though HyperCard's new capabilities are extensive, there are only a few new terms and concepts to learn in order to integrate exciting new movie techniques into your stacks.To use this stack effectivelyTo get the most from this stack, we strongly recommend installing QuickTime 3.0 or later. You can download the latest versions of QuickTime software from the Apple web site at the following URL: http://www.apple.com/quicktime/Although HyperCard 2.4 can display movies with QuickTime version 2.5 or later, earlier versions of QuickTime do not provide the capability to open a wide range of file types, or use many of the other new features supported in HyperTalk. Refer to the documentation that came with the version of QuickTime you have installed to determine the types of files that can be opened.RequirementsYou must install the QuickTime system extension to display movies in HyperCard. See the ÒQuickTime InfoÓ card in this stack for more information about requirements for the QuickTime extension.In order to search for text using the findText command, you must have QuickTime 2.5 or later installed. In order to use many of the new commands and properties found in HyperCard 2.4 you must have QuickTime 3.0 or later installed.To view QuickTime VR movies, you must have QuickTimeª VR 2.0 or later installed; version 2.1 or later is recommended. To view MPEG files, you must have QuickTimeª MPEG Extension 1.0.1 installed; version 1.1 or later is recommended.An increase in memory partition for HyperCard is recommended when you use the application to open QuickTime movies. The amount of memory youÕll need depends upon the number, size, and complexity of your movie files.Older versions of QuickTimeDisplaying movies in HyperCard 2.4 requires QuickTime version 2.5 or greater. This version of QuickTime works with all color-capable (68020 or later) Macintosh computers running Mac OS 6.0.7 or later, with at least 2 MB of memory; with Mac OS 7.0 or later, you will need at least 4 MB of memory; with Mac OS 6.0.7 and a Macintosh II, IIx, IIcx or SE/30, you will need to install 32-Bit QuickDraw.DistributionPlease read the ÒMovie XCMD LicensingÓ card for information about distributing the Movie XCMD and the MovieInfo XFCN with your stacks. About This Stack                @CARD  AÙ        @             _±  â          ð   Movie XCMD Licensing  FÑ      % This Stack And Its ContentsThe QuickTime Tools stack, the Movie XCMD, the MovieInfo and MoviePath XFCNÕs are owned by Apple Computer, Inc. You may distribute the Movie XCMD, the MovieInfo and MoviePath XFCNÕs as a part of your stacks for private or commercial purposes.Distribution LicenseTerms for distributing the Movie XCMD, the MovieInfo and MoviePath XFCNÕs are included in the license agreement that came with your HyperCard software.  Movie XCMD Licensing         CARD  W        @             _±  â          Ê   QuickTime Info  .  QuickTime Info  F      ¸ è ÿ 
F 
Q    ! # + 1 :    ¥ ³ ï ü Ê Ì Î Ù Û ã é ò 8 E J X  ¼ About QuickTimeQuickTime is a Macintosh system software extension that allows third-party developers to integrate dynamic media, such as sound, video and animation in a consistent fashion across all applications.QuickTime allows users to view QuickTime movies in stacks in a similar fashion to text and graphics. For example, an engineer can create a simple animation to demonstrate the change in gas combustion at various temperatures. This animation can be played back within a HyperCard stack that explains the engineerÕs results. This stack can then be shared with colleagues, allowing them to not only read about the findings, but also see the actual effects.What is a QuickTime movie?A QuickTime movie is a file that describes references to media data (sounds, digitized pictures, videotape, film, etc.) that may or may not be contained within the movie file. When you create and save a QuickTime movie using an authoring tool, you decide whether to save the movie as a file that contains a set of references to the media contained elsewhere, or as an individual, self-contained movie file.For example, you may author a CD-ROM, and you want to create a directory structure on the CD that holds your movies in one folder, sounds in another folder, pictures in another folder, and so on.  In this case, movies contained on the CD can reference the media that's stored in these directories each time a movie is played and the various media are needed by a movie. So, in this case, you might choose to save your movies as references to the media that are stored elsewhere on the CD.In another example, you may create another movie that you want to send to a friend. It might  be more convenient to send the movie and its associated media as one file, instead of several different files.Either method is fine; you have control over which method is appropriate at the time you create and save the movies.A traditional movie, whether stored on film, laser disk, or tape, is a continuous stream of data. A QuickTime movie can be similarly constructed, but it need not be. Instead, a QuickTime movie can consist of data in sequences from different forms, such as analog video and CD-ROM.  In QuickTime, the movie is not the mediumÑitÕs the organizing mechanism.What is QuickTime VR? QuickTime VR is an extension of the QuickTime technology that allows users to interactively explore and examine photorealistic, three-dimensional, virtual worlds. These worlds can be in the form of either objects or panoramas, or both. The data that comprises a QuickTime VR virtual world is stored in a QuickTime VR movie. VR ObjectsAn object is stored in a QuickTime VR movieÕs video track as a sequence of individual frames, where each frame represents a single view of the object. An object view is determined by its node ID, fieldOfView, panAngle, and tiltAngle. The number of frames captured, as well as the starting and ending pan and tilt angles (panAngleRange and tiltAngleRange) are controlled by the author of the QuickTime VR movie. VR PanoramasThe data used to represent a panorama is stored as a single image that contains the entire panoramic scene. The movie author creates this image by stitching together individual overlapping digitized photographs of the scene using a program like AppleÕs QuickTime VR Authoring Studio, or by using a 3D renderer to generate an artificial scene. In QuickTime VR, these images are cylindrical projections of the panoramic. A panoramic view is described by its node ID, fieldOfView, panAngle, and tiltAngle. As with object movies, the starting and ending pan and tilt angles (panAngleRange and tiltAngleRange) are controlled by the author of the QuickTime VR movie.What is required to run QuickTime movies?QuickTime version 2.5 or greater works with all color-capable (68020 or later) Macintosh computers running Mac OS 6.0.7 or later, with at least 2 MB of memory; with Mac OS 7.0 or later, you will need at least 4 MB of memory. If you are using Mac OS 6.0.7 with a Macintosh II, IIx, IIcx or SE/30, then you will need to install 32-Bit QuickDraw.To view QuickTime VR movies, you must have the QuickTime VR extension installed. Version 2.1 or later of QuickTime VR is recommended.To view MPEG files, you must have the QuickTime MPEG Extension installed. Version 1.1 or later is recommended.QuickTime Info                    CARD          @             _±  â               #Movies and Movie Windows FõR       ð ö ú ÿ * 0 2 9 ? G  )    + Movies are contained in windowsA movie window is an external window HyperCard uses to display a QuickTime movie. There can be as many movie windows open at once as memory will allow. You can refer to the movie by name, number, or ID, and refer to the window which contains a movie in exactly the same way. You can even replace the movie thatÕs in a movie window with another movie. An object model for moviesIn HyperCard 2.4, you refer to the parts of a QuickTime movie in the same way you refer to objects in a HyperCard stack.For example, HyperCard stacks can contain objects like backgrounds and cards. These, in turn, can contain objects like buttons, fields, and bitmap graphics. Similarly, in HyperTalk, QuickTime contain objects such as tracks or nodes. These, in turn, can contain objects like scenes, sprites, and hotspots. And just like buttons, fields, cards and backgrounds in a HyperCard stack, each of the QuickTime objects to which HyperTalk refers has its own set of commands, properties and messages.Index by ObjectSee the Index by Object section of this stack for more information about the commands and properties associated with movies and movie windows.  Movies and Movie Windows                         CARD  Kf        @             _±  â           Î   Tracks  F½6      ø   
   ø      Tracks are contained in moviesTracks are how movies are organized. A QuickTime movie can contain one or more tracks, and these tracks can be of different types. Each type of track has its own associated set of properties.Each track has its own startTime, endTime, and duration. A track can start and end at any time during the movie, and the duration of a track need not correspond to the duration of the movie. The duration of a movie is the endTime of the track with the latest occurring endTime.Index by ObjectSee the Index by Object section of this stack for more information about the commands and properties associated with tracks.   Tracks                        ÀCARD  `7        @             _±  â           t   Scenes  Fd      Ý  ä  í  ö   Î â 
     % ' ) + / 1 7 9 > @ J P Y ] l m v  Scenes are contained in tracksA scene is a subdivision of a QuickTime track containing sprites. A sprite track may contain  one or more scenes, and each scene can contain one or more sprites. The difference between the endTime and the startTime of a scene equals the duration of a scene. Sprite tracks are composed entirely of one or more contiguous scenes, and the sum of the scenesÕ durations within a sprite track equals the duration of the track itself. Properties of scenesScenes have the following properties: commands, duration, endTime, ID, name, number, owner, properties, and startTime. Index by ObjectSee the Index by Object section of this stack for more information about the properties associated with scenes. Scenes                   CARD  aJ        @             _±  â           È   Sprites F·     
   # 2 Sprites are contained in scenesA sprite is like a character in a movie. It can move, change appearance and interact with other characters in the movie. Sprites are contained in scenes which, in turn, are contained in a special type of track called a Òsprite track.Ó There can be more than one sprite track in a movie, and there can be more than one scene in each sprite track.It may help to think of a sprite as being contained by a sprite track the way a HyperCard object is contained on a card.As a movie plays, QuickTime uses information in the current scene of a sprite track to draw the sprites contained in that track in real time. A sprite can respond to user input, and you can use HyperTalk to enable and disable sprite tracks and change the way sprites behave.Index by ObjectSee the Index by Object section of this stack for more information about the commands and properties associated with sprites.  Sprites                             ÀCARD  bF        @             _±  â           h   Nodes FZV      v            ¥ ­     ¬ Nodes are contained in VR moviesA QuickTime VR movie is a collection of one or more nodes. A node is a position in a virtual world at which an object or panorama can be viewed. QuickTime VR movies can contain any number of nodesÑeither object, panoramic, or both. A node in a QuickTime VR movie is identified by a unique ID that was assigned when the movie was created. Two types of nodesA panoramic node (or panorama) provides a panoramic view of a view area, similar to the view you would get by turning 360¡ on a rotating stool. As with object nodes, the user can use the mouse or keyboard to navigate within a view area to zoom in and out. An object node (or an object) allows a user to manipulate a photographically captured or computer-rendered object. It can provide a view of a single object or set of objects. The position of the node is the center of the object. The user can use the mouse or keyboard to change the horizontal and vertical viewing angles to move around the object. The user can also zoom in or out to enlarge or reduce the size of the displayed object. You can navigate virtual worlds and manipulate VR objects using HyperTalk. Multiple nodesWhen a QuickTime VR movie contains more than one node, you can move from one node to another if the author of the QuickTime VR movie has provided a link or connection between the source and destination nodes. Links between nodes are depicted graphically by link hotspots, a type of hotspot that, when clicked, moves the user from the source node to the destination node. You can use HyperTalk to move between nodes, even those that were not explicitly linked by the movieÕs author.Index by ObjectSee the Index by Object section of this stack for more information about the properties associated with nodes. Nodes                                CARD  cþ        @             _±  â           ^  	 Hotspots  FLN         * E ~  ó   H T o ~    Hotspots are contained in nodesHotspots are areas in a QuickTime VR movie that permit user interaction. They are clickable areas that are linked to other movies, other nodes, or even to URLs on the World Wide Web. The most common use of hotspots is to link one node to another to allow the user to move around in panoramic view areas and examine objects. The movie can optionally include text labels (the name of the hotspot) that appear in the movie controller when the cursor is over a particular hotspot (see the suppressHotSpotNames property). Different types of hotspotsThere are currently three types of hotspots in VR movies. Each type is defined by a four letter code that was used by the movieÕs author when the movie was created. Two of the hotspot types can be thought of as active, since they perform an action as the result of mouse events within their boundaries (see the linkDestination property). These active hotspots are of type ÒlinkÓ and Òurl Ó (note the trailing space in the URL hotspot type). The third type of hotspot, ÒundfÓ or undefined, does nothing in response to user interaction.Hotspots can be defined to show standard or other predefined cursors. The cursor changes when positioned over a hotspot. The movie controller has a Show Hot Spot toggle control that highlights all the hotspots on the screen (see the showHotspots property).Clicking a hotspot can even start a concurrent movie with animations, background music, or scrolling text. HyperTalk scripts can detect when the mouse enters or leaves a hotspot and this feedback could be used to activate a rollover event or switch to a custom cursor.Index by ObjectSee the Index by Object section of this stack for more information about the commands and properties associated with hotspots.Hotspots      	`CARD  U      
¸@             _±  â    Ú   6   -ö         
     -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom openput the clickText into theItemput handleExceptions(theItem) into theItemif there is a cd theItem thengo cd theItemelseif there is a bg theItem thengo bg theItem -- one of the Indexeselseif "http:" is in theItem thenopen url theItemend ifend ifend ifelsegoLinkend ifend mouseUp  l   n Ã  Õ             pause  on mouseUpif there is a movie 1 thenpause movie 1end ifend mouseUp  j   Q Ã c Õ             play  on mouseUpif there is a movie 1 thenplay movie 1end ifend mouseUp  z   Q5 cG             stepRev  on mouseUpif there is a movie 1 thensend "stepRev" to movie 1end ifend mouseUp  z   QD cV             stepFwd  on mouseUpif there is a movie 1 thensend "stepFwd" to movie 1end ifend mouseUp    Movie Controller ÿÿv    # 6 O r x § ® ³ º è ì    # % , 2 9 º Á d o 7 F G P _ Controllers are contained in MoviesThe movie controller is a standard part of every QuickTime movie. When visible, the controller will allow you to control the actions of a QuickTime movie. The controller area is 16 pixels high and, when visible, is included in the vertical dimension of the movie window. Functions of the controlsWith the controller, you use the slider to quickly locate any point in the movie. The stepRev and stepFwd buttons let you fine tune your position. The play button toggles between play and pause. The play, pause, stepRev, and stepFwd buttons all correspond to movie commands with the same names.The speaker icon on the left controls the movie volume. When the speaker icon is pressed, a pop-up volume slider appears to the left of the controller. The speaker volume slider sets the audio level of the movie and corresponds to the soundVolume property in HyperTalk.In addition, clicking within the movie viewing area pauses the movie, and double-clicking plays the movie. This is especially useful if the movie controller is not visible. Index by ObjectSee the Index by Object for more information about the properties associated with controllers.Movie Controller            àBMAP  
¸               V  2  ö 2  ö              ã, ã, §áÀá  á@< á  á8lwÁNl9¾¹¸áá8^U9Á_^õz+Ëøáá80
ÁàHAÃáá)J< à"áâ%(	RHp áá8¯ÁW
½@êzáá6   á& á6   á& á6p0<p á$ áá$ £á>á$ áá$ áá$ ã, ¢ááá# áV  $@ U  áá'ááâáT(À( #@E 
 UááFâÀÂ UUUU UUUUU  á_	´Á´ ÂÐ @#@%@0Àá?eÁ"` ``ÀáÁ"}@@áo  @@á?
 gÁ }``Àá_²"SÁÁ9È @#@U@< àá@U $P U  á# áâá'ááá# ã, á6 â# áá& á6 á& á'á% á6 á& áá& ¦á6ÿðâ# á6 â# á@7Aáá20`f$á	áB  @â]61ç$0FàÇlÁNl¹ÜæÜàá=/yÁÏL{Á UÀ\9Á_^ýUõùðá=p Á§^ïCÜ ùF  Áâ8 áàáNpçB ùEà <Á à<Øð<ðá>p£R÷@ û6 Á àØ``á=|ôÁë^ç+Ý0Fê¯WPÁW
\qupá# ÁÿÀ     á& áa s `â	áa ÿÀ @â	8:ÿðpá& ã, ¨ã, {o{o{o{o{o{o{o{o{o{   CARD  d      eú@             _±  â    à   ìR   -ö         
     -- If user clicked on text with group style, go to a definition.-- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom openput the clickText into theItemput handleExceptions(theItem) into theItemif there is a cd theItem thengo cd theItemelseif there is a bg theItem thengo bg theItem -- one of the Indexeselseif "http:" is in theItem thenopen url theItemend ifend ifend ifelsegoLinkend ifend mouseUp  :  p =öÀ
       	   These buttons are active     T  9Nº   .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp    QuickTime VR ControllerÿÿÅª    $    ª Ñ ê ð ü Ì Î Ï Ó   a i ½ Ä       e n    4 H   · ¿ S W « ­ ¼ ½ Å Ô Controllers are contained in MoviesThe QuickTime VR Controller is specifically for VR panorama and VR object movies. This controller, like the standard movie controller, has a set of buttons along the bottom. Unlike those for standard QuickTime movies, however, these buttons are not the primary means of controlling movies. With QuickTime VR movies, you simply drag across the movie image itself. The buttons on the VR controller supplement this basic action. Functions of the controlsThe sound volume pop-up slider functions exactly the same as on the standard movie controller, allowing you to set the volume between 0 and 255. If you hold down the Shift key, you can select values outside that range.The go back button displays the last-visited node in a multi-node movie. The goBack command is the HyperTalk equivalent.To zoom out, you can press the zoom out button or hold down the Control key on the keyboard. To zoom in, you can press the zoom in button or hold down the Shift key on the keyboard. Setting the fieldOfView property of a movie to a higher or lower number is the HyperTalk equivalent of zooming in and out.Pressing on the show hot spots button displays hotspots. You can double-click this button to toggle showing hotspots on and off. Setting the showHotSpots of a QuickTime VR movie to true or false is the HyperTalk equivalent of toggling.The translate button toggles the ability to grab and move VR objects.Hotspots in a VR movie can have names. If the cursor is over a named hotspot, its name will appear in the hot spot names field. Setting the suppressHotspotNames property of the controller will prevent this. Getting the name of a hotspot is the HyperTalk equivalent.The grow box allows you to resize the movie, as with any Mac OS window. (Note that some window types, like Òborderless,Ó do not have grow boxes.) Modifying the rect of a movie window is the HyperTalk equivalent of manually resizing a movie window. Index by ObjectSee the Index by Object for more information about the properties associated with controllers.  F  QuickTime VR Controller          BMAP  eú               V  2  ö 2  ö             @ã, ¿¿·ã, ã, ã, §á"Àá* á2 @2  áá6ÃÁ:à0r¶§29AÁÛPØcfpáá6Á¨ yê/z®2<õCÁ½P¼òÿ>àáá6D	Á @$2 HÁD  àPáá&ÀE $ÀCà ðáá6	ÁÀ  $
CH$ áá6ÕWÁUx^'2ª¼AÁÇ¯¢úª®pááá' ¢á+85 á' áá) £á>&Àá( á&á( áá) ã, ¢áá@á" áT  Á    8@ ááS  âá5@Á ? ? - )ÀÀ=À 5`Á am5 
)ü= 5x°ÆÁ ÀÀÀÀ
 |á	Ãs2Á»Øp  Àà? 3  [@)Á ÙÎ¸s`Iú%ãÁ¯Áüø "ÀD  Á ?¿ª(=ê I Á°  p>@Á? 3 ?;8Áø"AÀ À8x>@"ÀÁÀÀÀÀóÁ;XÀø>á	Ã ( à    Ààa@mA!  Á Gp À	ÃùíSÔöÚø x°Æ ? ?!Àà[@Á ¥à =z áRDÁ d dXEü á  á5@b` `
)ü2ááâáá6@ á  ã, áU  á. áU  á. áU  á. áU  á. > á> á@B Àl8 áD­±°àÁb³;`lþÞp`á4«ùyÁÀò¾ª¾m= @E H`Áð fjRAÀáDDHdÁ   , ,"  áF@ 2	 l×ßZPáD*}DêÁø®UW.`*`á@, ,@áÀ* â$ ,àe9³ æÁe Ùá,ÀuzõÔEÁ ½z¿Ááác$HD b$" ááâá3$HÁ  @ $âás^½UBóÑÁ /^ª¡T@áã, ¬ã, {o{o{o{o{o{o{  ÀCARD  [û                      _±  â     z   ä T 9Nº   .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp  & 3 [R            mask       Some Sample Movie Syntax  FÂ    &Ö H &ó â   & ) < > &} q &^ â &	Ë 	Ì &	Í 
 &
n  &  ¢ ¤ &î ð 
  &" < U Y & ç  	 &  ¬ : &  ¨ ª ° ² ¸ º Á Ã È Î Ö Ø  Å &a c   &õ   Beginning with HyperCard 2.4, HyperTalk has been extended to provide support for the control of movies using QuickTime 3.0. Although the code that controls movies is an XCMD (the ÔMovieÕ XCMD), HyperTalk now supports references to movies, tracks, sprites, scenes, nodes, hotspots, and controllers in the familiar way that HyperTalk has always referred to other objects within HyperCard, for example:put number of sprites in this scene of track 3 of movie 1 into theNumHere are just a few examples of how standard HyperTalk syntax is now available to perform the following tasks:open movie <movie file>play movie <movie name>pause movie <movie name>rewind movie <movie name>close movie <movie name>set <property> of movie <movie name> to <value>Drop any QuickTime-readable file onto HyperCard. HyperCard will open it using the following default parameters:  window: documentpositioning: offset "20,20" from the topLeft of the frontmost document windowvisible: yesfloating: noCount objects in QuickTime moviesnumber of moviesnumber of tracks in movie 1number of video tracks in movie 1number of scenes of first sprite track of movie 1number of sprites in this scene of sprite track "Bill" of movie 1number of nodes in movie 1number of hotSpots in node 1 of movie 1You can count movies, various track types, scenes in a sprite track, sprites, nodes in a VR movie, and hotspots in nodes. There is always only one controller per movie, and only one movie per movie window. There can be as many movies (or movie windows) as HyperCardÕs memory allows. Specify track typesset soundVolume of audio track 1 of movie "Sounds Great" to 100The following track types are supported: sound, sprite, VR, video, QuickTime video, QuickTime audio, audio, text, chapter, MPEG, and music. ÔSoundÕ and ÔaudioÕ are synonymous. MPEG tracks can have either audio or visual content, or both. there is a mpeg track 1 of movie 1-- returns true, if an MPEG audio & video combined track, or-- returns true, if an MPEG audio only track, or-- returns true, if an MPEG video only trackthe type of track 1 of movie 1 is "MPEG audio"Alternatively, you can check the ÒcharacteristicsÓ property of a track to determine ifit matches a desired trait. For example: "visual" is in the characteristics of track 1 of movie "Stained Glass"-- returns true, if track has visual media"audio" is in the characteristics of first track of movie "Bird Calls"-- returns true, if first track has audio mediaA track containing MIDI data is called a "music" track. For example:the type of track 3 of movie "Fred" is "music"-- returns true, if track 3 is a MIDI trackIf you want to specifically target the QuickTime video and audio tracks, you can use the terms ÒQuickTime videoÓ or ÒQuickTime audio.Ó For example:set the loc of QuickTime video track 1 of movie 1 to 100,100set the soundVolume of QuickTime audio track 1 of movie 1 to 100 Send messages to movie objectssend "mouseTrigger" to sprite 1 of this scene of sprite track 1 of movie 1Talk to scenes and spritesScenes are contained in sprite tracks, and scenes themselves contain sprites. Refer to sprites, scenes, and sprite tracks as follows:send "mouseDown" to sprite 1 of this scene of sprite track 1 of movie 1get the name of first sprite of scene 1 of last sprite track of movie 2When you refer to sprites of movies, HyperCard assumes the current scene of the movieÕs first sprite track. You cannot refer to sprites outside of the current scene without producing an error (just as you cannot refer to buttons or fields in a different stack without an error).Talk to Hotspots in Nodes  get id of hotspot 1 of node 1 of movie 1	When you refer to hotspots of movies, HyperCard assumes the current node of the movieÕs VR track.Test for QuickTime movie objectsif there is a sprite 1 of this scene of movie 1 then  set visible of sprite 1 of this scene of movie 1 to falseend ifRefer to movie objects by ordinal constantOrdinal constants in HyperTalk are: first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth.  Special ordinal constants in HyperTalk are: middle, last, any. ÒMiddleÓ resolves to half the number of objects (rounded down to the nearest integer) plus 1. ÒLastÓ resolves to the number of objects. ÒAnyÓ resolves to a random number between 1 and the number of objects. For example:get the name of any scene of first sprite track of movie "Big Sur"answer the name of first node of movie "White House" is "Oval Office"put the number of last node of movie "Yellowstone Falls" into lastNodeNumset visible of any sprite of last scene of track 1 of movie 1 to falseset enabled of first track of movie 3 to trueApplies to:  movies and movie windows, tracks, scenes, sprites, nodes, and hotspotsTest for versions of QuickTime components HyperTalk now enables you to get the version number of installed QuickTime components. The names of the supported components are ÒQuickTimeÓ, ÒSound ManagerÓ and ÒQuickTime VRÓ. For example: if the version of QuickTime > 2.5 then answer "Cool!"put the version of Sound Manager into SMVersion if version of QuickTime VR < 2.1 then promptForUpdateReference movies by pathnameset the rate of movie "My Hard Disk:My Movies:My Aching Back" to 1get the currTime of movie ":XFiles:Current Case"If the name of a specified movie doesn't match the name of any movie window, HyperCard  treats the name as a file name and tries to match it to the value of the movie property for each movie window.Some Sample Movie Syntax                       CARD  5        @             _±  â     V   î V  9N   .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp     Movie Syntax Organization .  Documentation Fº^    e   t  u  ¬  Þ  ã  í  ñ   þ  ÿ X b É Ñ  # Q Y  ¥ ß à The documentation of QuickTime movie syntax for HyperCard 2.4 is organized in two kinds of indexes:Index by ObjectOrganizes the commands and properties associated with Window, Movie, Track, Scene, Sprite, Node, HotSpot and Controller. Index by TermOrganizes all the terms associated with controlling QuickTime movies in HyperCard, by:Parameters - Describe the key terms and parameters of the Movie external command, which creates a movie window.Commands - Describe the commands that control the behavior of the movie window.Properties - List all the properties of a movie window.Messages - List the messages sent by the movie window to the current card.Externals - List the XFCNs contained in this stack and their uses.  Every term includes relevant HyperTalk syntax, a description of that term, script examples and other relevant information.Movie Syntax Organization                CARD  v        @             _±  ·   L        Ô .  Index X ´ backColorbotRightbottombottomRightcommandsdontEraseheightIDleftloclocationmovienamenumberownerpreferredLocpropertiesrectrectanglerighttoptopLeftvisiblewidth W  resizeToMovieWindow Index             CARD  ©        @             _±  ·          P Xg allowBalloonHelpaudioLevelbadgebotRightbottombottomRightcallBackMsgcallBackTimecallBackWhenDraggingcloseOnFinishcommandscommentscopyrightcurrNodeIDcurrTimecursorIDdefaultNodeIDdefaultRectdontErasedragEnableddurationendTimeexporterexportersfastIdlefieldOfViewfieldOfViewRangefindTextCaseSensitivefindTextReversefindTextStartfindTextWrapAroundfoundTextOffsetheightIDimageCorrectionimageQualityinformationisVRMovielanguageleftloclocationlockMessageslockScreenlooploopIsPalindromemaskmatrixmessagesmissingComponentsmutenamenumberownerpanAnglepanAngleRangepassMovieClickpreferredRatepreferredSoundVolumepropertiesraterectrectanglerightscaleseeAllFramessendMouseWithinMsgsizesoundVolumestartTimesuppressHotSpotNamestiltAngletiltAngleRangetimeFormattimeScaletoptopLefttypeuseCustomCLUTvisiblewidth  W ß cancelActioncopyFrameexportMoviefindTextgoBackidlemovieIdlenudgepauseplayprerollresizeToMoviereverserewindrotatesaveCopysaveCopySelfContainedshowDefaultViewshowExportDialogshowPosterskewstepFwdstepRev Movie Index                 `CARD  (        @             _±  ·           W y copyFrameexportMoviefindTextgoBacknudgerotatesaveCopysaveCopySelfContainedshowDefaultViewshowExportDialogskew  X actionsEnabledbackColorbotRightbottomcharacteristicscommandsdefaultRectdurationenabledendTimeexporterexportersgraphicsModeheighthighQualityModeIDidleFrequencyimageCountlanguagelayerleftloclocationmaskmatrixmutenamenumberownerpropertiesrectrectanglerightscalescaleMediasizesoundBalancesoundOutputComponentsoundVolumestartTimetexttoptopLefttypevisiblewidth Track Index               CARD  '¬        @             _±  ·           T X O commandsdurationendTimeIDimageCountnamenumberownerpropertiesstartTime Scene Index             `CARD  )¡        @             _±  ·           X ¬ botRightbottomcommandsgraphicsModeheightIDimagelayerleftloclocationmatrixnamenumberownerpropertiesrectrectanglerightscalesizetoptopLeftvisiblewidth W O idlemouseDownmouseEntermouseExitmouseTriggermouseUpmovieIdlerotateskew Sprite Index                             CARD  *        @             _±  ·           < X 8 commandscommentsIDnamenumberownerpropertiestypeNode Index       ÀCARD  ,        @             _±  ·           f X O commandscommentsenabledIDlinkDestinationnamenumberownerpropertiestype  W  mouseTrigger HotSpot Index                          CARD  -°        @             _±  ·           ¬ X ¨ botRightbottomcommandsheightIDleftloclocationnamenumberownerpropertiesrectrectanglerightshowHotSpotssuppressHotSpotNamestoptopLefttypevisiblewidthController Index                `CARD  Ð        @             _±  N  I  $   ò F 5 v ~Ü         
   Parameters Info  on mouseUpend mouseUp  Þ E! p #              Parameters  on mouseUpput the selectedText of me into cdNameif cdName is "visible" then put " parameter" after cdNameselect line 0 of megoSelection short name of me, cdNameend mouseUp   .  IndexÿË4 The name of the QuickTime file to be displayed (optional)The style of window in which the movie is displayed (optional)The location at which the movie window will be displayed (optional)Determines if the movie window is initially visible (optional)Controls the ÒlayerÓ of the movie window (optional)ÿ» 9
    / FileNameWindowStyleLocationVisibleLayering  T n
    d This section describes the key terms and parameters of the Movie XCMD which creates a Movie window. Parameters Index      àCARD  @        @             fp  N    ¬     ¢ ! v # Ü             Commands  on mouseUpput the selectedText of me into cdNameselect line 0 of megoSelection short name of me, cdNameend mouseUp  È ! v ËÜ         
   Commands Info  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd (the clickText)end ifend mouseUpon mouseWithinput theFields() into fieldListif the selectedField is not empty then exit mouseWithinget the scroll of last item of fieldListif it ­ the scroll of first item of fieldList thenput the textHeight of last item of fieldList into baseLineSizelock screenrepeat with count = 1 to (number of items in fieldList - 1)set scroll of (item count of fieldList) to itend repeatunlock screenend ifend mouseWithin ¢   þËÜ           Down  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) + baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown      vË Ü           Up  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) - baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown ÿÿ cancelActioncopyFrameexportMoviefindTextgoBackidlemouseDownmouseEntermouseExitmouseTriggermouseUpmovieIdlenudgepauseplaypreRollresizeToMoviereverserewindrotatesaveCopysaveCopySelfContainedshowDefaultViewshowExportDialogshowPosterskewstepFwdstepRev ÿþ Cancels a userÕs action on a movieCopies the current frame to the clipboardExports the movie to diskSearches for specified text in the movieDisplays the previous node in a VR movieAllows movie to ÒshareÓ time with a scriptSimulates user pressing the mouse in the movieSimulates user moving mouse over movieSimulates user dragging mouse off of movieSimulates user clicking in a movieSimulates user releasing the mouse in a movieReplaced by ÒidleÓCauses the movie to pan and/or tiltPauses the moviePlays the movie forwardPrepares QuickTime for playing the movieResizes the movie window to fit the moviePlays the movie in reverseRewinds the movie to start timeRotates a movie around its centerSaves a copy of the movie to diskSaves a self-contained copy of the movie to diskShows the default view of the node or trackDisplays the export dialog for exporting moviesGoes to the poster ÒframeÓ of the movie and pausesSkews a movie from top to bottom and left to rightSteps the movie forward 1 frameSteps the movie backward 1 frame T d This section describes the commands that control the behavior of the movie window and its objects. Commands Index function theFieldsreturn "card field id 1,card field id 2"end theFields       `CARD  !t        @             fp  N    	â   ÖÖ % v # Ü             Properties  on mouseUpif the shiftKey is down thenconfirm meselect line 0 of meelseput the selectedText of me into cdNameif last char of cdName is " " then delete last char of cdNameput handleExceptions(cdName) into cdNameif reservedWord(cdName) thenput "¥" after cdNameend ifselect line 0 of megoSelection short name of me, cdNameend ifend mouseUpon confirm theListput empty into missingFromStackrepeat with i = 1 to the number of lines in theListset cursor to busyput line i of theList into thisPropif last char of thisProp is " " then delete last char of thisPropif thisProp is reservedWord(thisProp)  then put "¥" after thisPropif there is no cd thisProp thenput thisProp &return after missingFromStackend ifend repeatnote "MISSING FROM STACK" &return&return& missingFromStackend confirmfunction reservedWord thePropput ",id,number," into theListget ("," & theProp & "," is in theList)return itend reservedWord  Ê ! v ËÜ         
   Properties Info  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd (the clickText)end ifend mouseUpon mouseWithinput theFields() into fieldListif the selectedField is not empty then exit mouseWithinget the scroll of last item of fieldListif it ­ the scroll of first item of fieldList thenput the textHeight of last item of fieldList into baseLineSizelock screenrepeat with count = 1 to (number of items in fieldList - 1)set scroll of (item count of fieldList) to itend repeatunlock screenend ifend mouseWithin ¢   þËÜ           Down  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) + baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown      vË Ü           Up  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) - baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown ÿÿ¡ actionsEnabledallowBalloonHelpaudioLevelbackColorbadgebotRightbottombottomRightcallBackMsgcallBackTimecallBackWhenDraggingcharacteristicscloseOnFinishcommandscommentscontrollerVisiblecopyrightcurrNodeIDcurrTimecursorIDdefaultNodeIDdefaultRectdontErasedragEnableddurationenabledendTimeexporterexportersfastIdlefieldOfViewfieldOfViewRangefindTextCaseSensitivefindTextReversefindTextStartfindTextWrapAroundfoundTextOffsetgraphicsModeheighthighQualityModeIDidleFrequencyimageimageCorrectionimageCountimageQualityinformationisVRMovielanguagelayerleftlinkDestinationloclocationlockMessageslockScreenlooploopIsPalindromemaskmatrixmessagesmissingComponentsmoviemovieCursorIDmovieDefaultRectmovieLocmovieRectmutenamenumberownerpanAnglepanAngleRangepassMovieClickpreferredLocpreferredRatepreferredSoundVolumepropertiesraterectrectanglerightscalescaleMediaseeAllFramessendMouseWithinMsgshowHotSpotssizesoundBalancesoundOutputComponentsoundVolumestartTimesuppressHotSpotNamestexttiltAngletiltAngleRangetimeFormattimeScaletoptopLefttypeuseCustomCLUTvisiblewidthwindowLocwindowNamewindowRect ÿþÙ Whether sprite actions are enabled or notWhether balloons will appear when Help is enabledReplaced by ÒsoundVolumeÓSets the color of a movie window backgroundShows the badge when the Controller is hiddenThe bottom right corner of a Movie or objectThe bottom of a Movie or movie objectThe bottom right corner of a Movie or objectThe HyperTalk to send when callBackTime occursThe time at which to send the callBackMsgTurns off messaging when the user drags a movieIdentifies a movieÕs audio/video characteristics Closes the movie when it has finished playingList of the commands for the movie or objectText string containing author-defined commentsReplaced by ÒvisibleÓText string containing author-defined copyrightsThe id of the current node in a VR movieThe current time in the movieThe id of the cursor to be displayed in the movieThe node to which a QuickTime VR movie opensThe default rectangle of the movie or objectErase the movie window on open and closeInvoke the Macintosh Drag ManagerThe length of the movie in timeWhether a movie object is visible or functionalThe time specified for the movie to stopThe exporter to be used when saving the movieList of available exportersGiving processing time to the Movie The angle of the view for a VR object or sceneThe maximum and minimum field of viewFinding text is case sensitive or notSearch for text in previous samples of the movieWhere to start the search for text in a movieAt the end of the movie, search again at beginningThe time at which the text was foundDetermines the transfer mode and op colorThe height of a Movie or movie objectThe quality of video or sound tracksThe id of a Movie or movie objectThe rate at which idle is sent to a SpriteThe picture of a SpriteThe correction to be applied when renderingThe number of images in a Sprite trackThe bit depth for a Sprite imageAn author-specified text string in a movieWhether the movie is a VR movieThe language to be displayed in the movie The layer occupied by a movie object in a track The left edge of a Movie or movie objectNode ID to which a HotSpot pointsThe location of a Movie or movie object The location of a Movie or movie object Whether the movie sends messages to the cardWhether the screen is locked during changes Plays the movie repeatedly Loops the movie backwards from the end The image file used to clip a movie or trackA dimensional matrix for movies and objectsThe messages a movie can send to HyperCardComponents not present and required by the movieThe file name of the movieReplaced by ÒcursorIDÓThe default rectangle of the movie in the windowReplaced by ÒlocÓReplaced by ÒrectÓTurns the movie sound on and offThe name of a movie or movie objectThe number of a movie or movie objectIn the case of a movie, the enclosing windowThe horizontal angle of the viewThe minimum and maximum range of the pan angleMouse clicks in the Movie will pass to QuickTimeThe preferred location of a Movie or movie objectThe preferred rate of play of a MovieThe preferred sound volume of a Movie Lists the properties for a Movie or movie objectThe rate at which the Movie playsThe rectangle of a Movie or movie object The rectangle of a Movie or movie object The right edge of a Movie or movie objectThe scale at which a Movie or object is displayed Whether to scale sprites when a sprite track is resized Forces QuickTime to show all frames in a Movie Whether a mouseWithinMovie message is sent Hides and shows HotSpots in a QuickTime VR MovieThe size (on disk) of a Movie or movie object Sets the audio balance for stereo outputThe output component to be used for soundThe level of audio playback in a Movie or trackThe time at which the Movie will start playingTurns off HotSpot names in VR ControllerThe text of the current sample of a text trackThe vertical angle of view for a MovieThe maximum and minimum tiltAngle for a movieThe time format currently used by the movie The scale of time in the movieThe top of a Movie or movie objectThe top left corner of a Movie or movie objectThe type of a movie object Using a custom Color Look Up TableWhether a movie or movie object is visible The width of a movie or movie object Replaced by ÒlocÓReplaced by ÒnameÓReplaced by ÒrectÓ  T N This section describes all the properties of a movie window and its objects. Properties Index function theFieldsreturn "card field id 1,card field id 2"end theFields                        àCARD  "Ç        @             fp  N    ð   N   ! v # è             Messages  on mouseUpput the selectedText of me into cdNameselect line 0 of megoSelection short name of me, cdNameend mouseUp È ! v ×Ü         
   Messages Info  -- If user clicked on text with group style, go to a definition.on mouseUpif the clickText is empty then exit mouseUpget (the textStyle of the clickChunk)if "group" is in it thenvisual zoom opengo cd (the clickText)end ifend mouseUpon mouseWithinput theFields() into fieldListif the selectedField is not empty then exit mouseWithinget the scroll of last item of fieldListif it ­ the scroll of first item of fieldList thenput the textHeight of last item of fieldList into baseLineSizelock screenrepeat with count = 1 to (number of items in fieldList - 1)set scroll of (item count of fieldList) to itend repeatunlock screenend ifend mouseWithin  F ! c × w±          	  Messages Label  on mouseUpend mouseUp  ¢   þËÜ           Down  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) + baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown      vË Ü           Up  on mouseDownput theFields() into fieldListput the textHeight of item 1 of fieldList into baseLineSizeput the number of items in fieldList into numItemsrepeat until the mouse is upget (scroll of last item of fieldList) - baseLineSizelock screenrepeat with count = 1 to numItemsset scroll of (item count of fieldList) to itend repeatunlock screenend repeatend mouseDown ÿÿ closeMovieenteringVRNodeleavingVRNodemouseDownInMoviemouseEnterMoviemouseLeaveMoviemouseStillDownInMoviemouseTriggerInMoviemouseUpInMoviemouseWithinMoviemovieLinkToURLmovieRateChangedmovieTimeChangedmovieVolumeChangedopenMoviespriteCustomActionspriteDebugMessage ÿþ when a movie is closedwhen a new node is openedwhen the current node id changeswhen the mouse is pressed down in a moviewhen the cursor enters the movie rectanglewhen the cursor leaves the movie rectanglewhen the mouse button is held down in a moviewhen a click occurs in a moviewhen the mouse button is released in a movie  while the mouse is still inside the moviewhen a link to a URL is executedafter a movieÕs rate has changedafter a movieÕs time has changed  after the sound volume in a movie has changed when HyperCard opens a movie when a custom message is sent to the host applicationwhen a debugging message is sent to the host application ÿý # Messages sent to the current cardÉ  T g This section lists the messages that are used to communicate between HyperCard and the movie window.   Messages Index function theFieldsreturn "card field id 1,card field id 2"end theFields                     CARD  #J        @             fp  N     è    Ì ¢ % v # Ø              Externals  on mouseUpput the selectedText of me into cdNameselect line 0 of megoSelection short name of me, cdNameend mouseUp   F  v ÇÜ         
   Externals Info  on mouseUpend mouseUp  ÿÿ  MovieInfoMoviePathÿþ [ Returns information about the current movieReturns the path name to a selected movie file  T P This section describes the external functions (XFCNs) available in this stack. Externals Index         DCARD          @             fp  â 5 {  !²    h " x /  .                  " y'  P                 " N  Y  É â                 " z  Y ì Éì                 " M  0  Pì                 " L + N ã                 " K  û "ì                 " J  Ò ì òì                 " I  Ò  ò â                 "   6  K +         1    "   Q  h +         2    "   Q ð h         3    . S  Q ( `         
  Window Style     *   Q þ `:        
  Location     "   õ 
 ,         5    . Q  õ (         
  Movie Button     "  # : *         6    8 R # (1 ¹        
  Movie Button Installer     `   7 - F ¯        
   Choose a Movie File...  on mouseUpchooseToolkitMovieend mouseUp  ¦ 	 6 ³ GÜ@         
  TheMovieName  on mouseUpanswer "Please use the ÒChoose a Movie File...Ó button" && Â"on the left to select a movie." --Æend mouseUp      ­  ¼ Ñ        
   More Info...  on mouseUplock screengo cd "Window Styles"unlock screen with visual dissolve fastend mouseUp   "   Ë  ã ,         4    &   Ë ( Ú X        
  Layer    *  ¸ ÈF@        
   WindowLoc    N   Ú - ê oÀ        
   floating  on mouseUpsetMovieLayerend mouseUp   P   Ú  ê ß        
   nonFloating  on mouseUpsetMovieLayerend mouseUp     Û
 êÜ        
   Go to Advanced Options Card  on mouseUplock screenset cursor to 4go cd "Advanced Options"end mouseUp  
è  5 -D Ú        
   Install into Another Stack...  on mouseUpset cursor to 4-- find out which stack to install it into...if ToolkitMovie() is empty thenanswer "Please use the ÒChoose a Movie File...Ó button" Â&& "to select a movie first." --Æexit mouseUpend ifput cd fld "TheMovieName" into MovieNameanswer file "Install the Ò" & MovieName & "Ó button into which stack?"Âof type "STAK" --Æput it into DestPathif DestPath = empty then exit mouseUp-- check for locked stackif the cantModify of stack DestPath thenput "The stack youÕve selected canÕt be modified, please check "&Â"the stackÕs settings and environment before continuing." Âinto AnswerString --Æanswer AnswerStringexit mouseUpend if-- refresh the card, and set ourselves up for the copy...-- go this cdunlock screenset cursor to "busy"set lockMessages to truelock screenput the userLevel into SaveLevelset userLevel to 5-- select the movie button, give it an icon, copy it, and change the-- on-card button back to it's original, no icon, versionset cursor to "busy"choose button toolput "Show/Hide Movie" into MovieBtnName --Æselect cd btn id 70set icon of cd btn id 70 to "frame"doMenu "Copy Button"set icon of cd btn id 70 to 0choose browse tool-- go to the chosen stack, paste the button and center itpush cdgo stack DestPathset cursor to "busy"doMenu "Paste Button"put the id of last cd btn into MovieBtnIdset name of cd btn id MovieBtnId to MovieBtnNameset width of cd btn id MovieBtnId to 90set height of cd btn id MovieBtnId to 60set loc of cd btn id MovieBtnId to (width of cd window div 2 & "," & Âheight of cd window div 2)set userLevel to SaveLevel-- show the user what is going on and tell them what we're going to dochoose browse toolunlock screenset cursor to "plus"put "Click and drag the cursor to where you would like to place your button." --Æbeepselect text of msgwait 2put emptyput "Click and drag to where you would like to place your button." --Æwait 1select text of msg-- wait until the mouse button is pushed and follow the mouse with the-- button, allowing them to place the button wherever they want itput right of this cd - 45 into RightBoundput bottom of this cd - 30 into BottomBoundwait until the mouse is downset loc of cd btn id MovieBtnId to the mouseLocrepeat until the mouse is upput the mouseLoc into TheMouseLocput max(45,min(RightBound,item 1 of TheMouseLoc)) Âinto item 1 of TheNewLocput max(30,min(BottomBound,item 2 of TheMouseLoc)) Âinto item 2 of TheNewLocset loc of cd btn id MovieBtnId to TheNewLocend repeatput emptyhide msg---- mission accomplished, go backpop cardset lockMessages to falseset cursor to handanswer "The button has been successfully installed!" --Æend mouseUp   4 "A ÙQ ö          	   PreviousPlayButton     * ; ³  Ã           
   CenterLoc   î F  -Ü        !  Show Movie: Simple Movie  on mouseUpset cursor to watch-- Load the name of the movie window into TheMovieNameput "Simple Movie" into TheMovieName --Æ---- Check the status of the movie windowif TheMovieName is in the windows then-- The movie window is open and this script will close itclose window TheMovieNameelse-- The movie window is closed and this script will open itMovie TheMovieName,"windoid","card","invisible","floating"put the result into TheResultif "Error" is in TheResult then -- Something went wronganswer TheResultexit mouseUpend if---- Advanced movie options:if there is a window TheMovieName thenset audioLevel of window TheMovieName to "256"set mute of window TheMovieName to falseset badge of window TheMovieName to trueset controllerVisible of window TheMovieName to trueset closeOnFinish of window TheMovieName to falseset loop of window TheMovieName to falseset seeAllFrames of window TheMovieName to falseset startTime of window TheMovieName to "0"set endTime of window TheMovieName to "6,13.9"set dontErase of window TheMovieName to falseset fastIdle of window TheMovieName to falseset rate of window TheMovieName to "1.0"show window TheMovieNameend ifend ifend mouseUp   . G ª  º Ê          
   MiniCenterLoc    2 P  Ë þ Ún        
  Advanced Options     * T ) ( 6 i        
  FileName     * w  jT ÀÔ            MiniCard     . V  ´n À¼        
   Stack Window     H Y  ` pDÀ       
   card  on mouseUpsetMovieLocend mouseUp   H Z  q D       
   main  on mouseUpsetMovieLocend mouseUp   J [   D       
   largest  on mouseUpsetMovieLocend mouseUp  J \   £D       
   deepest  on mouseUpsetMovieLocend mouseUp  F ]  ¤ ´D       
   loc  on mouseUpsetMovieLocend mouseUp ø   w{ ³®À       	   QT Movie  on mouseDownset hilite of me to trueput cd fld "TheMovieName" into TheMovieNamesetMovieLocOnCard (the loc of me)put the width of me into TheWidthput the left of btn "MiniCard" + (TheWidth div 2) into LeftBoundput the right of btn "MiniCard" - (TheWidth div 2) into RightBoundput the height of me into TheHeightput the top of btn "MiniCard" + (TheHeight div 2) into TopBoundput the bottom of btn "MiniCard" - (TheHeight div 2) into BottomBoundput "0,0" into oldMouseLocrepeat until the mouse is upput the mouseLoc into TheMouseLocif TheMouseLoc = oldMouseLoc then next repeatput max(LeftBound,min(RightBound,item 1 of TheMouseLoc)) into item 1 of TheNewLocput max(TopBound,min(BottomBound,item 2 of TheMouseLoc)) into item 2 of TheNewLocset loc of me to TheNewLocput MiniToCard(the topLeft of me) into TheRealLocput TheRealLoc into cd fld "WindowLoc"put TheMouseLoc into oldMouseLoc-- if there is a movie window, then update its locationif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the location of the movie to the mini-movie positionset loc of window TheMovieName to TheRealLocend ifend repeatsetToolkitMovieLoc (cd fld "WindowLoc")writeButtonScriptend mouseDownon mouseUpend mouseupon update  -- puts the loc of the movie into cd fld "WindowLoc"if the hilite of btn "Loc" thenput MiniToCard(the topLeft of me) into cd fld "WindowLoc"elseset loc of me to the loc of btn "MiniCard"end ifend update  R j  ` * p pÀ        
   windoid  on mouseDownsetWindowStyleend mouseDown   V k  q *          
   tallWindoid  on mouseDownsetWindowStyleend mouseDown   T l    £ Þ        
   borderless  on mouseDownsetWindowStyleend mouseDown  P m  q   Í        
   shadow  on mouseDownsetWindowStyleend mouseDown  N n   * £ h        
   zoom  on mouseDownsetWindowStyleend mouseDown  P o  `  p Í        
   dialog  on mouseDownsetWindowStyleend mouseDown  P p   *  h        
   plain  on mouseDownsetWindowStyleend mouseDown   N q     Í        
   rect  on mouseDownsetWindowStyleend mouseDown  J u ) 	&ø             Cover  on mouseUpwarnNoToolkitend mouseUp  L v& 	R ë             Cover2  on mouseUpwarnNoToolkitend mouseUp   V {9N   .à       Prev  on mouseUpvisual wipe rightgo prevend mouseUp     QuickTime ToolkitÿÞ  56  .  QuickTime ToolkitÿÅ  188,91 ÿ¹  404,148ÿê  card ÿ÷  Simple Movie QuickTime Toolkit °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°Card id 32905: QuickTime ToolkitThis is the main card of the Toolkit.THE MESSAGE HANDLERS DEFINED IN THIS SCRIPT:openCard,updateToolkitCard,updateMiniMovie,setCardDefaults,closeCard,openMovie,closeMovie,writeButtonScript,ChooseToolkitMovie,setWindowStyle,setMovieLoc,setMovieLayer,setWindowStyleOnCard,setMovieLocOnCard,setMovieLayerOnCard,THE FUNCTION HANDLERS DEFINED IN THIS SCRIPT:MiniToCard,CardToMiniData fields for the Toolkit:Toolkit Movie ParamsToolkit MovieInfoToolkit Movie Properties°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°on openCardtoolkitOpenCardpass openCardend openCardon updateToolkitCard -- update this cd; only called if QT presentif ToolkitMovie() is empty thenresetToolkitParams ""   --? or is this already fine for us?setCardDefaultselseput ToolkitMovie() into TheMovieNameput TheMovieName into cd fld "TheMovieName"set name of cd btn id 70 to "Show Movie:" && TheMovieName --ÆsetWindowStyleOnCard ToolkitWindowStyle() -- could need updatesetMovieLocOnCard ToolkitMovieLoc() -- update if movie info differentsetMovieLayerOnCard ToolkitMovieLayer()updateMiniMoviewriteButtonScriptend ifend updateToolkitCardon updateMiniMovie-- make sure dimensions are correct; make sure location is OKlock screenput rect of btn "QT Movie" into miniRectput ToolkitMovieLoc() into movieLocput line 1 of fld "Toolkit MovieInfo" into movieRectget (item 3 of movieRect - item 1 of movieRect) div 4if it ­ width of btn "QT Movie" then set width of btn "QT Movie" to itget (item 4 of movieRect - item 2 of movieRect) div 4if it ­ height of btn "QT Movie" then set height of btn "QT Movie" to itif movieLoc is a point thenset topLeft of btn "QT Movie" to CardToMini(movieLoc)elseset loc of btn "QT Movie" to (the loc of btn "MiniCard")end ifunlock screenend updateMiniMovieon setCardDefaults-- This sets the controls on this card;-- the global data should be empty!put empty into cd fld "TheMovieName"setWindowStyleOnCard "windoid"setMovieLocOnCard "card"setMovieLayerOnCard "floating"set name of btn id 70 to "Show Movie:" --Æset script of btn id 70 to emptyend setCardDefaultson closeCardcloseToolkitWindowspass closeCardend closeCardon openMovie WindowName,WindowIDput ToolkitMovie() into TheMovieNameif TheMovieName is empty thenput WindowName into TheMovieNameresetToolkitParams TheMovieNameput movieInfo(theMovieName) into fld "Toolkit MovieInfo"put empty into fld "Toolkit Movie Properties"put theMovieName into cd fld "TheMovieName"setWindowStyleOnCard "windoid"setMovieLocOnCard "card"setMovieLayerOnCard "floating"updateMiniMoviewriteButtonScriptelse if WindowName is TheMovieName thenset name of cd btn id 70 to "Hide Movie:" && TheMovieName --Æend ifend openMovieon closeMovie WindowName,WindowIDput ToolkitMovie() into TheMovieNameif WindowName is TheMovieName thenset name of cd btn id 70 to "Show Movie:" && TheMovieName --Æend ifend closeMovieon writeButtonScriptset cursor to 4put cd fld "TheMovieName" into TheMovieNameif there is a window TheMovieName thenset name of cd btn id 70 to "Hide Movie:" && TheMovieName --Æelseset name of cd btn id 70 to "Show Movie:" && TheMovieName --Æend ifif bg fld "Toolkit Movie Properties" is empty thenput "visible" into TheVisibleStatusput empty into TheAdvancedMovieOptionselseput "invisible" into TheVisibleStatusput "-- Advanced movie options:" & return & "if" && Â"there is a window TheMovieName then" & return & Âbg fld "Toolkit Movie Properties" & return & Â"show window TheMovieName" & return & Â"end if" & return into TheAdvancedMovieOptions --Æend ifput "on mouseUp" & return & Â"set cursor to watch" & return & Â"-- Load the name of the movie window into TheMovieName" & return & Â"put" && quote & TheMovieName & quote && "into TheMovieName --Æ" & return & Â"--" & return & "-- Check the status of the movie window" & return & "if" && Â"TheMovieName is in the windows then" & return & Â"-- The movie window is open and this script will close it" & return & Â"close window TheMovieName" & return & "else" & return & Â"-- The movie window is closed and this script will open it" & return & Â"Movie TheMovieName," & quote & ÂToolkitWindowStyle() & quote & "," & quote & cd fld "WindowLoc" & Âquote & "," & quote & TheVisibleStatus & quote & "," & quote & ÂToolkitMovieLayer() & quote & return & Â"put the result into TheResult" & return & "if" && Âquote & "Error" & quote && "is in TheResult then -- Something went wrong" & return & Â"answer TheResult" & return & Â"exit mouseUp" & return & Â"end if" & return & Â"--" & return & ÂTheAdvancedMovieOptions & Â"end if" & return & Â"end mouseUp" into TheMovieBtnScript --Æset script of cd btn id 70 to TheMovieBtnScriptend writeButtonScript----------------------------------------------------------------------  Toolkit utilities:--------------------------------------------------------------------on ChooseToolkitMovieglobal gXCMDError-- Asks user for a movie file; stores itput MovieFileAndInfo("the movie you want to use") into ThePathif (gXCMDError is not empty) thenanswer gXCMDError --Æexit ChooseToolkitMovieelse if (ThePath is empty) thenexit ChooseToolkitMovie -- user canceledend ifput line 1 to 12 of ThePath into ToolkitMovieInfodelete line 1 to 12 of ThePathset cursor to 4lock screenput ToolkitMovie() into TheMovieNameif there is a window TheMovieName then close window TheMovieNameunlock screenlock screenput PathToLeaf(ThePath) into theMovieNameresetToolkitParams theMovieNameput ToolkitMovieInfo into fld "Toolkit MovieInfo"put empty into fld "Toolkit Movie Properties"put theMovieName into cd fld "TheMovieName"setWindowStyleOnCard "windoid"  -- this cardsetMovieLocOnCard "card"setMovieLayerOnCard "floating"updateMiniMoviewriteButtonScriptunlock screenend ChooseToolkitMovieon setWindowStyleput short name of the target into newStylesetWindowStyleOnCard newStylesetToolkitWindowStyle newStylewriteButtonScriptend setWindowStyleon setMovieLoc newLocif newLoc is empty then put the short name of the target into newLocif hilite of btn newLoc then exit setMovieLoc -- no need to update?if newLoc is "loc" then put the topLeft of btn "QT Movie" into newLoclock screensetMovieLocOnCard newLocsetToolkitMovieLoc newLocwriteButtonScriptunlock screenend setMovieLocon setMovieLayer -- called by handlers in radio buttonsput short name of the target into newLayerif newLayer ­ ToolkitMovieLayer() thenset cursor to 4lock screensetToolkitMovieLayer newLayersetMovieLayerOnCard newLayerwriteButtonScriptunlock screenend ifend setMovieLayer------------------------------------ For controls on this card:----------------------------------on setWindowStyleOnCard windowStylelock screenput "windoid,tallWindoid,plain,zoom,dialog,shadow,rect,borderless" into stylesrepeat with K = 1 to the number of items of stylesset hilite of btn (item K of styles) to (windowStyle = item K of styles)end repeatunlock screenend setWindowStyleOnCardon setMovieLocOnCard movieLoclock screenput movieLoc into cd fld "WindowLoc"if movieLoc is a point then put "loc" into locButtonelse put movieLoc into locButtonset visible of cd fld "WindowLoc" to (locButton = "loc")put "card,main,largest,deepest,loc" into locsrepeat with K = 1 to the number of items of locsset hilite of btn (item K of locs) to (locButton = item K of locs)end repeatsend "update" to cd btn id 24  -- "QT Movie"unlock screenend setMovieLocOnCardon setMovieLayerOnCard layerset hilite of cd btn "floating" to (layer = "floating")set hilite of cd btn "nonFloating" to (layer = "nonFloating")end setMovieLayerOnCard------------------------------------ For translating between coord systems:----------------------------------function MiniToCard miniLoc  -- this is a point!-- use this to figure out card location from location of "mini" movie-- 'miniRect' is given relative to the card (?huh?) - the rect of the button!-- The mini-card button is conveniently 1/4 the size of the cardput (item 1 of miniLoc - left of btn "MiniCard")*4 into xput (item 2 of miniLoc - top of btn "MiniCard")*4 into yreturn x & "," & yend MiniToCardfunction CardToMini cardLoc  -- this is a point!-- use this to translate card coords to ones for the "mini" movie-- The mini-card button is conveniently 1/4 the size of the cardput (left of btn "MiniCard")+the round of ((item 1 of cardLoc)/4) into xput (top of btn "MiniCard")+the round of ((item 2 of cardLoc)/4) into yreturn x & "," & yend CardToMini                       ]@CARD  ^M      U@             fp  â & V  0z    z " V5  U                 " 9  
  <                   " ?  Ø ¹-                 " <  q  Î                 " B w  ²           
          9 N `            Toolkit  on mouseUplock screengo cd "QuickTime Toolkit" --Æunlock screen with visual dissolve fastend mouseUp  \   U Q Z@           Rate Slider Bar  on mouseUpset height of me to 5end mouseUp  &  L ! \ C        
   Rate     V   M¸½@           Slider Bar  on mouseUpset width of me to 5end mouseUp ¬  §*Ø  I?   
   Mute  on mouseUpif the hilite of me thenif cd fld "AudioLevel" is not "0" then-- Remove the minus denoting unmutedif char 1 of cd fld "AudioLevel" is "-" thenlock screendelete char 1 of cd fld "AudioLevel"delete last char of cd fld "AudioLevel"delete last char of cd fld "AudioLevel"unlock screenend ifset hilite of me to falsewriteMuteCmdend ifelseif cd fld "AudioLevel" is not "0" then-- Put a minus before the current audioLevel to denote mutinglock screenput "-" before cd fld "AudioLevel"put space & space after cd fld "AudioLevel"unlock screenset hilite of me to truewriteMuteCmdend ifend if-- if there is a movie window, update mute statusput ToolkitMovie() into TheMovieNameif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the mute of the movie to the button hiliteset mute of window TheMovieName to (hilite of me)end ifend mouseUp   b   ã » ó&à       
   badge  on mouseUpwriteBadgeCmdpropertyToggle "badge"end mouseUp      õ »&à       
   controllerVisible  on mouseUpwriteControllerVisibleCmdpropertyToggle "controllerVisible",the hilite of meend mouseUp  z !  »&        
   closeOnFinish  on mouseUpwriteCloseOnFinishCmdpropertyToggle "closeOnFinish"end mouseUp   ` "  »)&        
   loop  on mouseUpwriteLoopCmdpropertyToggle "loop"end mouseUp   v #  ã+ ó        
   seeAllFrames  on mouseUpwriteSeeAllFramesCmdpropertyToggle "seeAllFrames"end mouseUp  * ) | \  ¤        
   Duration     * *  \  ¤        
   startTime    ( +  \ ¬ ¤        
   endTime    " E  ®  É ±                 * , ´ d Ã ¬        
   currTime     Z -   À ¡@           MovieTimeLine  on mouseUpset height of me to 5end mouseUp  " M  Ø - ­                 X 3  æ  ¡        
  Reset to Defaults  on mouseUpdefaultSettingsend mouseUp B 5 ¢w º    2       CurrTimePointer  on mouseDownset cursor to arrowput ToolkitMovie() into TheMovieName--put HMSTToTicks(cd fld "Duration") into MaxTime---- The "MovieTimeLine" button provides the slider area---- Minimum horizontal travel distance allowed for the CurrTime pointerput the left of cd btn "MovieTimeLine" + 1 into MinPixDis---- Maximum horizontal travel distance allowed for the CurrTime pointerput the right of cd btn "MovieTimeLine" - 1 into MaxPixDis---- Width of Slider Bar = the total time of the movieput MaxPixDis - MinPixDis into TimeRangeput MaxTime / TimeRange into TheIncrement---- Constrain slider knob movement in the Horizontal directionput item 1 of the loc of me into SliderKnobHorzput item 2 of the loc of me into SliderKnobVert---- Track the mouse as long as the slider knob button is downrepeat while the mouse is down--put min(max(MinPixDis,the mouseH),MaxPixDis) into NewSliderHorzset loc of me to NewSliderHorz,SliderKnobVert -- New horizontal---- Set the movie CurrTime Value, minimum = 0.0, maximum = duration---- Update me to display the new movie CurrTimeput ticksToHMST(round((NewSliderHorz - MinPixDis) * TheIncrement)) into cd fld "currTime"---- if there is a movie window, update the CurrTimeif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the CurrTime of the movie to the sliders positionset currTime of window TheMovieName to cd fld "CurrTime"end if--end repeat--end mouseDownon mouseUpwriteCurrTimeCmdend mouseUpon mouseLeavewriteCurrTimeCmdend mouseLeave   , >  Ñ ¿ Þ       
  Properties     , @  7£ Dë       
  AudioLevel     & A  6  B >       
  Rate     & C  k  x B       
  Time    Ì D  ²  Ç         
   currTime  on mouseUpif the hilite of me thenput the loc of cd btn "CurrTimePointer" into BtnLocput 1+the left of cd btn "MovieTimeLine" into item 1 of BtnLocset loc of cd btn "CurrTimePointer" to BtnLocput zero into cd fld "CurrTime"writeCurrTimeCmdelseput empty into line 10 of bg fld "Toolkit Movie Properties"put empty into cd fld "CurrTime"end ifset visible of cd btn "CurrTimePointer" to hilite of meend mouseUp  ^ F 	 $ ¡        
  Show Movie  on mouseUpset cursor to 4put ToolkitMovie() into TheMovieNameif TheMovieName is empty thenput "You need to select a movie to use with the toolkit. " &Â"Click ÒToolkitÓ to go to the first card " &Â"of the toolkit." into AnswerString  --Æanswer AnswerStringexit mouseUpend ifif there is a window TheMovieName then close window TheMovieNameelsemovie TheMovieName,ToolkitWindowStyle(),ToolkitMovieLoc(),"invisible",Â"floating"if "Error" is in the result thenanswer "There was a problem displaying the movie."  --Æexit mouseUpend if-- if movie not found, then it may be different (highly unlikely)put ToolkitMovie() into TheMovieNameif there is a window TheMovieName thensend "movieIdle" to window TheMovieNamedo (bg fld "Toolkit Movie Properties")show window TheMovieNameend ifend ifend mouseUp  Ì H  w     2       EndTime  on mouseDownset cursor to arrowput ToolkitMovie() into TheMovieName--put HMSTToTicks(cd fld "Duration") into MaxTime---- The "MovieTimeLine" button provides the slider area---- Minimum horizontal travel distance allowed for the EndTime pointerput the left of cd btn "MovieTimeLine" + 1 into MinPixDis---- Maximum horizontal travel distance allowed for the EndTime pointerput the right of cd btn "MovieTimeLine" - 1 into MaxPixDis---- Width of Slider Bar = the total time of the movieput MaxPixDis - MinPixDis into TimeRangeput MaxTime / TimeRange into TheIncrement---- Constrain slider knob movement in the Horizontal directionput item 1 of the loc of me into SliderKnobHorzput item 2 of the loc of me into SliderKnobVertput item 1 of the loc of cd btn "StartTime" into TempHorzLimit---- Track the mouse as long as the slider knob button is downrepeat while the mouse is down--put min(max(MinPixDis,the mouseH,TempHorzLimit),MaxPixDis) into NewSliderHorzif NewSliderHorz = TempHorzLimit thenstrtEndErroradd 8 to NewSliderHorzend ifset loc of me to NewSliderHorz,SliderKnobVert -- New horizontal---- Set the movie EndTime Value, minimum = 0.0, maximum = duration---- Update me to display the new movie EndTimeput ticksToHMST(round((NewSliderHorz - MinPixDis) * TheIncrement)) into cd fld "EndTime"---- if there is a movie window, update the EndTimeif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the EndTime of the movie to the sliders positionset endTime of window TheMovieName to cd fld "EndTime"end if--end repeat--end mouseDownon mouseUpwriteEndTimeCmdend mouseUpon mouseLeavewriteEndTimeCmdend mouseLeave  è G   ¹  Ê    2       StartTime  on mouseDownset cursor to arrowput ToolkitMovie() into TheMovieName--put HMSTToTicks(cd fld "Duration") into MaxTime---- The "MovieTimeLine" button provides the slider area---- Minimum horizontal travel distance allowed for the StartTime pointerput the left of cd btn "MovieTimeLine" + 1 into MinPixDis---- Maximum horizontal travel distance allowed for the StartTime pointerput the right of cd btn "MovieTimeLine" - 1 into MaxPixDis---- Width of Slider Bar = the total time of the movieput MaxPixDis - MinPixDis into TimeRangeput MaxTime / TimeRange into TheIncrement---- Constrain slider knob movement in the Horizontal directionput item 1 of the loc of me into SliderKnobHorzput item 2 of the loc of me into SliderKnobVertput item 1 of the loc of cd btn "EndTime" into TempHorzLimit---- Track the mouse as long as the slider knob button is downrepeat while the mouse is down--put min(max(MinPixDis,the mouseH),MaxPixDis,TempHorzLimit) into NewSliderHorzif NewSliderHorz = TempHorzLimit thenstrtEndErrorsubtract 8 from NewSliderHorzend ifset loc of me to NewSliderHorz,SliderKnobVert -- New horizontal---- Set the movie StartTime Value, minimum = 0.0, maximum = duration---- Update me to display the new movie StartTimeput ticksToHMST(round((NewSliderHorz - MinPixDis) * TheIncrement)) into cd fld "StartTime"---- if there is a movie window, update the startTimeif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the StartTime of the movie to the sliders positionset startTime of window TheMovieName to cd fld "StartTime"end if--end repeat--end mouseDownon mouseUpwriteStartTimeCmdend mouseUpon mouseLeavewriteStartTimeCmdend mouseLeave H   P _            RateKnob  on mouseDownset cursor to arrowput ToolkitMovie() into TheMovieNameput the numberFormat into SaveFormat---- The slider bar button provides the slider area---- Minimum horizontal travel distance allowed for the slider knobput the left of cd btn "Rate Slider Bar" into MinPixDis---- Maximum horizontal travel distance allowed for the slider knobput the right of cd btn "Rate Slider Bar" into MaxPixDis---- Width of Slider Bar = the rate range of the movieput MaxPixDis - MinPixDis into RateRange---- Constrain slider knob movement in the Horizontal directionput item 1 of the loc of cd btn "Rate Slider Bar" into SliderKnobHorzput item 2 of the loc of cd btn "Rate Slider Bar" into SliderKnobVert---- Track the mouse as long as the slider knob button is downset numberFormat to "0.0" -- Display up to 1 decimal placerepeat while the mouse is downput min(max(MinPixDis,the mouseH),MaxPixDis) into NewSliderHorzset loc of me to NewSliderHorz,SliderKnobVert---- Set the movie Rate Value, minimum = -5.0, maximum = 5.0-- Update me to display the new movie rateput Â(round(200 * ((NewSliderHorz - MinPixDis) / RateRange)) - 100) / 20 Âinto cd fld "Rate"---- if there is a movie window, set it to the updated rateif there is a window TheMovieName thensend "movieIdle" to window TheMovieName-- Set the rate of the movie to the sliders positionset rate of window TheMovieName to cd fld "Rate"end ifend repeat--set numberFormat to SaveFormatend mouseDownon mouseUpwriteRateCmdend mouseUpon mouseLeavewriteRateCmdend mouseLeave    F§ TÎ        
   AudioLevel  on mouseDownset cursor to arrowput ToolkitMovie() into TheMovieName---- The slider bar button provides the slider area---- Minimum vertical travel distance allowed for the slider knobput the top of cd btn "Slider Bar" into MinPixDis---- Maximum vertical travel distance allowed for the slider knobput the bottom of cd btn "Slider Bar" into MaxPixDis---- Height of Slider Bar = the Volume range of the movieput MaxPixDis - MinPixDis into VolRange---- Constrain slider knob movement in the Horizontal directionput item 1 of the loc of cd btn "Slider Bar" into SliderKnobHoriz---- Track the slider knob as long as the mouse button is downrepeat while the mouse is down-- Unmute if adjusting with sliderset hilite of cd btn "Mute" to false --Æ--put min(max(MinPixDis,the mouseV), MaxPixDis) into SliderKnobVertset loc of me to SliderKnobHoriz,SliderKnobVert -- New vertical--put round(256 * ((MaxPixDis - SliderKnobVert) / VolRange)) Âinto NewAudioLevel -- New audioLevel-- Update me to display the new audio valueput NewAudioLevel into line 1 of me---- Update the movies volumeif there is a window TheMovieName thenset audioLevel of window TheMovieName to NewAudioLevelsend "movieIdle" to window TheMovieNameend ifend repeatend mouseDownon mouseUpwriteAudioLevelCmdend mouseUpon mouseLeavewriteAudioLevelCmdend mouseLeave   * N  Ñ  Þ W       
  Controls     n S  õ+        
   dontErase  on mouseUpwriteDontEraseCmdpropertyToggle "dontErase"end mouseUp   j T +        
   fastIdle  on mouseUpwriteFastIdleCmdpropertyToggle "fastIdle"end mouseUp  J Q 2 	/õ             Cover  on mouseUpwarnNoToolkitend mouseUp    Advanced Options  .  QuickTime ToolkitÿÖ  0ÿÕ  6,13.9 ÿ¾  durationstartTimeendTime ÿå  256ÿø  1.0ÿ×  6,13.9 Advanced Options °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°Card id 24141: Advanced OptionsTHE MESSAGE HANDLERS DEFINED IN THIS SCRIPT:openCard,closeCard,updateToolkitCard,setCardDefaults,setBooleanDefaults,setAudioDefaults,setRateDefault,setTimeDefaults,defaultSettings,setUpOptions,propertyToggle,strtEndError,setAudio,setRate,setStartEndAndCurrTime,zeroCurrTime,openMovie,closeMovieSee programming notes at end of script.°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°on openCardtoolkitOpenCardpass openCardend openCardon closeCardcloseToolkitWindowspass closeCardend closeCardon updateToolkitCard  -- called at end of openCard chainif ToolkitMovie() is empty then exit updateToolkitCard  -- in case!if fld "Toolkit Movie Properties" is empty thensetCardDefaults  -- set defaultssetUpOptions  -- fills in "Toolkit Movie Properties"else-- check out time propertiesput ToolkitMovieInfo() into ListOfMovieDataput line 4 of ListOfMovieData into TheDurationif TheDuration ­ cd fld "Duration" then setTimeDefaultsend ifend updateToolkitCardon setCardDefaultslock screensetBooleanDefaultssetAudioDefaultssetRateDefaultsetTimeDefaultsunlock screenend setCardDefaultson setBooleanDefaultsset hilite of btn "badge" to trueset hilite of btn "controllerVisible" to trueset hilite of btn "closeOnFinish" to falseset hilite of btn "loop" to falseset hilite of btn "seeAllFrames" to falseset hilite of btn "dontErase" to falseset hilite of btn "fastIdle" to falseend setBooleanDefaultson setAudioDefaultsput ToolkitMovieInfo() into ListOfMovieDatasetAudio (line 2 of ListOfMovieData)set hilite of cd btn "Mute" to falseend setAudioDefaultson setRateDefaultput ToolkitMovieInfo() into ListOfMovieDatasetRate (line 3 of ListOfMovieData)end setRateDefaulton setTimeDefaultsput ToolkitMovieInfo() into ListOfMovieData--Durationput line 4 of ListOfMovieData into TheDurationif TheDuration is empty then put zero into TheDurationput TheDuration into cd fld "Duration"--StartTime, EndTime, And CurrTimesetStartEndAndCurrTime ToolkitMovie(),"0",cd fld "Duration","0" --Æend setTimeDefaultson defaultSettingsset cursor to 4setCardDefaultssetUpOptions-- if there is a movie window, update status of the propertyput ToolkitMovie() into TheMovieNameif there is a window TheMovieName thensend "movieIdle" to window TheMovieNamedo (bg fld "Toolkit Movie Properties")end ifend defaultSettingson setUpOptionsput return into CRput quote into Qput ToolkitMovieRate() into rateput "set audioLevel of window TheMovieName to" && Q & "256" & Q & CR & Â"set mute of window TheMovieName to false" & CR & Â"set badge of window TheMovieName to true" & CR & Â"set controllerVisible of window TheMovieName to true" & CR & Â"set closeOnFinish of window TheMovieName to false" & CR & Â"set loop of window TheMovieName to false" & CR & Â"set seeAllFrames of window TheMovieName to false" & CR & Â"set startTime of window TheMovieName to" && Q & "0" & Q & CR & Â"set endTime of window TheMovieName to" && Q & cd fld "Duration" & Q & CR & CR &Â"set dontErase of window TheMovieName to false" & CR & Â"set fastIdle of window TheMovieName to false" & CR & Â"set rate of window TheMovieName to" && Q & rate & Q Âinto bg fld "Toolkit Movie Properties" --Æ--if the hilite of cd btn "currTime" thenwriteCurrTimeCmdend ifend setUpOptionson propertyToggle ThePropertyput ToolkitMovie() into TheMovieName-- if there is a movie window, update status of the propertyif there is a window TheMovieName thensend "movieIdle" to window TheMovieNameset (TheProperty) of window TheMovieName to (hilite of btn TheProperty)end ifend propertyToggleon strtEndErroranswer "The endTime cannot be less than the startTime." && Â"Please reset the endTime or startTime!" --Æend strtEndErroron setAudio TheNewAudioLevel-- Called when movie is first opened, to show audioLevel of the movie--if TheNewAudioLevel is empty then put "256" into TheNewAudioLevelput TheNewAudioLevel into cd fld "AudioLevel"-- Maximum vertical travel distance allowed for the slider knobput the bottom of cd btn "Slider Bar" into MaxPixDisput round(height of cd btn "Slider Bar" / (256 / TheNewAudioLevel)) Âinto OffsetAmountput MaxPixDis - OffsetAmount into NewDirLocput item 1 of the loc of cd fld "AudioLevel" into SliderKnobHorizLocset loc of cd fld "AudioLevel" to SliderKnobHorizLoc,NewDirLocend setAudioon setRate TheNewRate-- Called when movie is first opened, to show rate of the movieif TheNewRate is empty then put 1 into TheNewRateadd zero to TheNewRateif TheNewRate is an integer thenput TheNewRate & ".0" into cd fld "Rate"else put TheNewRate into cd fld "Rate"add 5 to TheNewRate-- Minimum horizontal travel distance allowed for the slider knobput the left of cd btn "Rate Slider Bar" into MinPixDis-- Maximum range of travel allowed for the slider knobput (the width of cd btn "Rate Slider Bar")/10 into Incrementput round(Increment * TheNewRate) into OffsetAmountput MinPixDis + OffsetAmount into NewDirLocput item 2 of the loc of cd btn "RateKnob" into SliderKnobVertLocset loc of cd btn "RateKnob" to NewDirLoc,SliderKnobVertLocend setRateon setStartEndAndCurrTime TheMovieName,TheStartTime,TheEndTime,TheCurrTime-- Called when movie is first opened, to set movie valuesput HMSTToTicks(cd fld "Duration") into MaxTime-- Minimum horizontal travel distance allowed for the pointersput the left of cd btn "MovieTimeLine" into MinPixDis-- The travel per increment for the pointersput (the width of cd btn "MovieTimeLine"-2)/MaxTime into Increment-- Set the StartTime field and pointerif (TheStartTime is empty) and (there is a window TheMovieName) thenput the startTime of window TheMovieName into TheStartTimeelse put zero into TheStartTimeput TheStartTime into cd fld "StartTime"put quote & TheStartTime & quote into word 7 of line 8 of bg fld "Toolkit Movie Properties"put HMSTToTicks(TheStartTime) into TheStartTimeput trunc(Increment * TheStartTime) into OffsetAmountput MinPixDis + OffsetAmount + 1 into NewDirLocput item 2 of the loc of cd btn "StartTime" into SliderKnobVertLocset loc of cd btn "StartTime" to NewDirLoc,SliderKnobVertLoc-- Set the EndTime field and pointerif TheEndTime is zero thenif there is a window TheMovieName then put the endTime of window TheMovieName into TheEndTimeelse put the right of cd btn "MovieTimeLine" -1 into NewDirLocput TheEndTime into cd fld "EndTime"elseput TheEndTime into cd fld "EndTime"put quote & TheEndTime & quote into word 7 of line 9 of Âbg fld "Toolkit Movie Properties"put HMSTToTicks(TheEndTime) into TheEndTimeput trunc(Increment * TheEndTime) into OffsetAmountput MinPixDis + OffsetAmount + 1 into NewDirLocend ifput item 2 of the loc of cd btn "EndTime" into SliderKnobVertLocset loc of cd btn "EndTime" to NewDirLoc,SliderKnobVertLoc-- Set the CurrTime field and pointerif (TheCurrTime is empty) and (there is a window TheMovieName) Âthen put the currTime of window TheMovieName into TheCurrTimeif (TheCurrTime > 0) thenset hilite of cd btn "CurrTime" to true --Æput TheCurrTime into cd fld "CurrTime"put "set currTime of window TheMovieName to" && quote & ÂTheCurrTime & quote into line 11 of bg fld "Toolkit Movie Properties"put HMSTToTicks(TheCurrTime) into TheCurrTimeput trunc(Increment * TheCurrTime) into OffsetAmountput MinPixDis + OffsetAmount + 1 into NewDirLocput item 2 of the loc of cd btn "CurrTimePointer" into ÂSliderKnobVertLocset loc of cd btn "CurrTimePointer" to NewDirLoc,SliderKnobVertLocshow cd btn "CurrTimePointer"--else zeroCurrTimeend setStartEndAndCurrTimeon zeroCurrTimehide cd btn "CurrTimePointer"set hilite of cd btn "CurrTime" to falseput empty into cd fld "CurrTime"end zeroCurrTimefunction ToolkitMovieRatereturn line 3 of fld "Toolkit MovieInfo"end ToolkitMovieRateon writeAudioLevelCmdput quote & (line 1 of cd fld "AudioLevel") & quote into word 7 of line 1Âof bg fld "Toolkit Movie Properties"end writeAudioLevelCmdon writeMuteCmdput hilite of btn "Mute" into word 7 of line 2 of bg fld "Toolkit Movie Properties"end writeMuteCmdon writeBadgeCmdput hilite of btn "badge" into word 7 of line 3 of bg fld "Toolkit Movie Properties"end writeBadgeCmdon writeControllerVisibleCmdput hilite of btn "controllerVisible" into word 7 of line 4 of bg fld "Toolkit Movie Properties"end writeControllerVisibleCmdon writeCloseOnFinishCmdput hilite of btn "closeOnFinish" into word 7 of line 5 of bg fld "Toolkit Movie Properties"end writeCloseOnFinishCmdon writeLoopCmdput hilite of btn "Loop" into word 7 of line 6 of bg fld "Toolkit Movie Properties"end writeLoopCmdon writeSeeAllFramesCmdput hilite of btn "seeAllFrames" into word 7 of line 7 of bg fld "Toolkit Movie Properties"end writeSeeAllFramesCmdon writeStartTimeCmdput quote & cd fld "StartTime" & quote into word 7 of line 8Âof bg fld "Toolkit Movie Properties"end writeStartTimeCmdon writeEndTimeCmdput quote & cd fld "EndTime" & quote into word 7 of line 9Âof bg fld "Toolkit Movie Properties"end writeEndTimeCmdon writeCurrTimeCmdput "set currTime of window TheMovieName to" && quote & Âcd fld "CurrTime" & quote Âinto line 10 of bg fld "Toolkit Movie Properties"end writeCurrTimeCmdon writeDontEraseCmdput hilite of btn "dontErase" into word 7 of line 11 of bg fld "Toolkit Movie Properties"end writeDontEraseCmdon writeFastIdleCmdput hilite of btn "fastIdle" into word 7 of line 12 of bg fld "Toolkit Movie Properties"end writeFastIdleCmdon writeRateCmdput quote & cd fld "Rate" & quote into word 7 of line 13Âof bg fld "Toolkit Movie Properties"end writeRateCmdon openMovie WindowName,WindowIDput ToolkitMovie() into TheMovieNameif TheMovieName is empty thenset cursor to 4put WindowName into TheMovieNameresetToolkitParams TheMovieNameput movieInfo(theMovieName) into fld "Toolkit MovieInfo"put empty into fld "Toolkit Movie Properties"setCardDefaultssetUpOptionsset name of cd btn id 70 to "Hide Movie" --Æelse if WindowName is TheMovieName thenset name of cd btn id 70 to "Hide Movie" --Æend ifend openMovieon closeMovie WindowName,WindowIDif WindowName is (ToolkitMovie()) then Âset name of cd btn id 70 to "Show Movie" --Æend closeMovie-------------------------------------------------------------------------- This card: Whenever a setting is changed, we change the script-- in field "Toolkit Movie Properties". If the movie is displayed, the-- changed property is changed for the movie.---- Format of properties script (line# & corresp. property):-- (1)  audioLevel-- (2)  mute-- (3)  badge-- (4)  controllerVisible-- (5)  closeOnFinish-- (6)  loop-- (7)  seeAllFrames-- (8)  startTime-- (9)  endTime-- (10) currTime-- (11) dontErase-- (12) fastIdle-- (13) rate---- movieInfo:-- 1: <movie rect> is the rectangle of the movie.-- 2: <preferred volume> is the default volume of the movie.-- 3: <preferred rate> is the default rate of the movie.-- 4: <duration> is the length of the movie (expressed in the ÒSystem TimeÓ format).------------------------------------------------------------------------            BMAP  U               V  1 4ù 1 4ù              °ã@ã§0 â? 8 À0  â? 8 ¤)ð "8@"À"À>`DÀ"  À#áà"`"Yñð ãb À"À0>ðbáÐ "+á#Ð= )ð&|&à"À>0  â? 8 ã:ã:Çã: ã+Çã:ãã*ã:Ï0  â? 8 ±ã:ã:Ä0 â? ÀVc ÀãV ãe ãe ãe ãeÂ ã8 ³ãe> ãe ãe ãe ãe ãe" ãe ã8 ²ãe0 ãe@ ãe ãe$ð ãeD ãe~ ãe ãep ã8 ³ãe ãe" ãe" ¤ãe ã8 ³ãeÏ ãVA  ãVB  ãV  ãV ãe  ãe ãe  ã8 ³ãeÏ ãV ãe  ãe  ãVA  ãVB  ãeB  ãe  ã8 ³ãe  ãe@  ¥ãe  ã8 ¸ã$ÿÿÁÿÿÿÿÿÿÿüã¦ã@   ÿÿÿÿÿÿÿ   CARD  @)      9ù              fp  â    Ì    ¶ " '  P                 "  / 	 ]ö         
        "  M#î                 8  Væ       
  Window Style Selected:     , W!å@         
   WindowStyle      9 N `            Toolkit  on mouseUplock screengo cd "QuickTime Toolkit" --Æunlock screen with visual dissolve fastend mouseUp P   #F        
   Show Window: Simple Movie  on mouseUpset cursor to 4put ToolkitMovie() into TheMovieNameif TheMovieName is empty thenput "You need to select a movie to use with the toolkit. " &Â"Click ÒToolkitÓ to go to the first card of " &Â"of the toolkit." into AnswerString  --Æanswer AnswerStringexit mouseUpend ifif there is a window TheMovieName then close window TheMovieNameelsemovie TheMovieName,ToolkitWindowStyle(),ToolkitMovieLoc(),Â"invisible","floating"if the result is not empty thenif "Error" is in the result thenanswer the result  --Æend ifexit mouseUpend ifput ToolkitMovie() into TheMovieNameif there is a window TheMovieName then  -- should always be truesend "movieIdle" to window TheMovieNamedo (bg fld "Toolkit Movie Properties")show window TheMovieNameend ifend ifend mouseUp   P   c J £ @            windoid  on mouseUpselectWindowStyleend mouseUp  N   d  £X             plain  on mouseUpselectWindowStyleend mouseUp  N   de £Î             zoom  on mouseUpselectWindowStyleend mouseUp   P   ± O ó              dialog  on mouseUpselectWindowStyleend mouseUp   P   ± ¨ ó ñ             shadow  on mouseUpselectWindowStyleend mouseUp   N   ± ôQ             rect  on mouseUpselectWindowStyleend mouseUp   T   °u ó¾             borderless  on mouseUpselectWindowStyleend mouseUp   T   d ¥ £ ô             tallWindoid  on mouseUpselectWindowStyleend mouseUp  J  ) 	&õ             Cover  on mouseUpwarnNoToolkitend mouseUp  T 9Nº   .á       Next  on mouseUpvisual wipe leftgo nextend mouseUp    Window Stylesÿÿ }
     Instructions:Please click on any of the window styles below, to select the window to display your QuickTime Movie.  .  QuickTime Toolkitÿý  windoidWindow Styles °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°Card id 16425: Window StylesTHE MESSAGE HANDLERS DEFINED IN THIS SCRIPT:openCard,updateToolkitCard,closeCard,setWindowStyleOnCard,selectWindowStyle,openMovie,closeMovie°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°on openCardtoolkitOpenCardpass openCardend openCardon updateToolkitCard  -- called at end of openCard chain-- we just need to make sure the card agrees with the global infoput ToolkitWindowStyle() into windowStylesetWindowStyleOnCard windowStyle-- update name of Show Movie buttonput ToolkitMovie() into TheMovieNameset name of cd btn id 16 to "Show Window:" && TheMovieName --Æend updateToolkitCardon closeCardcloseToolkitWindowspass closeCardend closeCardon setWindowStyleOnCard WindowStylelock screenrepeat with BtnCounter = 19 to 26set hilite of cd btn id BtnCounter to falseend repeatif windowStyle is empty then put "windoid" into WindowStyleset hilite of cd btn WindowStyle to trueput WindowStyle into cd fld "WindowStyle"unlock screenend setWindowStyleOnCardon selectWindowStyle  -- called by handlers in 'window style' buttonsset cursor to 4put the short name of the target into WindowStylesetToolkitWindowStyle WindowStylesetWindowStyleOnCard WindowStyleend selectWindowStyleon openMovie WindowName,WindowIDput ToolkitMovie() into TheMovieNameif TheMovieName is empty thenset cursor to 4put WindowName into TheMovieNameput ToolkitWindowStyle() into WindowStyle  -- save itresetToolkitParams TheMovieNameput movieInfo(theMovieName) into fld "Toolkit MovieInfo"put empty into fld "Toolkit Movie Properties"setToolkitWindowStyle WindowStylesetWindowStyleOnCard WindowStyleset name of cd btn id 16 to "Hide Window:" && TheMovieName --Æelse if WindowName is TheMovieName thenset name of cd btn id 16 to "Hide Window:" && TheMovieName --Æend ifend openMovieon closeMovie WindowName,WindowIDput ToolkitMovie() into TheMovieNameif WindowName is TheMovieNamethen set name of cd btn id 16 to "Show Window:" && TheMovieName --Æend closeMovie                        BMAP  9ù               V  Q  0  a H öÑ              ¬1ÿÿÿÁÿÿÿÿÿÿÿàâÀ)0)+ - )0)+@!àÿ . !ÁÁ$I$I ~â	!Àyü óÀ"àá*~ Âø$3 $À üðCø?øBÿàÀcàÿàÿàÁ$I$I rø 4%u û" b  ìFC  ~$ $#ø2`1"ðbÀ ÆC}ÀÀ.$R$ÀsðLøvÀ0<à!ÁÁ$I$I ~'x  ð6 f$À! #$R$À6L90Zaá$I$ÂI ÿ ø$ $À|9ÀróÞþà ('à[ /#&@ #ázð ,øvÀ °^àI 2{ýþ"r`0 ï÷øB`0`0Ø8¨)+P<@ -ÿÿÁÿÿÿÿÿÿÿá£áá @¥á0Àâá!âá Àâá àâá ÀâE@â5@ (ÀâTÇÌ`7ä@âE¹èàâÖá7 áá< á|á7pá69ààG 88=:yvT(DÄp7  8;sÞ?_Acf08
á@AÜôpá05?ÿk,88`
á<1*;Þ4ÿà>á9yIá1ðp@á_"Nb8âãããã3ã f@ã ÌÀã ã3ã&á ) 
ãØ8¨)+P<@ !ÿÁÿÿÿÿÿÿÿþâ	)0)+`< ))+-@ Àá¨â&UÁUUUUUUUU) 9 á)@9    â¢Áÿÿÿÿÿÿÿðâ	âÁÿÿÿÿÿÿÿÀâ	âµâv    0%)@ %á/ ÁÅÅ`Ed2àV1d8c(y&!&REH% V
P8iá¹!@pX°8`TàÎp"°8LÀð"à)' Áà9àÞðEàp=ÀVóà)çy%$%$R!U  0`90  áàáÀáâ³ÁÿÿÿÿÿÿÿÀâ	âÁÿÿÿÿÿÿÿðâ	â¢9`09 8 áí	-	/		@ê
r	,	*	=	
o  `CARD  ßþ        @             fp             !     This read-only sprite track property is set by a movieÕs author to indicate to QuickTime that the sprites in a track have actions. This flag should be set to false if there are no sprite actions for a given track. Doing so will optimize movie playback and interaction.If this property is true the movie controller will execute sprite actions. If it is not true, no actions will be executed even if they exist. You can use it to infer, but not be certain, that there are sprite actions in a given track. See also idleFrequency.     actionsEnabled   @ get [the] actionsEnabled of <sprite track> of <movie reference>  H put the actionsEnabled of sprite track 1 of movie 2 into spritesWillAct   Properties   ! windoidcardinvisiblefloating    sprite track actionsEnabled             CARD  §u        @             fp                The allowBalloonHelp property specifies whether System Help balloons will appear for a movie window when balloon help is turned on.     allowBalloonHelp   F get|set [the] allowBalloonHelp of <movie reference> [to <true|false>]  _ get the allowBalloonHelp of movie 1set the allowBalloonHelp of movie "My Home Movie" to false    Properties    Sample Movie   ! windoidcardinvisiblefloating    movieallowBalloonHelp                             CARD  ÏC        @             fp             Þ "     w  @ D P T backColor of movie windowSometimes a movieÕs rect (rectangle) is smaller than the rect of the window that contains that movie. When this occurs, there is an area inside of the window which does not intersect with the movieÕs area. The backColor property specifies the color that is used to fill this area. This property is specified as an RGB value - three integers from 0 to 65535 representing the red, green, and blue components of the color. If any of the components is less than 0 or greater than  65535, the value is automatically limited to 0 or 65535, respectively. The default value is white ("65535, 65535, 65535"). backColor of sprite trackThe backColor of a sprite track is the color that appears around any visible sprite in that track. The default value for that color is set by the movieÕs author. See also: rect of window, rect of movie.    
 backColor  O get|set [the] backColor of (<sprite track>|<movie reference>) [to <RGB Color>]    set the backColor of window "My Home Movie" to "65000,1000,100" --redput the backColor of first sprite track of movie 1 into ThatColor   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    window, sprite track backColor      CARD  Áú        @             fp           	  à ¸     The badge property controls a small icon or ÒbadgeÓ which is shown in the lower left corner of the QuickTime movie. If the badge property is true, the badge icon is shown when the controller is hidden (when controllerVisible is false). As long as the passMovieClick property is true, clicking the badge icon shows the controller and hides the badge icon.The default value for badge is true.See also: visible of controller.   badge  ; get|set [the] badge of <movie reference> [to <true|false>]   _ set the badge of movie "Test Movie" to trueput the badge of movie "Test Movie" into BadgeMode    Properties    BabyCha w Controller    badge & controller Demo  ! windoidcardinvisiblefloating    moviebadge       CARD  Ä        @             fp      h   l " 
 0 6ö         
        "   Ý  ô "          3    "   p              1    "   ¦  ½ "          2    0   W7 ÷À             Movie Location     ^   o '  Ë        
   Show Movie  on mouseUpset cursor to 4ShowHideDemoend mouseUp    ¦ ' ¼ Ë        
   Show/Hide Controller  on mouseUpif DemoMovieDisplayed() thenput GetDemo() into demoMovieName-- Show or hide the controller.set controllerVisible of window demoMovieName Âto not the controllerVisible of window demoMovieNameend ifend mouseUp  ö   Ü W ó ~à       
   ON  on mouseUpput GetDemo() into demoMovieNameset hilite of me to trueset hilite of cd btn "OFF" to false --Æif there is a window demoMovieName thenset badge of window demoMovieName to trueend ifend mouseUp  ø   Ü ~ ó «        
   OFF  on mouseUpput GetDemo() into demoMovieNameset hilite of me to trueset hilite of cd btn "ON" to false --Æif there is a window demoMovieName thenset badge of window demoMovieName to falseend ifend mouseUp   ( 	  Ü * ó W     ÿÿ  
   Badge:     & 0 S»            mask       Badge & Controller Demo  ! windoidcardinvisiblefloating ÿö
     Instructions: Click the button ÒShow MovieÓ to display a sample QuickTime movie. Use the controls below to investigate the controllerVisible and badge properties.Note: Changes to the badge property will be visible only when the controller is hidden.    QTSample.mov badge & controller Demo on ShowDemoMovieset cursor to 4-- Locate the movie in the cd btnput the topLeft of cd btn "Movie Location" into MyMovieLoccallMovieXCMD GetDemo(),"rect",MyMovieLoc,"Invisible"if the result is false then return falseput GetDemo() into demoMovieNameset controllerVisible of window demoMovieName to falseset badge of window demoMovieName to hilite of cd btn "ON" --Æsend "showPoster" to movie 1set scale of movie 1 to "1,1"send "resizeToMovie" to movie 1show window demoMovieNamereturn trueend ShowDemoMovieon closeMoviesend mouseUp to cd btn "ON" --Æpass closeMovieend closeMovie        ÀCARD  2                      fp            l   bottom   ( set|get [the] bottom of [<movie object>  [ set the bottom of movie 1 to 200put the bottom of text track 1 of movie 1 into SaveBottom   0 window, movie, visual track, sprite, controller     ¼  Û The bottom property returns or sets an integer equal to item 4 of an objectÕs rectangle. If you set the bottom of an object, it moves vertically. The size of the object remains the same.Object             Relative tomovie window       card windowmovie                    movie windowtracks                   moviesprites                  moviecontroller             movie window (read-only)bottom                          `CARD                        fp                 bottomRight, botRight  P set|get [the] bottomRight of [<movie object> of] <movie reference> [to <point>]  c set the bottomRight of movie 1 to 400,410get the bottomRight of sprite 1 of this scene of movie 2   0 window, movie, visual track, sprite, controller ñ    0 This property describes the bottom right of the specified movie or movie object. Changing the bottomRight (or botRight) of an object does not change its rectangle, but moves the entire object so that the bottom right corner is relative to an object, as indicated below:  Object             Relative tomovie window       card windowmovie                    movie windowtracks                   moviesprites                  moviecontroller             movie window (read-only) bottomRight                                 @CARD  ÖF        @             fp           	  Þ    f r The callBackMsg property is the message sent by the movie when the movie time is greater than the time specified in the callBackTime property. The callBackMsg can be set to any valid HyperTalk message or statement. The message is sent to the current card. By default the callBackMsg is empty, which sends no message. Callback scripts may be difficult to debug. If your handler seems to terminate early for no apparent reason, there may be a script error in it. So, before using your callback handler as a callback message, test the handler by itself (for instance, execute it from the message box). See also callBackTime.    callBackMsg  J get|set [the] callBackMsg of <movie reference> [to <HyperTalk statement>]  w set the callBackMsg of movie "My Home Movie" to "beep"set the callBackMsg of movie "My Home Movie" to "SetUpPictures"    Properties    BabyCha w Controller     callBackTime & callBackMsg Demo  ! windoidcardinvisiblefloating    moviecallBackMsg                                   @CARD  ÕÉ        @             fp           	  ì Ð.    j  u  $ _ i      The callBackTime property specifies the time at which the QuickTime movie sends the message stored in the callBackMsg property. When the movie time is greater than the callBackTime, the statement stored in the callBackMsg property is sent. The default value for callBackTime is the duration of the movie. The format of <time> is determined by the timeFormat property. See also callBackMsg, callBackWhenDragging.    callBackTime   < get|set [the] callBackTime of <movie reference> [to <time>]  C set callBackTime of movie "My Home Movie" to "1,0" -- "SystemTime"    Properties    BabyCha w Controller     callBackTime & callBackMsg Demo  ! windoidcardinvisiblefloating    moviecallBackTime                     CARD  Ø»        @             fp           "  / 4ö         
        "                 1    "   Í  ä "          2    ^    '  Ë        
   Show Movie  on mouseUpset cursor to 4ShowHideDemoend mouseUp æ   Í ) ã Í        
   Play Movie with callBackTime  on mouseUpif DemoMovieDisplayed() thenput GetDemo() into demoMovieNameset loop of window demoMovieName to "true"-- Changing format makes it easier to divideset timeFormat of window demoMovieName to "movieTime"-- Trigger handler half way into movieput (duration of window demoMovieName) DIV 2 into HalfMovieTime-- card script contains flashAndBeep handlerset callBackMsg of window demoMovieName to emptyset currTime of window demoMovieName to 0send "play" to window demoMovieNameset controllerVisible of window demoMovieName to trueset callBackMsg of window demoMovieName to "flashAndBeep"set callBackTime of window demoMovieName to HalfMovieTimeend ifend mouseUp  0   ^$¯             Movie Location     & 0 S»            mask        callBackTime & callBackMsg Demo  ! windoidcardinvisiblefloating ÿÿ ³
     Instructions: Click the button ÒShow MovieÓ to display the sample QuickTime movie. Click the button ÒPlay Movie with callBackTimeÓ and observe the callBackTime example.    QTSample.mov callBackTime & callBackMsg Demo on ShowDemoMovieset cursor to 4-- Locate the movie in the cd btnput (the topLeft of cd btn "Movie Location") into MyMovieLoccallMovieXCMD GetDemo(),"rect",MyMovieLoc,"invisible"if the result is false then return falseput GetDemo() into demoMovieNameset controllerVisible of window demoMovieName to falseshow window demoMovieNamereturn trueend ShowDemoMovieon flashAndBeepflashbeepend flashAndBeep                          ÀCARD  ×e        @             fp             b     à  ë  í  ù The callBackWhenDragging is a Boolean property which determines whether or not callbacks are sent while the user is dragging the slider of the movie controller.The default value for callBackWhenDragging is true.See also callBackMsg, callBackTime.     callBackWhenDragging   J get|set [the] callBackWhenDragging of <movie reference> [to< true|false>]   set the callBackWhenDragging of movie "Home Movie" to trueput the callBackWhenDragging of movie "My Killer Movie" into DraggingFlag    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviecallBackWhenDragging                      `CARD  :ä                      fp             ü   characteristics  : get [the] characteristics of <track> of <movie reference>  t put the characteristics of track 1 of movie "Fred" into theListget the characteristics of audio track 2 of movie 1   track # This property specifies the characteristics of the media in the track. The value can be ÒaudioÓ and/or ÒvisualÓ. The properties of a track depend partly on its characteristics, for instance a track will only have a ÒsoundVolumeÓ property if its ÒcharacteristicsÓ property includes ÒaudioÓ.  characteristics                                 àCARD  Æ        @             fp              Y   + 3 5 A The movie will automatically close when it reaches the end (duration) if the closeOnFinish property is true.  If closeOnFinish is false, the movie will not automatically close.The default value is false.Note: The closeOnFinish property is ignored if the seeAllFrames property is true.See also duration, seeAllFrames.     closeOnFinish  C get|set [the] closeOnFinish of <movie reference> [to <true|false>]   w set the closeOnFinish of movie "My Home Movie" to trueput the closeOnFinish of movie "My Home Movie" into ClosingFlag    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviecloseOnFinish                 @CARD  âË        @             fp             æ  Ñ      ¦ This read-only property contains a list of all of the commands that can be used on a movie object. The list is different from object to object. See the Commands Index for a list of all commands.    	 commands   < get [the] commands of [<movie object> of] <movie reference>  C get the commands of movie 1get the commands of track 3 of movie 2    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   & window, movie, track, sprite, hotspotcommands                               CARD  ¢Î        @             fp            ^  R This read-only property contains comments optionally added by the movieÕs author.  	 comments   < get [the] comments of [<movie object> of] <movie reference>  O get the comments of movie 1get the comments of hotSpot 1 of node 2 of movie 1    Properties    2.0 Demo.f3 Flat   ! windoidcardinvisiblefloating    movie, node, hotspot comments      CARD  £¥        @             fp             2  \ This read-only property contains a copyright string optionally added by the movieÕs author.  
 copyright  ) get [the] copyright of <movie reference>   8 put the copyright of movie 1 into fld "movie copyright"   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviecopyright                 ÀCARD  ðÚ        @             fp       *   : *   É ¯    Yµ       QTVR 2.0          This property contains a value that represents the ID of the current node for a VR movie.It is an error to attempt to get or set the currNodeID of a movie that is not a QuickTime VR movie.This feature requires QuickTime VR version 2.0 or later. See also ID of node.    currNodeID   @ get|set [the] currNodeID of <VR movie reference> [to <integer>]  f set the currNodeID of movie "Multi_Pano1" to 3put the currNodeID of movie "Multi_Pano1" into OldNode   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviecurrNodeID                              CARD  ­'        @             g           	  @  í    Ê  Ô The currTime property is the current time of the specified QuickTime movie.  Setting this property causes the movie to go to that time in the movie and stop. The format of <time> is determined by the timeFormat property.    	 currTime   8 get|set [the] currTime of <movie reference> [to <time>]   set currTime of movie "My Home Movie" to "2,30" -- timeFormat is "SystemTime"put the currTime of window "My Home Movie" into MovieCurrTime   Properties    BabyCha w Controller    duration & time Demo   ! windoidcardinvisiblefloating    moviecurrTime    ÀCARD  Åÿ        @             g             f K (Formerly movieCursorID)This property specifies the ID of the cursor when the mouse is within the movie window. The ID is a number that refers to ID of the cursor resource. For example, HyperCardÕs ÒhandÓ cursor is ID number 128.If you set the cursor ID to -1, the cursor will not change when the mouse is within the movie window. This feature is particularly useful for QuickTime VR movies, which change the cursor as you navigate through the movie. The default value is 0 (HyperCardÕs arrow cursor) for non-QuickTime VR movies.  The default value for QuickTime VR movies is -1.    	 cursorID   ; get|set [the] cursorID of <movie reference> [to <integer>]   i set the cursorID of movie "My Home Movie" to 129put the cursorID of movie "My Home Movie" into CursorID    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviecursorID                              ÀCARD  i                      g       &   @ &   É ¯    Yµ Ò    QTVR       defaultNodeID  0 get [the] defaultNodeID of <VR movie reference>  < put the defaultNodeID of movie "MyPanoMovie" into startHere  	 VR movie   §    y       The defaultNodeID is the ID of the node which the movie author has specified to display when the movie opens. See also currNodeID, ID of node.  defaultNodeID                         ÀCARD  ¸ò        @             g             ` [   < & $ ( - : This read-only property returns an objectÕs default rectangle, that is, the size of the object when first opened. You can use this property when resetting an object to its default size.  The following handler shows how to use a movieÕs defaultRect to restore a movie and its window to their original dimensions. on resetMovie  put the defaultRect of movie "Swallowtail Butterfly" into DefaultRect  set the rect of movie "Swallowtail Butterfly" to DefaultRect  send "resizeToMovie" to window "Swallowtail Butterfly"end resetMovieSee also: rect and resizeToMovie.      defaultRect  ? get [the] defaultRect of [<movie object> of] <movie reference>   ? put the defaultRect of movie "Magic Table" into OrigMovieSize     Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, visual trackdefaultRect                                  CARD  Ç        @             g             ²   The dontErase property controls whether or not the area of the window is erased after closing. The default value for dontErase is false.   
 dontErase  @ get|set [the] dontErase of <window reference> [to <true|false>]  o set the dontErase of window "My Home Movie" to trueput the dontErase of window "My Home Movie" into EraseFlag    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    window dontErase                 àCARD  ÔW        @             g              j    þ  The dragEnabled property specifies whether clicking and dragging in a movie invokes the Macintosh Drag Manager, allowing the user to drag a clipping of the movie to the Finder or another application. By default, dragEnabled is set to false.Note: The mouseStillDownInMovie message will not be sent from the movie window when dragEnabled is true.   dragEnabled  A get|set [the] dragEnabled of <movie reference> [to <true|false>]   d set the dragEnabled of movie "Cricket" to trueput the dragEnabled of movie "Cricket" into DragFlag   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviedragEnabled                            CARD  ¬ò        @             g           	  Ð p>        ¥  ·  ù  V g    $ & 0 The duration property specifies the length of the movie, a track, or a scene. The format of time in a specified duration is determined by the timeFormat property. Duration of movieMovie duration is equal to the maximum duration of its tracks. Duration of trackA trackÕs duration is the difference between its endTime and startTime. Duration of sceneScene duration is the difference between its endTime and startTime.  The sum of the durations of the scenes in a track is equal to the duration of the track.See also: endTime, startTime, timeFormat.   	 duration   < get [the] duration of [<movie object> of] <movie reference>   put the duration of movie "My Home Movie" into MovieDurationput the duration of scene 1 of first sprite track of movie 1 into sceneDur   Properties    BabyCha w Controller    duration & time Demo   ! windoidcardinvisiblefloating    movie, scene, trackduration                    `CARD  ®        @             g      ¶    " 
 0 2ö         
        0   dCÍ            Movie Location     "    "          3    "                1    "   Æ  Ý "          2    ^   ~ '         
   Show Movie  on mouseUpset cursor to 4ShowHideDemoend mouseUp    Ã ( Ù        
   Store Current Movie Time  on mouseUpif not DemoMovieDisplayed() then exit mouseUpput GetDemo() into demoMovieName-- Store the movies current time into a variableput currTime of window demoMovieName into MovieCurrTimeput MovieCurrTime into TempTime-- Put description for components of movie timeput "hrs,mins,secs,ticks" into TimeChoices --Æ-- Cycle through until all required choices are coveredrepeat until the number of items of TempTime = 0-- If Seconds = 1 then Second, if Ticks = 1 then Tick etcif last item of TempTime = "1" then Â --Ædelete last char of last item of TimeChoicesput space & "(" & last item of TempTime && Âlast item of TimeChoices & ")" before MovieTimeWithDescriptions-- Remove last items and test whats leftdelete last item of TempTimedelete last item of TimeChoicesend repeatput "Movie Time =" && MovieTimeWithDescriptions into Âline 1 of cd fld "CurrTime" --Æset name of cd btn id 7 to Â"Jump To Stored Movie Time =" && MovieCurrTime --Æend mouseUp     (        
   Jump To Stored Movie Time = 0  on mouseUpif not DemoMovieDisplayed() then exit mouseUpput GetDemo() into demoMovieNameset currTime of window demoMovieName to Âlast word of the short name of mesend "play" to window demoMovieNameend mouseUp   0 7Û@        
   Movie Duration     * 	! Û ( í@        
   CurrTime     & 0 S»            mask       duration & time Demo   ! windoidcardinvisiblefloating ÿø  Movie duration = 0 ÿ÷  Movie Time = 0 ÿö	
     Instructions: Click the button ÒShow MovieÓ to display a sample QuickTime movie in looped mode. Click the button ÒStore Current Movie TimeÓ to display the movie time. Click the button ÒJump To Stored Movie TimeÉÓ to make the movie go to that stored time.    QTSample.mov duration & time Demo on ShowDemoMovieset cursor to 4-- Locate the movie on the cardput (the topLeft of cd btn "Movie Location") into MyMovieLoccallMovieXCMD GetDemo(),"rect",MyMovieLoc,"invisible"if the result is false then return falseput GetDemo() into demoMovieName-- Store the movie's duration in a variableput the duration of window demoMovieName into MovieDuration-- Display the movies durationput MovieDuration into last word of line 1 of Âcd fld "Movie Duration"set loop of window demoMovieName to trueset controllerVisible of window demoMovieName to falseset badge of window demoMovieName to falseshow window demoMovieNamesend "play" to window demoMovieNamereturn trueend ShowDemoMovieon closeMovie-- Reset cardlock screenput "0" into last word of line 1 of cd fld "Movie Duration"put "Movie Time = 0" into line 1 of cd fld "CurrTime" --Æset name of cd btn id 7 to "Jump To Stored Movie Time = 0" --Æunlock screenpass closeMovieend closeMovie                CARD  à<        @             g           	  0  × This property specifies whether a track or hotspot is enabled or not. A disabled visual track (enabled = false) is hidden, a disabled sound track is silent, and a disabled hotspot does not respond to mouse clicks.     enabled  O get|set [the] enabled of <movie object> of <movie reference> [to <true|false>]   r put the enabled of track 1 of movie 1 into saveEnabledset the enabled of track 3 of movie "MyHomeMovie" to false   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    track, hotspot    Sprite Location Demo enabled                      CARD  °|        @             g          	  º <F    M  ] Ç × ; K ® ¸ Ï × Ù Ý ß è ê ô The endTime of a movie is read/write. The endTime of a track is read-only. EndTime of movieThis property specifies the time at which the movie will loop or stop playing. However, every movie has a starting and ending time that can be varied to control which segment of the movie is played.  Initially, the endTime of a movie is set to its duration. The endTime cannot be set to a time less than the startTime, nor greater than the movieÕs duration. EndTime of trackA trackÕs endTime is its startTime plus its duration.  It may be less than the movieÕs duration.EndTime of sceneA sceneÕs endTime is its startTime plus its duration.The format of <time> is determined by the timeFormat property. See also: duration, loop, startTime, timeFormat.    endTime  K get|set [the] endTime of [<movie object> of] <movie reference> [to <time>]    set endTime of movie "My Home Movie" to "3,30,45" --timeFormat is "SystemTime"put the endTime of track 1 of movie "My Home Movie" into EndTimeVariable   Properties    QTSample.mov    start, end & timeFormat Demo   ! windoidcardinvisiblefloating    movie, scene, trackendTime           ÀCARD  á8        @             g             t #.    t    ×  ç Ê Ó Õ à â ò This property specifies which QuickTime export component will be used when the movie or track is exported with the ÒexportMovieÓ command, and which options dialog will be shown when the movie or track receives the ÒshowExportDialogÓ command.  Getting the property returns the localized name of the current export component.  The property may be set with either the localized component name or the constant four character export component subtype. See also: exporters, exportMovie, showExportDialog.     	 exporter   d get|set [the] exporter of [<movie object> of] <movie reference> [to <export component name|OSType>]  o put the exporter of movie 1 into thisExporterset the exporter of audio track 1 of movie 1 to "System 7 Sound"    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, track exporter                 CARD  <        @             g             T  
 exporters  = get [the] exporters of [<movie object> of] <movie reference>    movie, track   ¨ This read-only property contains a return-delimited list of the localized names of all installed export components which can be used for the media in a movie or track.  1 put the exporters of movie 1 into TheseExporters    Properties exporters               `CARD  Êª        @             g                Setting this Boolean property to true puts the XCMD into a tight loop, giving all CPU time to QuickTime until: (1) the movie stops, (2) HyperCard is switched into the background, or (3) an operating system event is pending (such as a mouse click or disk insertion). The fastIdle causes movies to perform better, but little else in the system will be able to run. For example, HyperCard will not run scripts, applications in the background will not get time, and so on.The default value for fastIdle is false.   	 fastIdle   > get|set [the] fastIdle of <movie reference> [to <true|false>]  l set the fastIdle of movie "My Home Movie" to trueput the fastIdle of movie "My Home Movie" into IdleStatus   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    moviefastIdle      CARD  î        @             g       &    &   É ¯    Yµ       QTVR     ä   Ä Ô The fieldOfView property contains a value that represents the angle of the view for a VR object or scene measured in degrees. Use this property to zoom in or out, with smaller angles for zooming in. The default value of the fieldOfView property is stored with the QuickTime VR movie. Technically, the ÒfieldOfViewÓ represents the vertical field of view of the current VR movie. The field of view is the horizontal or vertical angular expanse visible through a camera. The vertical field of view is a floating-point value that specifies the angle created by the two lines that connect the viewpoint to the top and bottom of the image. This feature requires QuickTime VR version 2.0 or later. See also fieldOfViewRange.    fieldOfView  J get|set [the] fieldOfView of <VR movie reference> [to <angle in degrees>]  g set the fieldOfView of movie "Rover" to 65 -- degreesput the fieldOfView of movie "Rover" into OldFOV    Properties    Rail Road (5 nodes)    ! windoidcardinvisiblefloating   	 VR movie fieldOfView            CARD  ï        @             g       V   ü *   É ¯    Yµ       QTVR 2.0     ,   PÉ    Y´       3.0 Feature        ø  This read-only property is two comma-delimited numbers describing the maximum and minimum field of view for a movie in degrees. These viewing limits are set by a movieÕs author. This feature requires QuickTime VR version 2.0 or later. See also fieldOfView.     fieldOfViewRange   3 get [the] fieldOfViewRange of <VR movie reference>   3 put the fieldOfViewRange of movie 1 into thisRange    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   	 VR movie fieldOfViewRange           CARD  æc        @             g             > ã.   c k m | ~    ¢ ´ This property controls whether capitalization is important when finding text in a movie or text track using the FindText command. If findTextCaseSensitive is set to true, text capitalization affects the search. If findTextCaseSensitive is set to false, text capitalization does not matter. The default value of findTextCaseSensitive is false.See also FindText, findTextReverse, foundTextOffset, findTextStart, and findTextWraparound.    findTextCaseSensitive  J get|set [the] findTextCaseSensitive of<movie reference> [to <true|false>]   set the findTextCaseSensitive of movie "Tour Eiffel" to trueput the findTextCaseSensitive of movie "Tour Eiffel" into CaseSensFlag   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, text trackfindTextCaseSensitive                         àCARD  åZ        @             g              T.   Î Ö Ø í ï þ     % Description: This property controls the direction of the search in a movie or text track when using the FindText command. If findTextReverse is set to true, text will be searched from the findTextStart location backward to the beginning of the movie or text track.  If findTextReverse is set to false, text will be searched from the findTextStart location forward to the end of the movie or text track. The default value of findTextReverse is false.See also FindText, findTextCaseSensitive, foundTextOffset, findTextStart, and findTextWraparound.   findTextReverse  E get|set [the] findTextReverse of <movie reference> [to <true|false>]   u set the findTextReverse of movie "Leonardo" to trueput the findTextReverse of movie "Leonardo" into FindReverseFlag    Properties    counter.mov  ! windoidcardinvisiblefloating    movie, text trackfindTextReverse                 ÀCARD  èÑ        @             g             p  6    !µ    ² ´ Ã Å Ô Ö è The findTextStart property contains the location where the search will begin. If a search is successful, the next search automatically begins just after the find location. But by setting the value of this property, you can change the location from which the next search will begin.The findTextStart property is a three line, return-delimited list. The three lines contain: (1) the movie time (in the current timeFormat)(2) track number(3) the character offset within the track. The movie time item must be a valid time in the movie, that is, between 0 and the movieÕs duration (inclusive). The track number must be greater than zero and less than or equal to the number of tracks in the movie (use the Ònumber of tracksÓ to determine this). If the text you are searching for is not found, the findTextStart is set to:<the current movieTime>11and the result is set to ÒNot found.Ó (please consult the HyperCard Script Language Guide  for a further explanation of Òthe resultÓ).  This means that the next search will begin at the first character of the first track at the current movie time. Initially, the value of findTextStart is:0.011See also FindText, findTextCaseSensitive, foundTextOffset, findTextReverse, findTextWraparound.    findTextStart  L get|set [the] findTextStart of <movie reference> [to <find start location>]   set the findTextStart of movie "Rome" to "6,0" & return & "1" & return & "72"put the findTextStart of movie "Rome" into StartFindFrom    Properties    QTSample.mov   ! windoidcardinvisiblefloating    movie, text trackfindTextStart               CARD  çi        @             g              Ó&    #  +  ¢  ±    ª This property controls whether the FindText command continues searching from the beginning of the movie or text track if the end is reached during a search. If findTextReverse is true, findTextWraparound specifies whether the FindText command continues searching in reverse from the end of a movie, once the beginning is reached. By default, the value of findTextWraparound is true. See also FindText and findTextReverse.      findTextWraparound   H get|set [the] findTextWraparound of <movie reference> [to <true|false>]  v set the findTextWraparound of movie "80 Days" to trueput the findTextWraparound of movie "80 Days" into TextWrapFlag   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, text trackfindTextWraparound                              @CARD  éØ        @             g             ò þ.   w     § © ¶ ¼ Î This read-only property contains the result of the last successful FindText command. This property is a three line, return-delimited list. The three lines contain: (1) the movie time (in the current timeFormat)(2) track number(3) the offset of the first character in the found text of the sample within its track. Initially, the value of foundTextOffset is:0.000Note: If the specified text string is not found in the movie, foundTextOffset is set to the same value.When you find text with findTextReverse set to true, you get the ending time of the sample containing the text rather than the starting time. See also FindText, findTextCaseSensitive, findTextReverse, findTextStart, and findTextWraparound.    foundTextOffset  / get [the] foundTextOffset of <movie reference>   > put the foundTextOffset of movie "Gargoyle" into FoundTextLoc   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, text trackfoundTextOffset           àCARD  Ñ        @             g             ~ 9   ì ! This property specifies the transfer mode (see below) and op color (maximum color values for the addPin and subPin transfer modes, and the weight color for the blended transfer modes) of a visual track or sprite.  Line 1 of the value is one of the QuickDraw transfer modes. Legal values are: copy, or, xor, bic, notCopy, notOr, notXor, notBic, patCopy, patOr, patXor, patBic, notPatCopy, notPatOr, notPatXor, notPatBic, blend, addpin, addover, subpin, transparent, admax, subover, admin, straightAlpha, preMulWhiteAlpha, preMulBlackAlpha, composition, straightAlphaBlend, and preMulColorAlpha.  Adding Ò+ ditherÓ to any mode enables dithering.  Line 2 is the RGB color for use in blending and transparent operations. See ÒColor QuickDrawÓ in Inside Macintosh: Imaging with QuickDraw, for further details.     graphicsMode   d get|set [the] graphicsMode of <track>|<sprite reference> of <movie reference> [to <mode and color>]  W set graphicsMode of track 1 of movie 1 to "copy + dither" &return& "32768,32768,32768"    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    visual track, sprite graphicsMode                                  @CARD  ¹Ý        @             g             ä   The height property describes the height of the movie object in pixels. The height of a movie does not include the controller or the windowÕs title bar.    height   M get|set [the] height of [<movie object> of] <movie reference> [to <integer>]   _ set the height of movie 1 to 320get the height of first video track of movie "My Home Movie"     Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   0 window, movie, visual track, sprite, controllerheight                                   CARD  Ðe        @             g             ´ l This property determines whether or not the track will play back in high quality mode. The precise meaning of ÒhighQualityÓ is defined by the trackÕs media handler, but generally, the media data will be played at the highest possible quality.  Specifying this option may reduce the playback rate, and the amount of processor time available to other applications.    highQualityMode  P get|set [the] highQualityMode of <track> of <movie reference> [to <true|false>]  ~ set the highQualityMode of track 3 of movie 1 to trueput the highQualityMode of track 4 of movie "My Movie" into saveQuality   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    trackhighQualityMode         `CARD  	8        @             g             "   ID   6 get [the] ID of [<movie object> of] <movie reference>  S put the ID of HotSpot 1 of first movie into thisIDget the ID of node 1 of movie 2   3 window, movie, track, scene, sprite, node, hotspot   ; This read-only property is set when an object is created.     Properties ID¥        CARD  Íê        @             hþ          *    QÇ     Y´       3.0 Feature  on mouseUpanswer "You have QuickTime" && the version of quickTime && "installed."end mouseUp   Ñ    ³  Á This property specifies the rate at which idle messages are sent to sprites in a track. This rate then determines how often the sprite will invoke any ÒidleÓ actions. See also: actionsEnabled.     idleFrequency  ] get|set [the] idleFrequency of <sprite track> of <movie reference> [to <frequency in ticks>]   z set the idleFrequency of track 2 of movie 1 to 1put the idleFrequency of first sprite track of movie 1 into saveIdleFreq   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    sprite track idleFrequency           `CARD  Û÷        @             hþ          |    QÇ     Y´       3.0 Feature  on mouseUpanswer "You have QuickTime" && the version of quickTime && "installed."end mouseUp   ý    ã  í This property determines the image associated with a given sprite. The image is specified either by number (index from 1 to the number of images within a scene of a sprite track) or name (not all images have names).See also: imageCount.     image  l get|set [the] image of <sprite reference> of [<sprite track> of] <movie reference>[to <image name|integer>]    put the image of sprite 1 of this scene of track 3 of movie "Fred" into saveImageset the image of sprite 3 of first scene of track 2 of movie 1 to "explosion"   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    sprite image                                 `CARD  Þ        @             hþ       &   ä &   É ¼    Yµ       QTVR      The correction property of a QuickTime VR movie specifies the type of image correction to be applied to panoramic views.  This property is set with a constant name, and possible values are: ¥ ÒnoneÓ Ñ the image is reproduced without any image correction. ¥ ÒpartialÓ Ñ only horizontal warping is applied to the image.  This kind of correction is often sufficient, especially for outdoor scenes. ¥ ÒfullÓ Ñ horizontal and vertical warping are applied to the image.  This correction mode produces perspectively correct images.  This mode takes the most time to construct the panorama image. Note: this property is only valid for panoramic nodes.     imageCorrection  G get|set [the] imageCorrection of <VR movie reference> [to <mode name>]    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    set the imageCorrection of movie 1 to "full"if (the imageCorrection of movie 1 is "none") then set the imageCorrection of movie 1 to "partial"  	 VR movie imageCorrection                   CARD  Ýh        @             hþ             :  D This read-only property describes the number of images in a scene.    imageCount   C get [the] imageCount of <scene> of [<track> of ] <movie reference>   ; put the imageCount of this scene of movie 1 into numImages    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    sceneimageCount        ÀCARD  >W        @             hþ       &   P &   É ¯    Yµ       QTVR       imageQuality    Properties   ? get|set [the] imageQuality of <VR movie reference> [to <name>]  M    ¶  ¹  Û  á 	  The imageQuality property of a panoramic node of a QuickTime VR movie specifies the quality of the image when a panoramic view is rendered, and is set using one of these constants:low Ñ the image is not antialiased.normal Ñ the image is partially antialiased.high Ñ the image is fully antialiased.    set the imageQuality of movie 1 to "high"if (the imageQuality of movie 1 is "low") then set the imageQuality of movie 1 to "normal"   	 VR movie imageQuality           CARD  ¤(        @             hþ             ´  á    ¶  ¾  À  É This property retrieves a movieÕs read-only ÒinformationÓ annotation.  This string may be added to a movie with a QuickTime movie editing application such as MoviePlayer.See also: comments, copyright.     information  + get [the] information of <movie reference>   / put the information of movie 1 into fld "Info"    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movieinformation             ÀCARD  êJ        @             hþ             n  This read-only Boolean property contains true if the specified movie is a QuickTime VR movie; otherwise it contains false.The ÒisVRMovieÓ property works correctly even without QTVR installed, so to determine if a QuickTime movie currently has VR properties (panAngle for instance), check that the movieÕs isVRMovie property is true and that HyperCardÕs "version of QuickTime VR" is greater than or equal to 2.0.    
 isVRMovie  ) get [the] isVRMovie of <movie reference>   0 put the isVRMovie of movie "Rover" into FoundVR   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movieisVRMovie                     `CARD  ¥ª        @             hþ              ú.   ö ! E !` ô $õ &	¹ $	º 	» %	ö &The read/write language property of a movie specifies which tracks QuickTime will use when playing a movie.  When set, QuickTime selects and enables appropriate tracks for the language specified.  If it cannot find an appropriate track for the specified language, the movieÕs language is not changed and the XCMD returns the error Òinvalid language for this movieÓ. A trackÕs read-only language property is set by the movieÕs author. A language can be specified by number or name (see below). SeeInside Macintosh: Text, for more information on language and region codes.  SeeInside Macintosh: QuickTime, for more information on alternate tracks.  Following is a list of currently supported languages, their numeric codes, and a brief description. Language       Number  Script system--------       ------  -------------English           0     Roman scriptFrench            1     Roman scriptGerman            2     Roman scriptItalian           3     Roman scriptDutch             4     Roman scriptSwedish           5     Roman scriptSpanish           6     Roman scriptDanish            7     Roman scriptPortuguese        8     Roman scriptNorwegian         9     Roman scriptHebrew            10    Hebrew scriptJapanese          11    Japanese scriptArabic            12    Arabic scriptFinnish           13    Roman scriptGreek             14    Greek scriptIcelandic         15    variant Roman scriptMaltese           16    variant Roman scriptTurkish           17    variant Roman scriptCroatian          18    Serbo-Croatian in variant Roman scriptTradChinese       19    Chinese in traditional charactersUrdu              20    Arabic scriptHindi             21    Devanagari scriptThai              22    Thai scriptKorean            23    Korean scriptLithuanian        24    CentralEuroRoman scriptPolish            25    CentralEuroRoman scriptHungarian         26    CentralEuroRoman scriptEstonian          27    CentralEuroRoman scriptLettish           28    CentralEuroRoman scriptLatvian           28    Synonym for langLettishSaamisk           29    language of the Sami/Lapp people of ScandinaviaFaeroese          30    Roman scriptFarsi             31    Arabic scriptPersian           31    Synonym for langFarsiRussian           32    Cyrillic scriptSimpChinese       33    Chinese in simplified charactersFlemish           34    Roman scriptIrish             35    Roman scriptAlbanian          36    Roman scriptThe following languages may be specified by number only. Language       Number  Script system--------       ------  -------------Romanian          37    variant Roman scriptCzech             38    CentralEuroRoman scriptSlovak            39    CentralEuroRoman scriptSlovenian         40    uses Croatian variant of Roman scriptYiddish           41    Hebrew scriptSerbian           42    Serbo-Croatian in Cyrillic scriptMacedonian        43    Cyrillic scriptBulgarian         44    variant Cyrillic scriptUkrainian         45    variant Cyrillic scriptByelorussian      46    Cyrillic scriptUzbek             47    variant Cyrillic scriptKazakh            48    variant Cyrillic scriptAzerbaijani       49    Azerbaijani in variant Cyrillic scriptAzerbaijanAr      50    Azerbaijani in Arabic script (Iran)Armenian          51    Armenian scriptGeorgian          52    Georgian scriptMoldavian         53    Cyrillic scriptKirghiz           54    variant Cyrillic scriptTajiki            55    variant Cyrillic scriptTurkmen           56    variant Cyrillic scriptMongolian         57    Mongolian in Mongolian scriptMongolianCyr      58    Mongolian in variant Cyrillic scriptPashto            59    ExtArabic scriptKurdish           60    Arabic scriptKashmiri          61    ExtArabic scriptSindhi            62    ExtArabic scriptTibetan           63    Tibetan scriptNepali            64    Devanagari scriptSanskrit          65    Devanagari scriptMarathi           66    Devanagari scriptBengali           67    Bengali scriptAssamese          68    Bengali scriptGujarati          69    Gujarati scriptPunjabi           70    Gurmukhi scriptOriya             71    Oriya scriptMalayalam         72    Malayalam scriptKannada           73    Kannada scriptTamil             74    Tamil scriptTelugu            75    Telugu scriptSinhalese         76    Sinhalese scriptBurmese           77    Burmese scriptKhmer             78    Khmer scriptLao               79    Laotian scriptVietnamese        80    Vietnamese scriptIndonesian        81    Roman scriptTagalog           82    Roman scriptMalayRoman        83    Malay in Roman scriptMalayArabic       84    Malay in Arabic scriptAmharic           85    Ethiopic scriptTigrinya          86    Ethiopic scriptGalla             87    Ethiopic scriptOromo             87    Synonym for langGallaSomali            88    Roman scriptSwahili           89    Roman scriptKinyarwanda       90    Roman scriptRuanda            90    synonym for langKinyarwandaRundi             91    Roman scriptNyanja            92    Roman scriptChewa             92    synonym for langNyanjaMalagasy          93    Roman scriptEsperanto         94    extended Roman scriptWelsh             128   Roman scriptBasque            129   Roman scriptCatalan           130   Roman scriptLatin             131   Roman scriptQuechua           132   Roman scriptGuarani           133   Roman scriptAymara            134   Roman scriptTatar             135   Cyrillic scriptUighur            136   Arabic scriptDzongkha          137   (lang of Bhutan) Tibetan scriptJavaneseRom       138   Javanese in Roman scriptSundaneseRom      139   Sundanese in Roman scriptGalician          140   Roman scriptAfricaans         141   Roman script  	 language   a get|set [the] language of [<track> of] <movie reference> [to <language or region name| integer>]   ) set the language of movie 1 to "English"    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, track language                                   CARD  ¦        @             hþ       ( 	  ( (   ] o          	   results    ¦     The layer property of tracks and sprites controls the order in which they are drawn.  Layers are numbered from -32767 through 32767. QuickTime draws higher-numbered layers first, placing lower-numbered layers on top of them. If a movie has more than one track or sprite in the same layer, those layers are displayed in order by object number, displaying the higher-numbered object first. See also: number.    layer  J get|set [the] layer of <track|sprite> of <movie reference> [to <integer>]  3 set the layer of first video track of movie 2 to 1    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating ÿþ BabyCha w Controller  tracks 3    1 -- 0 -- Video    2 -- 0 -- Sound    3 -- -1 -- Sprite      Sprite: 1 -- 32767      Sprite: 2 -- -1      Sprite: 3 -- -2      Sprite: 4 -- -3      Sprite: 5 -- -4      Sprite: 6 -- -5      Sprite: 7 -- -6      Sprite: 8 -- -7      Sprite: 9 -- -8      Sprite: 10 -- -9      Sprite: 11 -- -10      Sprite: 12 -- -112.0 Demo.f3 Flat  tracks 8    1 -- 0 -- QuickTime VR    2 -- 0 -- VR Panorama    3 -- 0 -- VR Object    4 -- 0 -- Video    5 -- 0 -- Video    6 -- 0 -- Video    7 -- 32767 -- Video    8 -- -1 -- SoundQTSample.mov  tracks 2    1 -- 0 -- Sound    2 -- 0 -- Video    sprite, tracklayer                        CARD  ó                      hþ             Ø   left   K set|get [the] left of [<movie object> of] <movie reference> [to <integer>]  ·    »  Ù   The left property returns or sets an integer equal to item 1 of an objectÕs rectangle. If you set the left of an object, it moves horizontally. The size of the object remains the same. Object            Relative tomovie window       card windowmovie                    movie windowtracks                   moviesprites                  moviecontroller             movie window (read-only)See also rectangle.    0 controller, movie, sprite, visual track, window   set the left of video track 1 of movie 1 to 10put the left of sprite "fred" of this scene of first sprite track of movie 1 into fredLeftleft                àCARD  C¾        @             hþ       &   p &   É ¯    Yµ       QTVR       linkDestination   Properties   L get [the] linkDestination of <hotspot> of [<node> of] <VR movie reference>   O set currNodeID of movie 1 to linkDestination of hotspot 1 of node 3 of movie 1    hotspot   In a QuickTime VR movie, the read-only linkDestination property determines the ID of the node, or the URL of the website to which a hotspot is linked. linkDestination        CARD  ¶        @             hþ           	  Æ ±6   c j  &Ú Ü &( * &  ± p y The loc property describes the top left corner of the specified movie or movie object. Changing the location (or loc) of an object does not change its size, but moves the entire object so that the top left corner is located at the specified point. The default positioning of movie windows can be set with the optional parameter value Òdocument.Ó The window appears 20,20 pixels from the frontmost document window regardless of type, except for script editor and debugger windows, and adjusts the location as necessary to keep it mostly onscreen.In the case of a rotated or scaled object the location is the topleft of its bounding box.Examples include:set the loc of movie 1 to 0,0put the loc of movie 3 into saveMovieLocset the loc of track 3 of movie 1 to 10,10get the loc of track 1 of movie 1set the loc of sprite 1 of movie 1 to 20,20put loc of sprite 3 of track 2 of movie 1 into mySpriteLocObject             Relative tomovie window       card windowmovie                    movie windowtracks                   moviesprites                  moviecontroller             movie window (read-only)See also: rectangle.     loc[ation]   H get|set [the] loc of [<movie object> of] <movie reference> [to <point>]   (see Description)   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   0 window, movie, visual track, sprite, controller   Sprite Location demo loc[ation]                            ÀCARD  Ëy        @             hþ            v o   Q _ The lockMessages property specifies whether movie messages are sent to the current card. Messages affected are closeMovie, enteringVRNode, leavingVRNode, mouseDownInMovie, mouseEnterMovie, mouseLeaveMovie, mouseStillDownInMovie, mouseTriggerInMovie, mouseUpInMovie, mouseWithinMovie, movieLinkToURL, movieRateChanged, movieTimeChanged, movieVolumeChanged, openMovie, spriteCustomAction, spriteDebugMessage. When you donÕt want to receive messages, setting lockMessages to true is useful because you may want to temporarily prevent some messages being sent. Also, QuickTime and HyperCard will be able to use the time usually spent sending messages for other tasks.The default value is false which results in movie messages being sent. The lockMessages property is reset to false at idle (at the end of all pending handlers). Sending ÒidleÓ to a movie does not reset lockMessages. Although lockMessages is a Boolean property, the Movie XCMD counts the number of times the property is set and only resumes sending callback messages once the count reaches zero or HyperCard returns to idle. See also: Messages Index.     lockMessages   B get|set [the] lockMessages of <movie reference> [to <true|false>]  L set lockMessages of movie "MyHomeMovie" to trueget lockMessages of movie 1   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movielockMessages          @CARD  ÌÖ        @             hþ             ò ä   Ç Õ The lockScreen property specifies whether the movie window displays movie changes. The default value is false. The lockScreen property is reset to false at idle (at the end of all pending handlers). Sending ÒidleÓ to a movie does not reset lockScreen. Although lockScreen is a Boolean property, the Movie XCMD counts the number of times the property is set and only unlocks the screen when the count reaches zero or HyperCard returns to idle. See also: Messages Index.   lockScreen   @ get|set [the] lockScreen of <movie reference> [to <true|false>]  W set the lockScreen of movie 1 to trueput the lockScreen of movie 2 into saveLockState    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movielockScreen                CARD  È        @             hþ             B 5    % The loop property determines if a movie loops when it reaches the end.  A movie loops in either reverse or forward play.To loop, playing alternately forward and backward, set the loopIsPalindrome and loop properties to true. The default value for loop is false.See also: loopIsPalindrome.     loop   : get|set [the] loop of <movie reference> [to <true|false>]  b set the loop of movie "My Home Movie" to trueput the loop of movie "My Home Movie" into LoopFlag   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movieloop      `CARD  É2        @             hþ              Î   ' &§ ³ · When the loopIsPalindrome property is true a looping movie will reverse direction when it loops. The loop property must be true for loopIsPalindrome to take effect. By default, the loopIsPalindrome property is false.The following handler demonstrates how to make a movie loop back and forth:on setLooping  set the loop of movie "Dragonfly" to true  set the loopIsPalindrome of movie "Dragonfly" to trueend setLoopingSee also: loop.   loopIsPalindrome   F get|set [the] loopIsPalindrome of <movie reference> [to <true|false>]   set the loopIsPalindrome of movie "Birdwing Butterfly" to trueput the loopIsPalindrome of movie "Birdwing Butterfly" into PalindromeFlag   Properties    QTSample.mov   ! windoidcardinvisiblefloating    movieloopIsPalindrome          àCARD  Í        @             hþ                mask    QTSample.mov  s The mask property specifies the image file used to clip a movie or track. The image is converted to black and white (using dithering if possible) and used to mask the movie or track image. A pixel is then displayed only if the corresponding pixel in the image is set. Not all images can be used as masks. The XCMD creates a Macintosh region from the black and white version of the image. Because a region is limited to 64K, it may not be possible to create a region from a complex image. If it is not possible to create a mask region from a dithered version of the image, it is converted to black and white without dithering and another attempt is made to generate a region. If this fails, the error Òthat image file is too complex to use as a mask for this movieÓ is returned and the mask is not changed.Setting the mask property to ÒemptyÓ will clear the movie or track mask.     Properties   R get|set [the] mask of [<track> of] <movie reference> [to <image file name|empty>]  o set the mask of movie 1 to "checker board.PICT"put the mask of video track 1 of first movie into vidTrackMask    movie, visual trackmask                                   CARD  »ð        @             hþ       , 	   ,   PÉ    Y´       3.0 Feature    	ªF   Þ !ú S X 	< 	B 	D 	H 	J 	N 	P 	S 	U 	Z 	\ 	b The matrix property allows you to get and set the transformation matrix used by QuickTime when a movie, visual track, or sprite is displayed. A transformation matrix defines how points are mapped from one coordinate space to another. When you use the Movie XCMD to set an objectÕs rect and loc properties, you are actually modifying its transformation matrix.  By modifying elements of a transformation matrix you can change a number of the movie objectÕs spatial characteristicsÑincluding translation, rotation, and scalingÑat the same time.Note: You must have QuickTime 3.0 or later installed in order to use this property.A full treatment of QuickTimeÕs use of matrices is beyond the scope of this stack. See ÒMovie ToolboxÓ in Inside Macintosh: QuickTime, for detailed information. A brief description of matrix operations follows. Click the Demo button below for examples of the movieÕs matrix property.The matrix used for two-dimensional transformations is a 3 x 3 matrix, represented in HyperTalk by three lines of three numbers (separated by commas):a,   b,  uc,   d,  vh,  k,  wA matrix consists of linear elements a, b, c, and d; perspective elements u and v; translation elements h and k; and the scale factor w.  Elements h and k control translation.  Elements a and d control the degree of the scaling in the horizontal and vertical directions, respectively.  Elements a, b, c, and d together specify the angle of rotation.  Elements b and c control skew in the y and x direction, respectively.  Elements u, v, and w determine perspective.You can set the matrix property to the string ÒidentityÓ, which applies the identity matrix; that is, one which performs no transformation at all:1.0, 0.0, 0.00.0, 1.0, 0.00.0, 0.0, 1.0A matrix which changes an objectÕs location by a specified amount is a translation matrix:1.0, 0.0, 0.00.0, 1.0, 0.0h,    k,   1.0Setting the objectÕs matrix property to the above matrix is equivalent to setting the objectÕs loc property to Òh,kÓ, if the containing objects have identity matrixes.A matrix which stretches or shrinks a movie is a scaling matrix (see scale): Sx,  0.0, 0.00.0, Sy,  0.00.0, 0.0, 1.0The rotate and skew commands also modify an objectÕs matrix. To see how, examine the objectÕs matrix property before and after sending an object one of these commands.See also: rotate, skew, rect, loc, width, height.    matrix   W get|set [the] matrix of [<movie object> of] <movie reference> [to <matrix|"identity">]    set matrix of movie "Zoo" to "2,0,0" & return & "0,2,0" & return & "0,0,1"put the matrix of track 3 of movie 1 into testMatrix   Properties    BabyCha w Controller   ! windoidcardinvisiblefloating    movie, visual track, sprite   rotate, skew matrix                              `CARD  é                      hþ               	 messages   ( get [the] messages of <movie reference>  . put the messages of movie 1 into messagesList   movie      _  m This property contains a list of the callback messages the movie sends to HyperCard. See the Messages Index for a complete list. messages                        `CARD  8â                      hþ             ø  2 get [the] missingComponents of <movie reference>   F put the missingComponents of window "VR Experience" into missingStuff   movie   Q    ! The missingComponents property is a list of the type and subtype of all components required by the movie, but missing from the current system.  For example, the missingComponents of a QuickTime VR 2.0 panorama movie without QuickTime VR installed will be this return delimited list:     playqtvrmhlrqtvrmhlrpanoIn the above example,ÒplayqtvrÓ indicates the 2.0 VR controller is missing.ÒmhlrqtvrÓ indicates the VR media handler is missing.ÒmhlrpanoÓ indicates the panorama media handler is missing.See Inside Macintosh: Components, for more details about components.     missingComponentsmissingComponents                                   CARD  ½Û        @             hþ             : P   % ) + 8 The ÒmovieÓ property of a movie window returns the full path to the QuickTime movie being displayed in the window. Setting the property closes the current movie and opens another movie in the same window. The following properties are reset to their default values when the movie is changed: matrix, all movie dimension properties (rect, loc, width, etc), findTextStart, findTextOffset, startTime, endTime, and currTime. All other window and movie properties are left unchanged. Although the window rect is not changed (even if the rect of the new movie is not the same), the movieInfo XFCN may be used to determine the new movieÕs rect, and then Òset rect of windowÓ can be used to adjust the windowÕs rect, or the ÒresizeToMovieÓ command can be used to resize the window for the new movie. See also: rect, resizeToMovie.    movie  = get|set [the] movie of <movie window> [to <movie file name>]   B set the movie of window "QuickTime Logo Movie" to "My Home Movie"   Properties    QTSample.mov   ! windoidcardinvisiblefloating    window movie              CARD  ©&        @             hþ          	  H ò   × â Mute turns the sound of a movie or track off and on. The mute property is a Boolean value in which ÒfalseÓ, the default value, indicates that sound is on and ÒtrueÓ indicates that sound is off. Mute maintains the magnitude of the soundVolume property. Setting mute to true negates the objectÕs soundVolume. So if the soundVolume is 127 and you set mute to true, the soundVolume will become -127, and setting mute to false will return the soundVolume to 127.See Also: soundVolume.    mute   L get|set [the] mute of [<sound track of] <movie reference> [to <true|false>]  g get the mute of movie "My Home Movie"put mute of audio track 1 of movie "My Home Movie" into MuteFlag    Properties    BabyCha w Controller    soundVolume & mute & rate Demo   ! windoidcardinvisiblefloating    movie, audio track mute                                ÀCARD  À3        @             hþ             z &    j  | 9 D Á ú _ x The name property applies to all objects associated with movies. Only the windowÕs name may be changed. Windows and Movies (formerly windowName)The name of a movie window is the name which appears in the title bar of the movie window. Only movies with a window type of ÒplainÓ, ÒzoomÓ, and ÒtallWindoidÓ (see windowStyle in the Parameters section) will display the name of the window.  The name of the movie is the full path of the movie file.Tracks, Sprites, Scenes, Nodes, HotSpots, and ControllersFor these objects, the name property is read-only and is set by the QuickTime authoring program. Scenes is a special caseThe name of a scene is the text of a chapter track, if any, that coincides with the startTime of the scene. If no chapter track coincides with the startTime of the scene, the name property will return empty. A chapter track is the first disabled text track to which there is a reference of type ÔCHAPÕ in a sprite track (or in a video trackÑwhich doesn't apply here).     name   8 get [the] name of [<movie object> of] <movie reference>   set the name of window "My Home Movie" to "NealÕs Favorite Movie"put the name of sprite 1 of this scene of track 2 into OldSpriteName   ? window, movie, track, scene, sprite, node, hotspot, controller    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating name              `CARD  Ú8        @             hþ              Á The number property contains a read-only integer representing an objectÕs ordinal position relative to other objects in the same parent object. The number of a movie controller is always 1.     number   = get [the] number of [<movie object> of] of <movie reference>   _ put the number of track "French audio" of movie 1 into trackNumget the number of movie "Fred"    Properties    16.Paul & Laura  ! windoidcardinvisiblefloating   ? window, movie, track, scene, sprite, node, hotspot, controller number¥                               @CARD  =D                      yB             ä   owner  < get [the] owner of [<movie object> of] of <movie reference>  t put word 3 of the owner of movie 1 into WindowIDNumput (the owner of window id WindowIDNum = "Movie") into isMovie Ú The owner property indicates the containment hierarchy for movies and their objects. Some examples are:¥ the owner of window "MyHomeMovie" -- ÒMovieÓ, referring to the Movie XCMD¥ the owner of movie 1 -- ÒWindow ID <number>Ó, the unique window ID number¥ the owner of this scene of movie 1 -- Òtrack <number> of movie 1Ó, where ÒnumberÓ   indicates the number of the first sprite track¥ the owner of track 1 of movie 1 -- Òmovie 1Ó¥ the owner of sprite 1 of this scene of first sprite track of movie 1 -- Òscene <number> of   track <number> of movie 1Ó¥ the owner of node 1 of movie 1 -- Òmovie 1Ó¥ the owner of hotspot 1 of node 1 of movie 1 -- Ònode 1 of    movie 1Ó¥ the owner of controller of movie 1 -- Òmovie 1Ó  ? window, movie, scene, track, sprite, node, hotspot, controller owner                                   `CARD  ë        @             yB       &   ê &   É ¯    Yµ       QTVR     Â     ¡ ª This property contains a value that represents the pan angle of the view in degrees. Changing the pan angle will move the point of view horizontally.  Increasing the panAngle turns oneÕs view to the left (see tiltAngle for vertical changes of view). The default, minimum, and maximum the panAngle is set by the movieÕs author. This feature requires QuickTime VR version 2.0 or later. See also: panAngleRange, tiltAngle.   	 panAngle   G get|set [the] panAngle of <VR movie reference> [to <angle in degrees>]   h set the panAngle of movie "Rover" to 353 -- degreesput the panAngle of movie "Rover" into OldPanAngle    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   	 VR movie panAngle                    àCARD  ìÏ        @             yB       V   4 *   É ®   Yµ       QTVR 2.0     ,   PÉ    Y´       3.0 Feature    -     This read-only property for VR movies describes the minimum and maximum panAngle values. The property is in the form of two items: item 1 is the minimum panAngle setting, and item 2 maximum panAngle setting. This feature requires QuickTime VR version 2.0 or later.See also panAngle.     panAngleRange  0 get [the] panAngleRange of <VR movie reference>  Y get the panAngleRange of movie 1put the panAngleRange of movie "Fred" into thisMuchOnly    Properties    BabyCha w Controller   ! windoidcardinvisiblefloating   	 VR movie panAngleRange                     CARD  Ò        @             yB           	  " Ñ   ¼ Á The passMovieClick property determines whether mouse events in the movie window are passed to QuickTime. QuickTime provides some standard interface features in a movie: clicking the badge will show the hidden movie controller, double-clicking a movie will play a paused movie, single-clicking will stop a playing movie, clicking and dragging will pan a QuickTime VR panorama. Setting passMovieClick to false prevents QuickTime from receiving mouse events and also prevents these standard actions.The default value is true.Note: If passMovieClick is set to false it is recommended that badge also be set to false so that a user will not be confused by a movie badge that does not work.See also: badge.     passMovieClick   D get|set [the] passMovieClick of <movie reference> [to <true|false>]  y set the passMovieClick of movie "My Home Movie" to trueput the passMovieClick of movie "My Home Movie" into PassingFlag    Properties    BabyCha w Controller    passMovieClick Demo  ! windoidcardinvisiblefloating    moviepassMovieClick                            	 CARD  Ó¬        @             yB         V "  0 4ö         
          Ü © ó ç        
   FALSE  on mouseUpput GetDemo() into demoMovieNameset hilite of me to trueset hilite of cd btn "TRUE" to false --Æif there is a window demoMovieName thenset passMovieClick of window demoMovieName to falseend ifend mouseUp    Ü y ó ªà       
   TRUE  on mouseUpput GetDemo() into demoMovieNameset hilite of me to trueset hilite of cd btn "FALSE" to false --Æif there is a window demoMovieName thenset passMovieClick of window demoMovieName to trueend ifend mouseUp   0   Ü " ó z        
   PassMovieClick:      ¦ ' ¼ Ë        
   Show/Hide Controller  on mouseUpif DemoMovieDisplayed() thenput GetDemo() into demoMovieName-- Show or Hide the controller.set controllerVisible of window demoMovieName Âto not the controllerVisible of window demoMovieNameend ifend mouseUp   ^   o '  Ë        
   Show Movie  on mouseUpset cursor to 4ShowHideDemoend mouseUp  0   b-¶             Movie Location     "   Ý  ô "          3    " 	  ¦  ½ "          2    " 
  p              1    & 0 S»            mask       passMovieClick Demo  ! windoidcardinvisiblefloating ÿÿ         Instructions:Click the button ÒShow MovieÓ to display the sample movie. Change the passMovieClick property by selecting true or false.Note: When passMovieClick is false, double-clicking and clicking the badge have no effect.   QTSample.mov passMovieClick Demo on ShowDemoMovieset cursor to 4-- Locate the movie in the cd btnput the topLeft of cd btn "Movie Location" into MyMovieLoccallMovieXCMD GetDemo(),"rect",MyMovieLoc,"Invisible"if the result is false then return falseput GetDemo() into demoMovieNameset badge of window demoMovieName to trueset controllerVisible of window demoMovieName to falseset loop of window demoMovieName to trueset passMovieClick of window demoMovieName to Âthe hilite of cd btn "TRUE" --Æshow window demoMovieNamereturn trueend ShowDemoMovieon closeMovieresetpass closeMovieend closeMovieon reset-- Reset all the buttons on this card.set hilite of cd btn "FALSE" to false --Æset hilite of cd btn "TRUE" to true --Æend reset                                   CARD  ä        @             yB             H f    Î  ß A D This read-only property is set by a movieÕs author, and determines the saved movie window location.  The Movie XCMD does not use this location when opening a movie window, but if a movie is opened with the visible parameter set to false, th